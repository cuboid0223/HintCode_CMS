{"version":3,"file":"index.es.js","sources":["../src/hooks/useImportConfig.tsx","../src/utils/file_headers.ts","../src/utils/file_to_json.ts","../src/utils/data.ts","../src/utils/get_import_inference_type.ts","../src/components/DataNewPropertiesMapping.tsx","../src/components/ImportFileUpload.tsx","../src/components/ImportNewPropertyFieldPreview.tsx","../src/components/ImportSaveInProgress.tsx","../src/export_import/ImportCollectionAction.tsx","../src/export_import/export.ts","../src/export_import/ExportCollectionAction.tsx","../src/useImportExportPlugin.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { Entity, Property } from \"@firecms/core\";\nimport { ImportConfig } from \"../types\";\n\nexport const useImportConfig = (): ImportConfig => {\n\n    const [inUse, setInUse] = useState<boolean>(false);\n    const [defaultValues, setDefaultValues] = useState<Record<string, any>>({});\n    const [idColumn, setIdColumn] = useState<string | undefined>();\n    const [importData, setImportData] = useState<object[]>([]);\n    const [entities, setEntities] = useState<Entity<any>[]>([]);\n    const [headersMapping, setHeadersMapping] = useState<Record<string, string | null>>({});\n    const [headingsOrder, setHeadingsOrder] = useState<string[]>([]);\n    const [originProperties, setOriginProperties] = useState<Record<string, Property>>({});\n\n    return {\n        inUse,\n        setInUse,\n        idColumn,\n        setIdColumn,\n        entities,\n        setEntities,\n        importData,\n        setImportData,\n        headingsOrder: (headingsOrder ?? []).length > 0 ? headingsOrder : Object.keys(headersMapping),\n        setHeadingsOrder,\n        headersMapping,\n        setHeadersMapping,\n        originProperties,\n        setOriginProperties,\n        defaultValues,\n        setDefaultValues\n    };\n};\n","import * as XLSX from \"xlsx\";\nexport function getXLSXHeaders(sheet: any) {\n    let header = 0; let offset = 1;\n    const hdr = [];\n    const o:any = {};\n    if (sheet == null || sheet[\"!ref\"] == null) return [];\n    const range = o.range !== undefined ? o.range : sheet[\"!ref\"];\n    let r;\n    if (o.header === 1) header = 1;\n    else if (o.header === \"A\") header = 2;\n    else if (Array.isArray(o.header)) header = 3;\n    switch (typeof range) {\n        case \"string\":\n            r = safeDecodeRange(range);\n            break;\n        case \"number\":\n            r = safeDecodeRange(sheet[\"!ref\"]);\n            r.s.r = range;\n            break;\n        default:\n            r = range;\n    }\n    if (header > 0) offset = 0;\n    const rr = XLSX.utils.encode_row(r.s.r);\n    const cols = new Array(r.e.c - r.s.c + 1);\n    for (let C = r.s.c; C <= r.e.c; ++C) {\n        cols[C] = XLSX.utils.encode_col(C);\n        const val = sheet[cols[C] + rr];\n        switch (header) {\n            case 1:\n                hdr.push(C);\n                break;\n            case 2:\n                hdr.push(cols[C]);\n                break;\n            case 3:\n                hdr.push(o.header[C - r.s.c]);\n                break;\n            default:\n                if (val === undefined) continue;\n                hdr.push(XLSX.utils.format_cell(val));\n        }\n    }\n    return hdr;\n}\n\nfunction safeDecodeRange(range:any) {\n    const o = {\n        s: {\n            c: 0,\n            r: 0\n        },\n        e: {\n            c: 0,\n            r: 0\n        }\n    };\n    let idx = 0; let i = 0; let cc = 0;\n    const len = range.length;\n    for (idx = 0; i < len; ++i) {\n        if ((cc = range.charCodeAt(i) - 64) < 1 || cc > 26) break;\n        idx = 26 * idx + cc;\n    }\n    o.s.c = --idx;\n\n    for (idx = 0; i < len; ++i) {\n        if ((cc = range.charCodeAt(i) - 48) < 0 || cc > 9) break;\n        idx = 10 * idx + cc;\n    }\n    o.s.r = --idx;\n\n    if (i === len || range.charCodeAt(++i) === 58) {\n        o.e.c = o.s.c;\n        o.e.r = o.s.r;\n        return o;\n    }\n\n    for (idx = 0; i !== len; ++i) {\n        if ((cc = range.charCodeAt(i) - 64) < 1 || cc > 26) break;\n        idx = 26 * idx + cc;\n    }\n    o.e.c = --idx;\n\n    for (idx = 0; i !== len; ++i) {\n        if ((cc = range.charCodeAt(i) - 48) < 0 || cc > 9) break;\n        idx = 10 * idx + cc;\n    }\n    o.e.r = --idx;\n    return o;\n}\n","import * as XLSX from \"xlsx\";\nimport { getXLSXHeaders } from \"./file_headers\";\n\ntype ConversionResult = {\n    data: object[];\n    propertiesOrder: string[]\n}\n\nexport function convertFileToJson(file: File): Promise<ConversionResult> {\n    return new Promise((resolve, reject) => {\n        if (file.type === \"application/json\") {\n            console.debug(\"Converting JSON file to JSON\", file.name);\n            const reader = new FileReader();\n            reader.onload = function (e) {\n                try {\n                    const data = e.target?.result as string;\n                    const jsonData = JSON.parse(data);\n                    if (!Array.isArray(jsonData)) {\n                        reject(new Error(\"JSON file should contain an array of objects\"));\n                    } else {\n                        // Assuming all objects in the array have the same structure/order\n                        const propertiesOrder = jsonData.length > 0 ? Object.keys(jsonData[0]) : [];\n                        resolve({\n                            data: jsonData,\n                            propertiesOrder\n                        });\n                    }\n                } catch (e) {\n                    console.error(\"Error parsing JSON file\", e);\n                    reject(e);\n                }\n            };\n            reader.readAsText(file);\n        } else {\n            console.debug(\"Converting Excel file to JSON\", file.name);\n            const reader = new FileReader();\n            reader.onload = function (e) {\n                const data = new Uint8Array(e.target?.result as ArrayBuffer);\n                const workbook = XLSX.read(data, {\n                    type: \"array\",\n                    codepage: 65001,\n                    cellDates: true,\n                });\n                const worksheetName = workbook.SheetNames[0];\n                const worksheet = workbook.Sheets[worksheetName];\n                const parsedData: Array<any> = XLSX.utils.sheet_to_json(worksheet);\n                const headers = getXLSXHeaders(worksheet);\n                const cleanedData = parsedData.map(mapJsonParse);\n                const jsonData = cleanedData.map(unflattenObject);\n                resolve({\n                    data: jsonData,\n                    propertiesOrder: headers\n                });\n            };\n            reader.readAsArrayBuffer(file);\n        }\n    });\n}\n\nfunction mapJsonParse(obj: Record<string, any>) {\n    return Object.keys(obj).reduce((acc: Record<string, any>, key) => {\n        try {\n            acc[key] = JSON.parse(obj[key]);\n        } catch (e) {\n            acc[key] = obj[key];\n        }\n        return acc;\n    }, {});\n}\n\n/**\n * Take an object with keys of type `address.street`, `address.city` and\n * convert it to an object with nested objects like `{ address: { street: ..., city: ... } }`\n * @param flatObj\n */\nexport function unflattenObject(flatObj: { [key: string]: any }) {\n    return Object.keys(flatObj).reduce((nestedObj, key) => {\n        let currentObj = nestedObj;\n        const keyParts = key.split(\".\");\n        keyParts.forEach((keyPart, i) => {\n\n            if (/^[\\w]+\\[\\d+\\]$/.test(keyPart)) {\n                const mainPropertyName = keyPart.slice(0, keyPart.indexOf(\"[\"));\n                const index = parseInt(keyPart.slice(keyPart.indexOf(\"[\") + 1, keyPart.indexOf(\"]\")));\n\n                if (!currentObj[mainPropertyName]) {\n                    currentObj[mainPropertyName] = []\n                }\n\n                if (i !== keyParts.length - 1) {\n                    currentObj[mainPropertyName][index] = currentObj[mainPropertyName][index] || {};\n                    currentObj = currentObj[mainPropertyName][index];\n                } else {\n                    currentObj[mainPropertyName][index] = flatObj[key];\n                }\n            } else if (i !== keyParts.length - 1) {\n                currentObj[keyPart] = currentObj[keyPart] || {};\n                currentObj = currentObj[keyPart];\n            } else {\n                currentObj[keyPart] = flatObj[key];\n            }\n\n        });\n        return nestedObj;\n    }, {} as { [key: string]: any });\n}\n","import {\n    Entity,\n    EntityReference,\n    getPropertyInPath,\n    isPropertyBuilder,\n    mergeDeep,\n    Properties,\n    Property,\n    PropertyOrBuilder,\n    ResolvedProperty,\n    resolveProperty\n} from \"@firecms/core\";\nimport { unflattenObject } from \"./file_to_json\";\nimport { getIn } from \"@firecms/formex\";\nimport { inferTypeFromValue } from \"@firecms/schema_inference\";\n\nexport function convertDataToEntity(data: Record<any, any>,\n                                    idColumn: string | undefined,\n                                    headersMapping: Record<string, string | null>,\n                                    properties: Properties,\n                                    path: string,\n                                    defaultValues: Record<string, any>): Entity<any> {\n    const flatObject = flattenEntry(data);\n    if (idColumn)\n        delete flatObject[idColumn];\n    const mappedKeysObject = Object.entries(flatObject)\n        .map(([key, value]) => {\n            const mappedKey = getIn(headersMapping, key) ?? key;\n\n            const mappedProperty = getPropertyInPath(properties, mappedKey);\n            if (!mappedProperty) {\n                return {};\n            }\n            const processedValue = processValueMapping(value, mappedProperty);\n            return ({\n                [mappedKey]: processedValue\n            });\n        })\n        .reduce((acc, curr) => ({ ...acc, ...curr }), {});\n\n    const values = mergeDeep(defaultValues ?? {}, unflattenObject(mappedKeysObject));\n    let id = idColumn ? data[idColumn] : undefined;\n    if (typeof id === \"string\") {\n        id = id.trim();\n    } else if (typeof id === \"number\") {\n        id = id.toString();\n    } else if (typeof id === \"boolean\") {\n        id = id.toString();\n    } else if (id instanceof Date) {\n        id = id.toISOString();\n    } else if (id && \"toString\" in id) {\n        id = id.toString();\n    }\n\n    return {\n        id,\n        values,\n        path\n    };\n}\n\nexport function flattenEntry(obj: any, parent = \"\"): any {\n    return Object.keys(obj).reduce((acc, key) => {\n        const prefixedKey = parent ? `${parent}.${key}` : key;\n\n        if (typeof obj[key] === \"object\" && !(obj[key] instanceof Date) && obj[key] !== null && !Array.isArray(obj[key])) {\n            Object.assign(acc, flattenEntry(obj[key], prefixedKey));\n        } else {\n            // @ts-ignore\n            acc[prefixedKey] = obj[key];\n        }\n\n        return acc;\n    }, {});\n}\n\nexport function processValueMapping(value: any, property?: PropertyOrBuilder): any {\n    if (value === null) return null;\n\n    if (property === undefined) return value;\n    const usedProperty: ResolvedProperty | null = resolveProperty({\n        propertyOrBuilder: property,\n        propertyValue: value\n    })\n    if (usedProperty === null) return value;\n    const from = inferTypeFromValue(value);\n    const to = usedProperty.dataType;\n\n    if (from === \"array\" && to === \"array\" && Array.isArray(value) && usedProperty.of && !isPropertyBuilder(usedProperty.of as PropertyOrBuilder)) {\n        return value.map(v => processValueMapping(v, usedProperty.of as Property));\n    } else if (from === \"string\" && to === \"number\" && typeof value === \"string\") {\n        return Number(value);\n    } else if (from === \"string\" && to === \"array\" && typeof value === \"string\" && usedProperty.of && !isPropertyBuilder(usedProperty.of as PropertyOrBuilder)) {\n        return value.split(\",\").map((v: string) => processValueMapping(v, usedProperty.of));\n    } else if (from === \"string\" && to === \"boolean\") {\n        return value === \"true\";\n    } else if (from === \"number\" && to === \"boolean\") {\n        return value === 1;\n    } else if (from === \"boolean\" && to === \"number\") {\n        return value ? 1 : 0;\n    } else if (from === \"boolean\" && to === \"string\") {\n        return value ? \"true\" : \"false\";\n    } else if (from === \"number\" && to === \"string\" && typeof value === \"number\") {\n        return value.toString();\n    } else if (from === \"string\" && to === \"array\" && typeof value === \"string\") {\n        return value.split(\",\").map((v: string) => v.trim());\n    } else if (from === \"string\" && to === \"date\" && typeof value === \"string\") {\n        try {\n            return new Date(value);\n        } catch (e) {\n            return value;\n        }\n    } else if (from === \"date\" && to === \"string\") {\n        return value instanceof Date && value.toISOString();\n    } else if (from === \"number\" && to === \"date\" && typeof value === \"number\") {\n        try {\n            return new Date(value);\n        } catch (e) {\n            return value;\n        }\n    } else if (from === \"string\" && to === \"reference\" && typeof value === \"string\") {\n        // split value into path and entityId (entityId is the last part of the path, after the last /)\n        const path = value.split(\"/\").slice(0, -1).join(\"/\");\n        const entityId = value.split(\"/\").slice(-1)[0];\n        return new EntityReference(entityId, path);\n\n    } else if (from === to) {\n        return value;\n    } else if (from === \"array\" && to === \"string\" && Array.isArray(value)) {\n        return value.join(\",\");\n    }\n\n    return value;\n}\n","import { DataType } from \"@firecms/core\";\n\nexport function getInferenceType(value: any): DataType {\n    if (typeof value === \"number\")\n        return \"number\";\n    else if (typeof value === \"string\")\n        return \"string\";\n    else if (typeof value === \"boolean\")\n        return \"boolean\";\n    else if (value instanceof Date)\n        return \"date\";\n    else if (Array.isArray(value))\n        return \"array\";\n    return \"map\";\n}\n\n\nfunction isUnixTimestamp(num: number): boolean {\n    const numString = num.toString();\n    // check if the number has 13 digits\n    const isLengthValid = numString.length === 13;\n\n    // check if it falls in the expected Unix timestamp range (from 1970 to 2100)\n    const isInRange = num >= 0 && num <= 4102444800000;\n\n    return isLengthValid && isInRange;\n}\n","import { getPropertyInPath, PropertiesOrBuilders, Property } from \"@firecms/core\";\nimport {\n    BooleanSwitchWithLabel,\n    ChevronRightIcon,\n    DateTimeField,\n    ExpandablePanel,\n    Select,\n    SelectItem,\n    Table,\n    TableBody,\n    TableCell,\n    TableHeader,\n    TableRow,\n    TextField,\n    Typography\n} from \"@firecms/ui\";\nimport { ImportConfig } from \"../types\";\nimport { getIn, setIn } from \"@firecms/formex\";\n\nexport interface DataPropertyMappingProps {\n    importConfig: ImportConfig;\n    destinationProperties: Record<string, Property>;\n    buildPropertyView?: (props: {\n        isIdColumn: boolean,\n        property: Property | null,\n        propertyKey: string | null,\n        importKey: string\n    }) => React.ReactNode;\n}\n\nexport function DataNewPropertiesMapping({\n                                             importConfig,\n                                             destinationProperties,\n                                             buildPropertyView\n                                         }: DataPropertyMappingProps) {\n\n    const headersMapping = importConfig.headersMapping;\n    const headingsOrder = importConfig.headingsOrder;\n    const idColumn = importConfig.idColumn;\n    const originProperties = importConfig.originProperties;\n\n    return (\n        <>\n\n            <IdSelectField idColumn={idColumn}\n                           headersMapping={headersMapping}\n                           onChange={(value) => importConfig.setIdColumn(value ?? undefined)}/>\n\n            <div className={\"h-4\"}/>\n\n            <Table style={{\n                tableLayout: \"fixed\"\n            }}>\n                <TableHeader>\n                    <TableCell header={true} style={{ width: \"20%\" }}>\n                        Column in file\n                    </TableCell>\n                    <TableCell header={true}>\n                    </TableCell>\n                    <TableCell header={true} style={{ width: \"75%\" }}>\n                        Map to Property\n                    </TableCell>\n                </TableHeader>\n                <TableBody>\n                    {destinationProperties &&\n                        headingsOrder.map((importKey) => {\n                                const mappedKey = headersMapping[importKey];\n                                const propertyKey = headersMapping[importKey];\n                                const property = mappedKey ? getPropertyInPath(destinationProperties, mappedKey) as Property : null;\n\n                                const originProperty = getPropertyInPath(originProperties, importKey) as Property | undefined;\n                                const originDataType = originProperty\n                                    ? (originProperty.dataType === \"array\" && typeof originProperty.of === \"object\"\n                                        ? `${originProperty.dataType} - ${(originProperty.of as Property).dataType}`\n                                        : originProperty.dataType)\n                                    : undefined;\n                                return <TableRow key={importKey} style={{ height: \"90px\" }}>\n                                    <TableCell style={{ width: \"20%\" }}>\n                                        <Typography variant={\"body2\"}>{importKey}</Typography>\n                                        {originProperty && <Typography\n                                            variant={\"caption\"}\n                                            color={\"secondary\"}\n                                        >{originDataType}</Typography>}\n                                    </TableCell>\n                                    <TableCell>\n                                        <ChevronRightIcon/>\n                                    </TableCell>\n                                    <TableCell className={importKey === idColumn ? \"text-center\" : undefined}\n                                               style={{ width: \"75%\" }}>\n                                        {buildPropertyView?.({\n                                            isIdColumn: importKey === idColumn,\n                                            property,\n                                            propertyKey,\n                                            importKey\n                                        })}\n                                    </TableCell>\n                                </TableRow>;\n                            }\n                        )}\n                </TableBody>\n            </Table>\n\n            <ExpandablePanel title=\"Default values\" initiallyExpanded={false} className={\"p-4 mt-4\"}>\n\n                <div className={\"text-sm text-slate-500 dark:text-slate-300 font-medium ml-3.5 mb-1\"}>\n                    You can select a default value for unmapped columns and empty values:\n                </div>\n                <Table style={{\n                    tableLayout: \"fixed\"\n                }}>\n                    <TableHeader>\n                        <TableCell header={true} style={{ width: \"30%\" }}>\n                            Property\n                        </TableCell>\n                        <TableCell header={true}>\n                        </TableCell>\n                        <TableCell header={true} style={{ width: \"65%\" }}>\n                            Default value\n                        </TableCell>\n                    </TableHeader>\n                    <TableBody>\n                        {destinationProperties &&\n                            getAllPropertyKeys(destinationProperties).map((key) => {\n                                    const property = getPropertyInPath(destinationProperties, key);\n                                    if (typeof property !== \"object\" || property === null) {\n                                        return null;\n                                    }\n                                    if (![\"number\", \"string\", \"boolean\", \"map\"].includes(property.dataType)) {\n                                        return null;\n                                    }\n                                    return <TableRow key={key} style={{ height: \"70px\" }}>\n                                        <TableCell style={{ width: \"20%\" }}>\n                                            <Typography variant={\"body2\"}>{key}</Typography>\n                                        </TableCell>\n                                        <TableCell>\n                                            <ChevronRightIcon/>\n                                        </TableCell>\n                                        <TableCell className={key === idColumn ? \"text-center\" : undefined}\n                                                   style={{ width: \"75%\" }}>\n                                            <DefaultValuesField property={property}\n                                                                defaultValue={getIn(importConfig.defaultValues, key)}\n                                                                onValueChange={(value) => {\n                                                                    const newValues = setIn(importConfig.defaultValues, key, value);\n                                                                    importConfig.setDefaultValues(newValues);\n                                                                }}/>\n                                        </TableCell>\n                                    </TableRow>;\n                                }\n                            )}\n                    </TableBody>\n                </Table>\n            </ExpandablePanel>\n        </>\n    );\n}\n\nfunction getAllPropertyKeys(properties: PropertiesOrBuilders, currentKey?: string): string[] {\n    return Object.entries(properties).reduce((acc, [key, property]) => {\n        const accumulatedKey = currentKey ? `${currentKey}.${key}` : key;\n        if (typeof property !== \"function\" && property.dataType === \"map\" && property.properties) {\n            const childProperties = getAllPropertyKeys(property.properties, accumulatedKey);\n            return [...acc, ...childProperties];\n        }\n        return [...acc, accumulatedKey];\n    }, [] as string[]);\n}\n\nfunction IdSelectField({\n                           idColumn,\n                           headersMapping,\n                           onChange\n                       }: {\n    idColumn?: string,\n    headersMapping: Record<string, string | null>;\n    onChange: (value: string | null) => void\n}) {\n    return <div>\n        <Select\n            size={\"small\"}\n            value={idColumn ?? \"\"}\n            onChange={(event) => {\n                const value = event.target.value;\n                onChange(value === \"__none__\" ? null : value);\n            }}\n            placeholder={\"Autogenerate ID\"}\n            renderValue={(value) => {\n                return <Typography variant={\"body2\"}>\n                    {value !== \"__none__\" ? value : \"Autogenerate ID\"}\n                </Typography>;\n            }}\n            label={\"Column that will be used as ID for each document\"}>\n            <SelectItem value={\"__none__\"}>Autogenerate ID</SelectItem>\n            {Object.entries(headersMapping).map(([key, value]) => {\n                return <SelectItem key={key} value={key}>{key}</SelectItem>;\n            })}\n        </Select>\n    </div>;\n}\n\nfunction DefaultValuesField({\n                                property,\n                                onValueChange,\n                                defaultValue\n                            }: { property: Property, onValueChange: (value: any) => void, defaultValue?: any }) {\n    if (property.dataType === \"string\") {\n        return <TextField size={\"small\"}\n                          placeholder={\"Default value\"}\n                          value={defaultValue ?? \"\"}\n                          onChange={(event) => onValueChange(event.target.value)}/>;\n    } else if (property.dataType === \"number\") {\n        return <TextField size={\"small\"}\n                          type={\"number\"}\n                          value={defaultValue ?? \"\"}\n                          placeholder={\"Default value\"}\n                          onChange={(event) => onValueChange(event.target.value)}/>;\n    } else if (property.dataType === \"boolean\") {\n        return <BooleanSwitchWithLabel\n            value={defaultValue ?? null}\n            allowIndeterminate={true}\n            size={\"small\"}\n            onValueChange={(v: boolean | null) => onValueChange(v === null ? undefined : v)}\n            label={defaultValue === undefined\n                ? \"Do not set value\"\n                : defaultValue === true\n                    ? \"Set value to true\"\n                    : \"Set value to false\"}\n        />\n    } else if (property.dataType === \"date\") {\n        return <DateTimeField\n            mode={property.mode ?? \"date\"}\n            size={\"small\"}\n            value={defaultValue ?? undefined}\n            onChange={(dateValue: Date | undefined) => {\n                onValueChange(dateValue);\n            }}\n            clearable={true}\n        />\n    }\n\n    return null;\n}\n","import { FileUpload, UploadIcon } from \"@firecms/ui\";\nimport { convertFileToJson } from \"../utils/file_to_json\";\nimport { useSnackbarController } from \"@firecms/core\";\n\nexport function ImportFileUpload({ onDataAdded }: {\n    onDataAdded: (data: object[], propertiesOrder?: string[]) => void\n}) {\n    const snackbarController = useSnackbarController();\n    return <FileUpload\n        accept={{\n            \"text/*\": [\".csv\", \".xls\", \".xlsx\"],\n            \"application/vnd.ms-excel\": [\".xls\", \".xlsx\"],\n            \"application/msexcel\": [\".xls\", \".xlsx\"],\n            \"application/vnd.ms-office\": [\".xls\", \".xlsx\"],\n            \"application/xls\": [\".xls\", \".xlsx\"],\n            \"application/x-xls\": [\".xls\", \".xlsx\"],\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\": [\".xls\", \".xlsx\"],\n            \"application/json\": [\".json\"],\n        }}\n        preventDropOnDocument={true}\n        size={\"small\"}\n        maxFiles={1}\n        uploadDescription={<><UploadIcon/>Drag and drop a file here or click to upload</>}\n        onFilesAdded={(files: File[]) => {\n            if (files.length > 0) {\n                convertFileToJson(files[0])\n                    .then(({\n                               data,\n                               propertiesOrder\n                           }) => {\n                        onDataAdded(data, propertiesOrder);\n                    })\n                    .catch((error) => {\n                        console.error(\"Error parsing file\", error);\n                        snackbarController.open({\n                            type: \"error\",\n                            message: error.message\n                        });\n                    });\n            }\n        }}/>\n}\n","import React from \"react\";\nimport {\n    ErrorBoundary,\n    getFieldConfig,\n    Property,\n    PropertyConfigBadge,\n    useCustomizationController\n} from \"@firecms/core\";\nimport { EditIcon, IconButton, TextField, } from \"@firecms/ui\";\n\nexport function ImportNewPropertyFieldPreview({\n                                                  propertyKey,\n                                                  property,\n                                                  onEditClick,\n                                                  includeName = true,\n                                                  onPropertyNameChanged,\n                                                  propertyTypeView\n                                              }: {\n    propertyKey: string | null,\n    property: Property | null\n    includeName?: boolean,\n    onEditClick?: () => void,\n    onPropertyNameChanged?: (propertyKey: string, value: string) => void,\n    propertyTypeView?: React.ReactNode\n}) {\n\n    const { propertyConfigs } = useCustomizationController();\n    const widget = property ? getFieldConfig(property, propertyConfigs) : null;\n\n    return <ErrorBoundary>\n        <div\n            className=\"flex flex-row w-full items-center\">\n\n            <div className={\"mx-4\"}>\n                {propertyTypeView ?? <PropertyConfigBadge propertyConfig={widget ?? undefined}/>}\n            </div>\n\n            <div className=\"w-full flex flex-col grow\">\n\n                <div className={\"flex flex-row items-center gap-2\"}>\n                    {includeName &&\n                        <TextField\n                            size={\"small\"}\n                            className={\"text-base grow\"}\n                            value={property?.name ?? \"\"}\n                            onChange={(e) => {\n                                if (onPropertyNameChanged && propertyKey)\n                                    onPropertyNameChanged(propertyKey, e.target.value);\n                            }}/>}\n\n                    <IconButton onClick={onEditClick} size={\"small\"}>\n                        <EditIcon size={\"small\"}/>\n                    </IconButton>\n                </div>\n\n            </div>\n\n        </div>\n    </ErrorBoundary>\n}\n","import { DataSource, Entity, EntityCollection, useDataSource } from \"@firecms/core\";\nimport { Button, CenteredView, CircularProgress, Typography, } from \"@firecms/ui\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { ImportConfig } from \"../types\";\n\nexport function ImportSaveInProgress<C extends EntityCollection>\n({\n     path,\n     importConfig,\n     collection,\n     onImportSuccess\n }:\n     {\n         path: string,\n         importConfig: ImportConfig,\n         collection: C,\n         onImportSuccess: (collection: C) => void\n     }) {\n\n    const [errorSaving, setErrorSaving] = useState<Error | undefined>(undefined);\n    const dataSource = useDataSource();\n\n    const savingRef = useRef<boolean>(false);\n\n    const [processedEntities, setProcessedEntities] = useState<number>(0);\n\n    function save() {\n\n        if (savingRef.current)\n            return;\n\n        savingRef.current = true;\n\n        saveDataBatch(\n            dataSource,\n            collection,\n            path,\n            importConfig.entities,\n            0,\n            25,\n            setProcessedEntities\n        ).then(() => {\n            onImportSuccess(collection);\n            savingRef.current = false;\n        }).catch((e) => {\n            setErrorSaving(e);\n            savingRef.current = false;\n        });\n    }\n\n    useEffect(() => {\n        save();\n    }, []);\n\n    if (errorSaving) {\n        return (\n            <CenteredView className={\"flex flex-col gap-4 items-center\"}>\n                <Typography variant={\"h6\"}>\n                    Error saving data\n                </Typography>\n\n                <Typography variant={\"body2\"} color={\"error\"}>\n                    {errorSaving.message}\n                </Typography>\n                <Button\n                    onClick={save}\n                    variant={\"outlined\"}>\n                    Retry\n                </Button>\n            </CenteredView>\n        );\n    }\n\n    return (\n        <CenteredView className={\"flex flex-col gap-4 items-center\"}>\n            <CircularProgress/>\n\n            <Typography variant={\"h6\"}>\n                Saving data\n            </Typography>\n\n            <Typography variant={\"body2\"}>\n                {processedEntities}/{importConfig.entities.length} entities saved\n            </Typography>\n\n            <Typography variant={\"caption\"}>\n                Do not close this tab or the import will be interrupted.\n            </Typography>\n\n        </CenteredView>\n    );\n\n}\n\nfunction saveDataBatch(dataSource: DataSource,\n                       collection: EntityCollection,\n                       path: string,\n                       data: Partial<Entity<any>>[],\n                       offset = 0,\n                       batchSize = 25,\n                       onProgressUpdate: (progress: number) => void): Promise<void> {\n\n    console.debug(\"Saving imported data\", offset, batchSize);\n\n    const batch = data.slice(offset, offset + batchSize);\n    return Promise.all(batch.map(d =>\n        dataSource.saveEntity({\n            path,\n            values: d.values,\n            entityId: d.id,\n            collection,\n            status: \"new\"\n        })))\n        .then(() => {\n            if (offset + batchSize < data.length) {\n                onProgressUpdate(offset + batchSize);\n                return saveDataBatch(dataSource, collection, path, data, offset + batchSize, batchSize, onProgressUpdate);\n            }\n            onProgressUpdate(data.length);\n            return Promise.resolve();\n        });\n}\n","import React, { useCallback, useEffect } from \"react\";\nimport {\n    CollectionActionsProps,\n    EntityCollectionTable,\n    getFieldConfig,\n    getPropertiesWithPropertiesOrder,\n    getPropertyInPath,\n    PropertiesOrBuilders,\n    Property,\n    PropertyConfigBadge,\n    resolveCollection,\n    ResolvedProperties,\n    slugify,\n    useCustomizationController,\n    User,\n    useSelectionController,\n    useSnackbarController\n} from \"@firecms/core\";\nimport {\n    Button,\n    cn,\n    defaultBorderMixin,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    FileUploadIcon,\n    IconButton,\n    Select,\n    SelectItem,\n    Tooltip,\n    Typography,\n} from \"@firecms/ui\";\nimport { buildEntityPropertiesFromData } from \"@firecms/schema_inference\";\nimport { useImportConfig } from \"../hooks\";\nimport { convertDataToEntity, getInferenceType } from \"../utils\";\nimport { DataNewPropertiesMapping, ImportFileUpload, ImportSaveInProgress } from \"../components\";\nimport { ImportConfig } from \"../types\";\n\ntype ImportState = \"initial\" | \"mapping\" | \"preview\" | \"import_data_saving\";\n\nexport function ImportCollectionAction<M extends Record<string, any>, UserType extends User>({\n                                                                                                 collection,\n                                                                                                 path,\n                                                                                                 collectionEntitiesCount,\n                                                                                                 onAnalyticsEvent\n                                                                                             }: CollectionActionsProps<M, UserType> & {\n                                                                                                 onAnalyticsEvent?: (event: string, params?: any) => void;\n                                                                                             }\n) {\n\n    const customizationController = useCustomizationController();\n\n    const snackbarController = useSnackbarController();\n\n    const [open, setOpen] = React.useState(false);\n\n    const [step, setStep] = React.useState<ImportState>(\"initial\");\n\n    const importConfig = useImportConfig();\n\n    const handleClickOpen = useCallback(() => {\n        setOpen(true);\n        onAnalyticsEvent?.(\"import_open\");\n        setStep(\"initial\");\n    }, [onAnalyticsEvent]);\n\n    const handleClose = useCallback(() => {\n        setOpen(false);\n    }, [setOpen]);\n\n    const onMappingComplete = useCallback(() => {\n        onAnalyticsEvent?.(\"import_mapping_complete\");\n        setStep(\"preview\");\n    }, [onAnalyticsEvent]);\n\n    const onPreviewComplete = useCallback(() => {\n        onAnalyticsEvent?.(\"import_data_save\");\n        setStep(\"import_data_saving\");\n    }, [onAnalyticsEvent]);\n\n    const onDataAdded = async (data: object[]) => {\n        importConfig.setImportData(data);\n\n        if (data.length > 0) {\n            const originProperties = await buildEntityPropertiesFromData(data, getInferenceType);\n            importConfig.setOriginProperties(originProperties);\n\n            const headersMapping = buildHeadersMappingFromData(data, collection?.properties);\n            importConfig.setHeadersMapping(headersMapping);\n            const firstKey = Object.keys(headersMapping)?.[0];\n            if (firstKey?.includes(\"id\") || firstKey?.includes(\"key\")) {\n                importConfig.setIdColumn(firstKey);\n            }\n        }\n        setTimeout(() => {\n            onAnalyticsEvent?.(\"import_data_added\");\n            setStep(\"mapping\");\n        }, 100);\n        // setStep(\"mapping\");\n    };\n\n    const resolvedCollection = resolveCollection({\n        collection,\n        path,\n        fields: customizationController.propertyConfigs\n    });\n\n    const properties = getPropertiesWithPropertiesOrder<M>(resolvedCollection.properties, resolvedCollection.propertiesOrder as Extract<keyof M, string>[]) as ResolvedProperties<M>;\n\n    const propertiesAndLevel = Object.entries(properties)\n        .flatMap(([key, property]) => getPropertiesAndLevel(key, property, 0));\n    const propertiesOrder = (resolvedCollection.propertiesOrder ?? Object.keys(resolvedCollection.properties)) as Extract<keyof M, string>[];\n    if (collection.collectionGroup) {\n        return null;\n    }\n\n    return <>\n\n        <Tooltip title={\"Import\"}>\n            <IconButton color={\"primary\"} onClick={handleClickOpen}>\n                <FileUploadIcon/>\n            </IconButton>\n        </Tooltip>\n\n        <Dialog open={open}\n                fullWidth={step === \"preview\"}\n                fullHeight={step === \"preview\"}\n                maxWidth={step === \"initial\" ? \"lg\" : \"7xl\"}>\n            <DialogContent className={\"flex flex-col gap-4 my-4\"} fullHeight={step === \"preview\"}>\n\n                {step === \"initial\" && <>\n                    <Typography variant={\"h6\"}>Import data</Typography>\n                    <Typography variant={\"body2\"}>Upload a CSV, Excel or JSON file and map it to your existing\n                        schema</Typography>\n                    <ImportFileUpload onDataAdded={onDataAdded}/>\n                </>}\n\n                {step === \"mapping\" && <>\n                    <Typography variant={\"h6\"} className={\"ml-3.5\"}>Map fields</Typography>\n                    <DataNewPropertiesMapping importConfig={importConfig}\n                                              destinationProperties={properties}\n                                              buildPropertyView={({\n                                                                      isIdColumn,\n                                                                      property,\n                                                                      propertyKey,\n                                                                      importKey,\n                                                                  }) => {\n                                                  return <PropertyTreeSelect\n                                                      selectedPropertyKey={propertyKey ?? \"\"}\n                                                      properties={properties}\n                                                      propertiesAndLevel={propertiesAndLevel}\n                                                      isIdColumn={isIdColumn}\n                                                      onIdSelected={() => {\n                                                          importConfig.setIdColumn(importKey);\n                                                      }}\n                                                      onPropertySelected={(newPropertyKey) => {\n\n                                                          onAnalyticsEvent?.(\"import_mapping_field_updated\");\n                                                          const newHeadersMapping: Record<string, string | null> = Object.entries(importConfig.headersMapping)\n                                                              .map(([currentImportKey, currentPropertyKey]) => {\n                                                                  if (currentPropertyKey === newPropertyKey) {\n                                                                      return { [currentImportKey]: null };\n                                                                  }\n                                                                  if (currentImportKey === importKey) {\n                                                                      return { [currentImportKey]: newPropertyKey };\n                                                                  }\n                                                                  return { [currentImportKey]: currentPropertyKey };\n                                                              })\n                                                              .reduce((acc, curr) => ({ ...acc, ...curr }), {});\n                                                          importConfig.setHeadersMapping(newHeadersMapping as Record<string, string>);\n\n                                                          if (newPropertyKey === importConfig.idColumn) {\n                                                              importConfig.setIdColumn(undefined);\n                                                          }\n\n                                                      }}\n                                                  />;\n                                              }}/>\n                </>}\n\n                {step === \"preview\" && <ImportDataPreview importConfig={importConfig}\n                                                          properties={properties}\n                                                          propertiesOrder={propertiesOrder}/>}\n\n                {step === \"import_data_saving\" && importConfig &&\n                    <ImportSaveInProgress importConfig={importConfig}\n                                          collection={collection}\n                                          path={path}\n                                          onImportSuccess={(importedCollection) => {\n                                              handleClose();\n                                              snackbarController.open({\n                                                  type: \"info\",\n                                                  message: \"Data imported successfully\"\n                                              });\n                                          }}\n                    />}\n\n            </DialogContent>\n            <DialogActions>\n\n                {step === \"mapping\" && <Button onClick={() => setStep(\"initial\")}\n                                               variant={\"text\"}>\n                    Back\n                </Button>}\n\n                {step === \"preview\" && <Button onClick={() => setStep(\"mapping\")}\n                                               variant={\"text\"}>\n                    Back\n                </Button>}\n\n                <Button onClick={handleClose}\n                        variant={\"text\"}>\n                    Cancel\n                </Button>\n\n                {step === \"mapping\" && <Button variant=\"filled\"\n                                               onClick={onMappingComplete}>\n                    Next\n                </Button>}\n\n                {step === \"preview\" && <Button variant=\"filled\"\n                                               onClick={onPreviewComplete}>\n                    Save data\n                </Button>}\n\n            </DialogActions>\n        </Dialog>\n\n    </>;\n}\n\nconst internalIDValue = \"__internal_id__\";\n\nfunction PropertyTreeSelect({\n                                selectedPropertyKey,\n                                properties,\n                                onPropertySelected,\n                                onIdSelected,\n                                propertiesAndLevel,\n                                isIdColumn\n                            }: {\n    selectedPropertyKey: string | null;\n    properties: Record<string, Property>;\n    onPropertySelected: (propertyKey: string | null) => void;\n    onIdSelected: () => void;\n    propertiesAndLevel: PropertyAndLevel[];\n    isIdColumn?: boolean;\n}) {\n\n    const selectedProperty = selectedPropertyKey ? getPropertyInPath(properties, selectedPropertyKey) : null;\n\n    const renderValue = useCallback((selectedPropertyKey: string) => {\n\n        if (selectedPropertyKey === internalIDValue) {\n            return <Typography variant={\"body2\"} className={\"p-4\"}>Use this column as ID</Typography>;\n        }\n\n        if (!selectedPropertyKey || !selectedProperty) {\n            return <Typography variant={\"body2\"} color=\"disabled\" className={\"p-4\"}>Do not import this\n                property</Typography>;\n        }\n\n        return <PropertySelectEntry propertyKey={selectedPropertyKey}\n                                    property={selectedProperty as Property}/>;\n    }, [selectedProperty]);\n\n    const onSelectValueChange = (value: string) => {\n        if (value === internalIDValue) {\n            onIdSelected();\n            onPropertySelected(null);\n        } else if (value === \"__do_not_import\") {\n            onPropertySelected(null);\n        } else {\n            onPropertySelected(value);\n        }\n    };\n\n    return <Select value={isIdColumn ? internalIDValue : (selectedPropertyKey ?? undefined)}\n                   onValueChange={onSelectValueChange}\n                   renderValue={renderValue}>\n\n        <SelectItem value={\"__do_not_import\"}>\n            <Typography variant={\"body2\"} color={\"disabled\"} className={\"p-4\"}>Do not import this property</Typography>\n        </SelectItem>\n\n        <SelectItem value={internalIDValue}>\n            <Typography variant={\"body2\"} className={\"p-4\"}>Use this column as ID</Typography>\n        </SelectItem>\n\n        {propertiesAndLevel.map(({\n                                     property,\n                                     level,\n                                     propertyKey\n                                 }) => {\n            return <SelectItem value={propertyKey}\n                               key={propertyKey}\n                               disabled={property.dataType === \"map\"}>\n                <PropertySelectEntry propertyKey={propertyKey}\n                                     property={property}\n                                     level={level}/>\n            </SelectItem>;\n        })}\n\n    </Select>;\n}\n\ntype PropertyAndLevel = {\n    property: Property,\n    level: number,\n    propertyKey: string\n};\n\nfunction getPropertiesAndLevel(key: string, property: Property, level: number): PropertyAndLevel[] {\n    const properties: PropertyAndLevel[] = [];\n    properties.push({\n        property,\n        level,\n        propertyKey: key\n    });\n    if (property.dataType === \"map\" && property.properties) {\n        Object.entries(property.properties).forEach(([childKey, value]) => {\n            properties.push(...getPropertiesAndLevel(`${key}.${childKey}`, value as Property, level + 1));\n        });\n    }\n    return properties;\n}\n\nexport function PropertySelectEntry({\n                                        propertyKey,\n                                        property,\n                                        level = 0\n                                    }: {\n    propertyKey: string;\n    property: Property;\n    level?: number;\n}) {\n\n    const { propertyConfigs } = useCustomizationController();\n    const widget = getFieldConfig(property, propertyConfigs);\n\n    return <div\n        className=\"flex flex-row w-full text-start items-center h-full\">\n\n        {new Array(level).fill(0).map((_, index) =>\n            <div className={cn(defaultBorderMixin, \"ml-8 border-l h-12\")} key={index}/>)}\n\n        <div className={\"m-4\"}>\n            <Tooltip title={widget?.name}>\n                <PropertyConfigBadge propertyConfig={widget}/>\n            </Tooltip>\n        </div>\n\n        <div className={\"flex flex-col flex-grow p-2 pl-2\"}>\n            <Typography variant=\"body1\"\n                        component=\"span\"\n                        className=\"flex-grow pr-2\">\n                {property.name\n                    ? property.name\n                    : \"\\u00a0\"\n                }\n            </Typography>\n\n            <Typography className=\" pr-2\"\n                        variant={\"body2\"}\n                        component=\"span\"\n                        color=\"secondary\">\n                {propertyKey}\n            </Typography>\n        </div>\n\n    </div>;\n\n}\n\nexport function ImportDataPreview<M extends Record<string, any>>({\n                                                                     importConfig,\n                                                                     properties,\n                                                                     propertiesOrder\n                                                                 }: {\n    importConfig: ImportConfig,\n    properties: ResolvedProperties<M>,\n    propertiesOrder: Extract<keyof M, string>[],\n}) {\n\n    useEffect(() => {\n        const mappedData = importConfig.importData.map(d => convertDataToEntity(d, importConfig.idColumn, importConfig.headersMapping, properties, \"TEMP_PATH\", importConfig.defaultValues));\n        console.log(\"Mapped data\", {\n            importConfig,\n            mappedData\n        })\n        importConfig.setEntities(mappedData);\n    }, []);\n\n    const selectionController = useSelectionController();\n\n    return <EntityCollectionTable\n        title={<div>\n            <Typography variant={\"subtitle2\"}>Imported data preview</Typography>\n            <Typography variant={\"caption\"}>Entities with the same id will be overwritten</Typography>\n        </div>}\n        tableController={{\n            data: importConfig.entities,\n            dataLoading: false,\n            noMoreToLoad: false\n        }}\n        endAdornment={<div className={\"h-12\"}/>}\n        filterable={false}\n        sortable={false}\n        selectionController={selectionController}\n        properties={properties}/>\n\n}\n\nfunction buildHeadersMappingFromData(objArr: object[], properties?: PropertiesOrBuilders<any>) {\n    const headersMapping: Record<string, string> = {};\n    objArr.filter(Boolean).forEach((obj) => {\n        Object.keys(obj).forEach((key) => {\n            // @ts-ignore\n            const child = obj[key];\n            if (typeof child === \"object\" && !Array.isArray(child)) {\n                const childProperty = properties?.[key];\n                const childProperties = childProperty && \"properties\" in childProperty ? childProperty.properties : undefined;\n                const childHeadersMapping = buildHeadersMappingFromData([child], childProperties);\n                Object.entries(childHeadersMapping).forEach(([subKey, mapping]) => {\n                    headersMapping[`${key}.${subKey}`] = `${key}.${mapping}`;\n                });\n            }\n\n            if (!properties) {\n                headersMapping[key] = key;\n            } else if (key in properties) {\n                headersMapping[key] = key;\n            } else {\n                const slug = slugify(key);\n                if (slug in properties) {\n                    headersMapping[key] = slug;\n                } else {\n                    headersMapping[key] = key;\n                }\n            }\n\n        });\n    });\n    return headersMapping;\n}\n","import {\n    ArrayValuesCount,\n    Entity,\n    EntityReference,\n    getArrayValuesCount,\n    getValueInPath,\n    ResolvedEntityCollection,\n    ResolvedProperties,\n    ResolvedProperty\n} from \"@firecms/core\";\n\ninterface Header {\n    key: string;\n    label: string;\n}\n\nexport function downloadExport<M extends Record<string, any>>(data: Entity<M>[],\n                                                              additionalData: Record<string, any>[] | undefined,\n                                                              collection: ResolvedEntityCollection<M>,\n                                                              flattenArrays: boolean,\n                                                              additionalHeaders: string[] | undefined,\n                                                              exportType: \"csv\" | \"json\",\n                                                              dateExportType: \"timestamp\" | \"string\"\n) {\n\n    console.debug(\"Downloading export\", { dataLength: data.length, collection, exportType, dateExportType });\n    const properties = collection.properties;\n\n    if (exportType === \"csv\") {\n        const arrayValuesCount = flattenArrays ? getArrayValuesCount(data.map(d => d.values)) : {};\n        const headers = getExportHeaders(properties, additionalHeaders, arrayValuesCount);\n        const exportableData = getCSVExportableData(data, additionalData, properties, headers, dateExportType);\n        const headersData = entryToCSVRow(headers.map(h => h.label));\n        const csvData = exportableData.map(entry => entryToCSVRow(entry));\n        downloadBlob([headersData, ...csvData], `${collection.name}.csv`, \"text/csv\");\n    } else {\n        const exportableData = getJsonExportableData(data, additionalData, properties, dateExportType);\n        const json = JSON.stringify(exportableData, null, 2);\n        downloadBlob([json], `${collection.name}.json`, \"application/json\");\n    }\n}\n\nexport function getCSVExportableData(data: Entity<any>[],\n                                     additionalData: Record<string, any>[] | undefined,\n                                     properties: ResolvedProperties,\n                                     headers: Header[],\n                                     dateExportType: \"timestamp\" | \"string\"\n) {\n\n    const mergedData: any[] = data.map(e => ({\n        id: e.id,\n        ...processValuesForExport(e.values, properties, \"csv\", dateExportType)\n    }));\n\n    if (additionalData) {\n        additionalData.forEach((additional, index) => {\n            mergedData[index] = { ...mergedData[index], ...additional };\n        });\n    }\n\n    return mergedData && mergedData.map((entry) => {\n        return headers.map((header) => getValueInPath(entry, header.key));\n    });\n}\n\nexport function getJsonExportableData(data: Entity<any>[],\n                                      additionalData: Record<string, any>[] | undefined,\n                                      properties: ResolvedProperties,\n                                      dateExportType: \"timestamp\" | \"string\"\n) {\n\n    const mergedData: any[] = data.map(e => ({\n        id: e.id,\n        ...processValuesForExport(e.values, properties, \"json\", dateExportType)\n    }));\n\n    if (additionalData) {\n        additionalData.forEach((additional, index) => {\n            mergedData[index] = { ...mergedData[index], ...additional };\n        });\n    }\n\n    return mergedData;\n}\n\nfunction getExportHeaders<M extends Record<string, any>>(properties: ResolvedProperties<M>,\n                                                         additionalHeaders: string[] | undefined,\n                                                         arrayValuesCount?: ArrayValuesCount): Header[] {\n\n    const headers: Header[] = [\n        { label: \"id\", key: \"id\" },\n        ...Object.entries(properties)\n            .flatMap(([childKey, property]) => {\n                if (arrayValuesCount && arrayValuesCount[childKey] > 1) {\n                    return Array.from({ length: arrayValuesCount[childKey] },\n                        (_, i) => getHeaders(property as ResolvedProperty, `${childKey}[${i}]`, \"\"))\n                        .flat();\n                } else {\n                    return getHeaders(property as ResolvedProperty, childKey, \"\");\n                }\n            })\n    ];\n\n    if (additionalHeaders) {\n        headers.push(...additionalHeaders.map(h => ({ label: h, key: h })));\n    }\n\n    return headers;\n}\n\n/**\n * Get headers for property. There could be more than one header per property\n * @param property\n * @param propertyKey\n * @param prefix\n */\nfunction getHeaders(property: ResolvedProperty, propertyKey: string, prefix = \"\"): Header[] {\n    const currentKey = prefix ? `${prefix}.${propertyKey}` : propertyKey;\n    if (property.dataType === \"map\" && property.properties) {\n        return Object.entries(property.properties)\n            .map(([childKey, p]) => getHeaders(p, childKey, currentKey))\n            .flat();\n    } else {\n        return [{ label: currentKey, key: currentKey }];\n    }\n}\n\nfunction processValueForExport(inputValue: any,\n                               property: ResolvedProperty,\n                               exportType: \"csv\" | \"json\",\n                               dateExportType: \"timestamp\" | \"string\"\n): any {\n\n    let value;\n    if (property.dataType === \"map\" && property.properties) {\n        value = processValuesForExport(inputValue, property.properties as ResolvedProperties, exportType, dateExportType);\n    } else if (property.dataType === \"array\") {\n        if (property.of && Array.isArray(inputValue)) {\n            if (Array.isArray(property.of)) {\n                value = property.of.map((p, i) => processValueForExport(inputValue[i], p, exportType, dateExportType));\n            } else if (property.of.dataType === \"map\") {\n                value = exportType === \"csv\"\n                    ? inputValue.map((e) => JSON.stringify(e))\n                    : inputValue.map((e) => processValueForExport(e, property.of as ResolvedProperty, exportType, dateExportType));\n                ;\n            } else {\n                value = inputValue.map((e) => processValueForExport(e, property.of as ResolvedProperty, exportType, dateExportType));\n            }\n        } else {\n            value = inputValue;\n        }\n    } else if (property.dataType === \"reference\" && inputValue && inputValue.isEntityReference && inputValue.isEntityReference()) {\n        const ref = inputValue ? inputValue as EntityReference : undefined;\n        value = ref ? ref.pathWithId : null;\n    } else if (property.dataType === \"date\" && inputValue instanceof Date) {\n        value = inputValue ? (dateExportType === \"timestamp\" ? inputValue.getTime() : inputValue.toISOString()) : null;\n    } else {\n        value = inputValue;\n    }\n\n    return value;\n}\n\nfunction processValuesForExport<M extends Record<string, any>>\n(inputValues: Record<keyof M, any>,\n properties: ResolvedProperties<M>,\n exportType: \"csv\" | \"json\",\n dateExportType: \"timestamp\" | \"string\"\n): Record<keyof M, any> {\n    const updatedValues = Object.entries(properties)\n        .map(([key, property]) => {\n            const inputValue = inputValues && (inputValues)[key];\n            const updatedValue = processValueForExport(inputValue, property as ResolvedProperty, exportType, dateExportType);\n            if (updatedValue === undefined) return {};\n            return ({ [key]: updatedValue });\n        })\n        .reduce((a, b) => ({ ...a, ...b }), {}) as Record<keyof M, any>;\n    return { ...inputValues, ...updatedValues };\n}\n\nfunction entryToCSVRow(entry: any[]) {\n    return entry\n        .map((v: any) => {\n            if (v === null || v === undefined) return \"\";\n            if (Array.isArray(v))\n                return \"\\\"\" + JSON.stringify(v).replaceAll(\"\\\"\", \"\\\\\\\"\") + \"\\\"\";\n            const s = String(v);\n            return \"\\\"\" + s.replaceAll(\"\\\"\", \"\\\"\\\"\") + \"\\\"\";\n        })\n        .join(\",\") + \"\\r\\n\";\n}\n\nexport function downloadBlob(content: BlobPart[], filename: string, contentType: string) {\n    const blob = new Blob(content, { type: contentType });\n    const url = URL.createObjectURL(blob);\n    const pom = document.createElement(\"a\");\n    pom.href = url;\n    pom.setAttribute(\"download\", filename);\n    pom.click();\n}\n","import React, { useCallback } from \"react\";\n\nimport {\n    CollectionActionsProps,\n    Entity,\n    EntityCollection,\n    ExportConfig,\n    resolveCollection,\n    ResolvedEntityCollection,\n    useCustomizationController,\n    useDataSource,\n    useFireCMSContext,\n    useNavigationController,\n    User\n} from \"@firecms/core\";\nimport {\n    Alert,\n    BooleanSwitchWithLabel,\n    Button,\n    CircularProgress,\n    cn,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    focusedMixin,\n    GetAppIcon,\n    IconButton,\n    Tooltip,\n    Typography,\n} from \"@firecms/ui\";\nimport { downloadExport } from \"./export\";\n\nconst DOCS_LIMIT = 500;\n\nexport function ExportCollectionAction<M extends Record<string, any>, UserType extends User>({\n                                                                                                 collection: inputCollection,\n                                                                                                 path: inputPath,\n                                                                                                 collectionEntitiesCount,\n                                                                                                 onAnalyticsEvent,\n                                                                                                 exportAllowed,\n                                                                                                 notAllowedView\n                                                                                             }: CollectionActionsProps<M, UserType, EntityCollection<M, any>> & {\n    exportAllowed?: (props: { collectionEntitiesCount: number, path: string, collection: EntityCollection }) => boolean;\n    notAllowedView?: React.ReactNode;\n    onAnalyticsEvent?: (event: string, params?: any) => void;\n}) {\n\n    const customizationController = useCustomizationController();\n\n    const exportConfig = typeof inputCollection.exportable === \"object\" ? inputCollection.exportable : undefined;\n\n    const dateRef = React.useRef<Date>(new Date());\n    const [flattenArrays, setFlattenArrays] = React.useState<boolean>(true);\n    const [exportType, setExportType] = React.useState<\"csv\" | \"json\">(\"csv\");\n    const [dateExportType, setDateExportType] = React.useState<\"timestamp\" | \"string\">(\"string\");\n\n    const context = useFireCMSContext<UserType>();\n    const dataSource = useDataSource();\n    const navigationController = useNavigationController();\n\n    const path = navigationController.resolveAliasesFrom(inputPath);\n\n    const canExport = !exportAllowed || exportAllowed({\n        collectionEntitiesCount,\n        path,\n        collection: inputCollection\n    });\n\n    const collection: ResolvedEntityCollection<M> = React.useMemo(() => resolveCollection({\n        collection: inputCollection,\n        path,\n        fields: customizationController.propertyConfigs\n    }), [inputCollection, path]);\n\n    const [dataLoading, setDataLoading] = React.useState<boolean>(false);\n    const [dataLoadingError, setDataLoadingError] = React.useState<Error | undefined>();\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = useCallback(() => {\n        setOpen(true);\n    }, [setOpen]);\n\n    const handleClose = useCallback(() => {\n        setOpen(false);\n    }, [setOpen]);\n\n    const fetchAdditionalFields = useCallback(async (entities: Entity<M>[]) => {\n\n        const additionalExportFields = exportConfig?.additionalFields;\n        const additionalFields = collection.additionalFields;\n\n        const resolvedExportColumnsValues: Record<string, any>[] = additionalExportFields\n            ? await Promise.all(entities.map(async (entity) => {\n                return (await Promise.all(additionalExportFields.map(async (column) => {\n                    return {\n                        [column.key]: await column.builder({\n                            entity,\n                            context\n                        })\n                    };\n                }))).reduce((a, b) => ({ ...a, ...b }), {});\n            }))\n            : [];\n\n        const resolvedColumnsValues: Record<string, any>[] = additionalFields\n            ? await Promise.all(entities.map(async (entity) => {\n                return (await Promise.all(additionalFields\n                    .map(async (field) => {\n                        if (!field.value)\n                            return {};\n                        return {\n                            [field.key]: await field.value({\n                                entity,\n                                context\n                            })\n                        };\n                    }))).reduce((a, b) => ({ ...a, ...b }), {});\n            }))\n            : [];\n        return [...resolvedExportColumnsValues, ...resolvedColumnsValues];\n    }, [exportConfig?.additionalFields]);\n\n    const doDownload = useCallback(async (collection: ResolvedEntityCollection<M>,\n                                          exportConfig: ExportConfig<any> | undefined) => {\n\n        onAnalyticsEvent?.(\"export_collection\", {\n            collection: collection.path\n        });\n        setDataLoading(true);\n        dataSource.fetchCollection<M>({\n            path,\n            collection\n        })\n            .then(async (data) => {\n                setDataLoadingError(undefined);\n                const additionalData = await fetchAdditionalFields(data);\n                const additionalHeaders = [\n                    ...exportConfig?.additionalFields?.map(column => column.key) ?? [],\n                    ...collection.additionalFields?.map(field => field.key) ?? []\n                ];\n                downloadExport(data, additionalData, collection, flattenArrays, additionalHeaders, exportType, dateExportType);\n                onAnalyticsEvent?.(\"export_collection_success\", {\n                    collection: collection.path\n                });\n            })\n            .catch((e) => {\n                console.error(\"Error loading export data\", e);\n                setDataLoadingError(e);\n            })\n            .finally(() => setDataLoading(false));\n\n    }, [onAnalyticsEvent, dataSource, path, fetchAdditionalFields, flattenArrays, exportType, dateExportType]);\n\n    const onOkClicked = useCallback(() => {\n        doDownload(collection, exportConfig);\n        handleClose();\n    }, [doDownload, collection, exportConfig, handleClose]);\n\n    return <>\n\n        <Tooltip title={\"Export\"}>\n            <IconButton color={\"primary\"} onClick={handleClickOpen}>\n                <GetAppIcon/>\n            </IconButton>\n        </Tooltip>\n\n        <Dialog\n            open={open}\n            onOpenChange={setOpen}\n            maxWidth={\"xl\"}>\n            <DialogContent className={\"flex flex-col gap-4 my-4\"}>\n\n                <Typography variant={\"h6\"}>Export data</Typography>\n\n                <div>Download the the content of this table as a CSV</div>\n\n                {collectionEntitiesCount > DOCS_LIMIT &&\n                    <Alert color={\"warning\"}>\n                        <div>\n                            This collections has a large number\n                            of documents ({collectionEntitiesCount}).\n                        </div>\n                    </Alert>}\n\n                <div className={\"flex flex-row gap-4\"}>\n                    <div className={\"p-4 flex flex-col\"}>\n                        <div className=\"flex items-center\">\n                            <input id=\"radio-csv\" type=\"radio\" value=\"csv\" name=\"exportType\"\n                                   checked={exportType === \"csv\"}\n                                   onChange={() => setExportType(\"csv\")}\n                                   className={cn(focusedMixin, \"w-4 text-primary-dark bg-gray-100 border-gray-300 dark:bg-gray-700 dark:border-gray-600\")}/>\n                            <label htmlFor=\"radio-csv\"\n                                   className=\"p-2 text-sm font-medium text-gray-900 dark:text-slate-300\">CSV</label>\n                        </div>\n                        <div className=\"flex items-center\">\n                            <input id=\"radio-json\" type=\"radio\" value=\"json\" name=\"exportType\"\n                                   checked={exportType === \"json\"}\n                                   onChange={() => setExportType(\"json\")}\n                                   className={cn(focusedMixin, \"w-4 text-primary-dark bg-gray-100 border-gray-300 dark:bg-gray-700 dark:border-gray-600\")}/>\n                            <label htmlFor=\"radio-json\"\n                                   className=\"p-2 text-sm font-medium text-gray-900 dark:text-slate-300\">JSON</label>\n                        </div>\n                    </div>\n\n                    <div className={\"p-4 flex flex-col\"}>\n                        <div className=\"flex items-center\">\n                            <input id=\"radio-timestamp\" type=\"radio\" value=\"timestamp\" name=\"dateExportType\"\n                                   checked={dateExportType === \"timestamp\"}\n                                   onChange={() => setDateExportType(\"timestamp\")}\n                                   className={cn(focusedMixin, \"w-4 text-primary-dark bg-gray-100 border-gray-300 dark:bg-gray-700 dark:border-gray-600\")}/>\n                            <label htmlFor=\"radio-timestamp\"\n                                   className=\"p-2 text-sm font-medium text-gray-900 dark:text-slate-300\">Dates as\n                                timestamps ({dateRef.current.getTime()})</label>\n                        </div>\n                        <div className=\"flex items-center\">\n                            <input id=\"radio-string\" type=\"radio\" value=\"string\" name=\"dateExportType\"\n                                   checked={dateExportType === \"string\"}\n                                   onChange={() => setDateExportType(\"string\")}\n                                   className={cn(focusedMixin, \"w-4 text-primary-dark bg-gray-100 border-gray-300 dark:bg-gray-700 dark:border-gray-600\")}/>\n                            <label htmlFor=\"radio-string\"\n                                   className=\"p-2 text-sm font-medium text-gray-900 dark:text-slate-300\">Dates as\n                                strings ({dateRef.current.toISOString()})</label>\n                        </div>\n                    </div>\n                </div>\n\n                <BooleanSwitchWithLabel\n                    size={\"small\"}\n                    disabled={exportType !== \"csv\"}\n                    value={flattenArrays}\n                    onValueChange={setFlattenArrays}\n                    label={\"Flatten arrays\"}/>\n\n                {!canExport && notAllowedView}\n\n            </DialogContent>\n\n            <DialogActions>\n\n                {dataLoading && <CircularProgress size={\"small\"}/>}\n\n                <Button onClick={handleClose}\n                        variant={\"text\"}>\n                    Cancel\n                </Button>\n\n                <Button variant=\"filled\"\n                        onClick={onOkClicked}\n                        disabled={dataLoading || !canExport}>\n                    Download\n                </Button>\n\n            </DialogActions>\n\n        </Dialog>\n\n    </>;\n}\n","import React, { useMemo } from \"react\";\nimport { EntityCollection, FireCMSPlugin } from \"@firecms/core\";\nimport { ImportCollectionAction } from \"./export_import/ImportCollectionAction\";\nimport { ExportCollectionAction } from \"./export_import/ExportCollectionAction\";\n\n/**\n *\n */\nexport function useImportExportPlugin(props?: ImportExportPluginProps): FireCMSPlugin<any, any, any, ImportExportPluginProps> {\n\n    return useMemo(() => ({\n        key: \"import_export\",\n        collectionView: {\n            CollectionActions: [ImportCollectionAction, ExportCollectionAction],\n            collectionActionsProps: props\n        }\n    }), [props]);\n}\n\nexport type ImportExportPluginProps = {\n    exportAllowed?: (props: ExportAllowedParams) => boolean;\n    notAllowedView: React.ReactNode;\n    onAnalyticsEvent?: (event: string, params?: any) => void;\n}\nexport type ExportAllowedParams = { collectionEntitiesCount: number, path: string, collection: EntityCollection };\n"],"names":["useImportConfig","inUse","setInUse","useState","defaultValues","setDefaultValues","idColumn","setIdColumn","importData","setImportData","entities","setEntities","headersMapping","setHeadersMapping","headingsOrder","setHeadingsOrder","originProperties","setOriginProperties","getXLSXHeaders","sheet","header","hdr","o","range","r","safeDecodeRange","rr","XLSX","cols","C","val","idx","i","cc","len","convertFileToJson","file","resolve","reject","reader","e","data","jsonData","propertiesOrder","workbook","worksheetName","worksheet","parsedData","headers","mapJsonParse","unflattenObject","obj","acc","key","flatObj","nestedObj","currentObj","keyParts","keyPart","mainPropertyName","index","convertDataToEntity","properties","path","flatObject","flattenEntry","mappedKeysObject","value","mappedKey","getIn","mappedProperty","getPropertyInPath","processedValue","processValueMapping","curr","values","mergeDeep","id","parent","prefixedKey","property","usedProperty","resolveProperty","from","inferTypeFromValue","to","isPropertyBuilder","v","entityId","EntityReference","getInferenceType","DataNewPropertiesMapping","importConfig","destinationProperties","buildPropertyView","jsxs","Fragment","jsx","IdSelectField","Table","TableHeader","TableCell","TableBody","importKey","propertyKey","originProperty","originDataType","TableRow","Typography","ChevronRightIcon","ExpandablePanel","getAllPropertyKeys","DefaultValuesField","newValues","setIn","currentKey","accumulatedKey","childProperties","onChange","Select","event","SelectItem","onValueChange","defaultValue","TextField","BooleanSwitchWithLabel","DateTimeField","dateValue","ImportFileUpload","onDataAdded","snackbarController","useSnackbarController","FileUpload","UploadIcon","files","error","ImportNewPropertyFieldPreview","onEditClick","includeName","onPropertyNameChanged","propertyTypeView","propertyConfigs","useCustomizationController","widget","getFieldConfig","ErrorBoundary","PropertyConfigBadge","IconButton","EditIcon","ImportSaveInProgress","collection","onImportSuccess","errorSaving","setErrorSaving","dataSource","useDataSource","savingRef","useRef","processedEntities","setProcessedEntities","save","saveDataBatch","useEffect","CenteredView","Button","CircularProgress","offset","batchSize","onProgressUpdate","batch","d","ImportCollectionAction","collectionEntitiesCount","onAnalyticsEvent","customizationController","open","setOpen","React","step","setStep","handleClickOpen","useCallback","handleClose","onMappingComplete","onPreviewComplete","buildEntityPropertiesFromData","buildHeadersMappingFromData","firstKey","resolvedCollection","resolveCollection","getPropertiesWithPropertiesOrder","propertiesAndLevel","getPropertiesAndLevel","Tooltip","FileUploadIcon","Dialog","DialogContent","isIdColumn","PropertyTreeSelect","newPropertyKey","newHeadersMapping","currentImportKey","currentPropertyKey","ImportDataPreview","importedCollection","DialogActions","internalIDValue","selectedPropertyKey","onPropertySelected","onIdSelected","selectedProperty","renderValue","PropertySelectEntry","level","childKey","_","cn","defaultBorderMixin","mappedData","selectionController","useSelectionController","EntityCollectionTable","objArr","child","childProperty","childHeadersMapping","subKey","mapping","slug","slugify","downloadExport","additionalData","flattenArrays","additionalHeaders","exportType","dateExportType","arrayValuesCount","getArrayValuesCount","getExportHeaders","exportableData","getCSVExportableData","headersData","entryToCSVRow","h","csvData","entry","downloadBlob","getJsonExportableData","json","mergedData","processValuesForExport","additional","getValueInPath","getHeaders","prefix","p","processValueForExport","inputValue","ref","inputValues","updatedValues","updatedValue","a","b","content","filename","contentType","blob","url","pom","DOCS_LIMIT","ExportCollectionAction","inputCollection","inputPath","exportAllowed","notAllowedView","exportConfig","dateRef","setFlattenArrays","setExportType","setDateExportType","context","useFireCMSContext","useNavigationController","canExport","dataLoading","setDataLoading","dataLoadingError","setDataLoadingError","fetchAdditionalFields","additionalExportFields","additionalFields","resolvedExportColumnsValues","entity","column","resolvedColumnsValues","field","doDownload","onOkClicked","GetAppIcon","Alert","focusedMixin","useImportExportPlugin","props","useMemo"],"mappings":"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"}