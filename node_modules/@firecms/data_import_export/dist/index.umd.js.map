{"version":3,"file":"index.umd.js","sources":["../src/hooks/useImportConfig.tsx","../src/utils/file_headers.ts","../src/utils/file_to_json.ts","../src/utils/data.ts","../src/utils/get_import_inference_type.ts","../src/components/DataNewPropertiesMapping.tsx","../src/components/ImportFileUpload.tsx","../src/components/ImportNewPropertyFieldPreview.tsx","../src/components/ImportSaveInProgress.tsx","../src/export_import/ImportCollectionAction.tsx","../src/export_import/export.ts","../src/export_import/ExportCollectionAction.tsx","../src/useImportExportPlugin.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { Entity, Property } from \"@firecms/core\";\nimport { ImportConfig } from \"../types\";\n\nexport const useImportConfig = (): ImportConfig => {\n\n    const [inUse, setInUse] = useState<boolean>(false);\n    const [defaultValues, setDefaultValues] = useState<Record<string, any>>({});\n    const [idColumn, setIdColumn] = useState<string | undefined>();\n    const [importData, setImportData] = useState<object[]>([]);\n    const [entities, setEntities] = useState<Entity<any>[]>([]);\n    const [headersMapping, setHeadersMapping] = useState<Record<string, string | null>>({});\n    const [headingsOrder, setHeadingsOrder] = useState<string[]>([]);\n    const [originProperties, setOriginProperties] = useState<Record<string, Property>>({});\n\n    return {\n        inUse,\n        setInUse,\n        idColumn,\n        setIdColumn,\n        entities,\n        setEntities,\n        importData,\n        setImportData,\n        headingsOrder: (headingsOrder ?? []).length > 0 ? headingsOrder : Object.keys(headersMapping),\n        setHeadingsOrder,\n        headersMapping,\n        setHeadersMapping,\n        originProperties,\n        setOriginProperties,\n        defaultValues,\n        setDefaultValues\n    };\n};\n","import * as XLSX from \"xlsx\";\nexport function getXLSXHeaders(sheet: any) {\n    let header = 0; let offset = 1;\n    const hdr = [];\n    const o:any = {};\n    if (sheet == null || sheet[\"!ref\"] == null) return [];\n    const range = o.range !== undefined ? o.range : sheet[\"!ref\"];\n    let r;\n    if (o.header === 1) header = 1;\n    else if (o.header === \"A\") header = 2;\n    else if (Array.isArray(o.header)) header = 3;\n    switch (typeof range) {\n        case \"string\":\n            r = safeDecodeRange(range);\n            break;\n        case \"number\":\n            r = safeDecodeRange(sheet[\"!ref\"]);\n            r.s.r = range;\n            break;\n        default:\n            r = range;\n    }\n    if (header > 0) offset = 0;\n    const rr = XLSX.utils.encode_row(r.s.r);\n    const cols = new Array(r.e.c - r.s.c + 1);\n    for (let C = r.s.c; C <= r.e.c; ++C) {\n        cols[C] = XLSX.utils.encode_col(C);\n        const val = sheet[cols[C] + rr];\n        switch (header) {\n            case 1:\n                hdr.push(C);\n                break;\n            case 2:\n                hdr.push(cols[C]);\n                break;\n            case 3:\n                hdr.push(o.header[C - r.s.c]);\n                break;\n            default:\n                if (val === undefined) continue;\n                hdr.push(XLSX.utils.format_cell(val));\n        }\n    }\n    return hdr;\n}\n\nfunction safeDecodeRange(range:any) {\n    const o = {\n        s: {\n            c: 0,\n            r: 0\n        },\n        e: {\n            c: 0,\n            r: 0\n        }\n    };\n    let idx = 0; let i = 0; let cc = 0;\n    const len = range.length;\n    for (idx = 0; i < len; ++i) {\n        if ((cc = range.charCodeAt(i) - 64) < 1 || cc > 26) break;\n        idx = 26 * idx + cc;\n    }\n    o.s.c = --idx;\n\n    for (idx = 0; i < len; ++i) {\n        if ((cc = range.charCodeAt(i) - 48) < 0 || cc > 9) break;\n        idx = 10 * idx + cc;\n    }\n    o.s.r = --idx;\n\n    if (i === len || range.charCodeAt(++i) === 58) {\n        o.e.c = o.s.c;\n        o.e.r = o.s.r;\n        return o;\n    }\n\n    for (idx = 0; i !== len; ++i) {\n        if ((cc = range.charCodeAt(i) - 64) < 1 || cc > 26) break;\n        idx = 26 * idx + cc;\n    }\n    o.e.c = --idx;\n\n    for (idx = 0; i !== len; ++i) {\n        if ((cc = range.charCodeAt(i) - 48) < 0 || cc > 9) break;\n        idx = 10 * idx + cc;\n    }\n    o.e.r = --idx;\n    return o;\n}\n","import * as XLSX from \"xlsx\";\nimport { getXLSXHeaders } from \"./file_headers\";\n\ntype ConversionResult = {\n    data: object[];\n    propertiesOrder: string[]\n}\n\nexport function convertFileToJson(file: File): Promise<ConversionResult> {\n    return new Promise((resolve, reject) => {\n        if (file.type === \"application/json\") {\n            console.debug(\"Converting JSON file to JSON\", file.name);\n            const reader = new FileReader();\n            reader.onload = function (e) {\n                try {\n                    const data = e.target?.result as string;\n                    const jsonData = JSON.parse(data);\n                    if (!Array.isArray(jsonData)) {\n                        reject(new Error(\"JSON file should contain an array of objects\"));\n                    } else {\n                        // Assuming all objects in the array have the same structure/order\n                        const propertiesOrder = jsonData.length > 0 ? Object.keys(jsonData[0]) : [];\n                        resolve({\n                            data: jsonData,\n                            propertiesOrder\n                        });\n                    }\n                } catch (e) {\n                    console.error(\"Error parsing JSON file\", e);\n                    reject(e);\n                }\n            };\n            reader.readAsText(file);\n        } else {\n            console.debug(\"Converting Excel file to JSON\", file.name);\n            const reader = new FileReader();\n            reader.onload = function (e) {\n                const data = new Uint8Array(e.target?.result as ArrayBuffer);\n                const workbook = XLSX.read(data, {\n                    type: \"array\",\n                    codepage: 65001,\n                    cellDates: true,\n                });\n                const worksheetName = workbook.SheetNames[0];\n                const worksheet = workbook.Sheets[worksheetName];\n                const parsedData: Array<any> = XLSX.utils.sheet_to_json(worksheet);\n                const headers = getXLSXHeaders(worksheet);\n                const cleanedData = parsedData.map(mapJsonParse);\n                const jsonData = cleanedData.map(unflattenObject);\n                resolve({\n                    data: jsonData,\n                    propertiesOrder: headers\n                });\n            };\n            reader.readAsArrayBuffer(file);\n        }\n    });\n}\n\nfunction mapJsonParse(obj: Record<string, any>) {\n    return Object.keys(obj).reduce((acc: Record<string, any>, key) => {\n        try {\n            acc[key] = JSON.parse(obj[key]);\n        } catch (e) {\n            acc[key] = obj[key];\n        }\n        return acc;\n    }, {});\n}\n\n/**\n * Take an object with keys of type `address.street`, `address.city` and\n * convert it to an object with nested objects like `{ address: { street: ..., city: ... } }`\n * @param flatObj\n */\nexport function unflattenObject(flatObj: { [key: string]: any }) {\n    return Object.keys(flatObj).reduce((nestedObj, key) => {\n        let currentObj = nestedObj;\n        const keyParts = key.split(\".\");\n        keyParts.forEach((keyPart, i) => {\n\n            if (/^[\\w]+\\[\\d+\\]$/.test(keyPart)) {\n                const mainPropertyName = keyPart.slice(0, keyPart.indexOf(\"[\"));\n                const index = parseInt(keyPart.slice(keyPart.indexOf(\"[\") + 1, keyPart.indexOf(\"]\")));\n\n                if (!currentObj[mainPropertyName]) {\n                    currentObj[mainPropertyName] = []\n                }\n\n                if (i !== keyParts.length - 1) {\n                    currentObj[mainPropertyName][index] = currentObj[mainPropertyName][index] || {};\n                    currentObj = currentObj[mainPropertyName][index];\n                } else {\n                    currentObj[mainPropertyName][index] = flatObj[key];\n                }\n            } else if (i !== keyParts.length - 1) {\n                currentObj[keyPart] = currentObj[keyPart] || {};\n                currentObj = currentObj[keyPart];\n            } else {\n                currentObj[keyPart] = flatObj[key];\n            }\n\n        });\n        return nestedObj;\n    }, {} as { [key: string]: any });\n}\n","import {\n    Entity,\n    EntityReference,\n    getPropertyInPath,\n    isPropertyBuilder,\n    mergeDeep,\n    Properties,\n    Property,\n    PropertyOrBuilder,\n    ResolvedProperty,\n    resolveProperty\n} from \"@firecms/core\";\nimport { unflattenObject } from \"./file_to_json\";\nimport { getIn } from \"@firecms/formex\";\nimport { inferTypeFromValue } from \"@firecms/schema_inference\";\n\nexport function convertDataToEntity(data: Record<any, any>,\n                                    idColumn: string | undefined,\n                                    headersMapping: Record<string, string | null>,\n                                    properties: Properties,\n                                    path: string,\n                                    defaultValues: Record<string, any>): Entity<any> {\n    const flatObject = flattenEntry(data);\n    if (idColumn)\n        delete flatObject[idColumn];\n    const mappedKeysObject = Object.entries(flatObject)\n        .map(([key, value]) => {\n            const mappedKey = getIn(headersMapping, key) ?? key;\n\n            const mappedProperty = getPropertyInPath(properties, mappedKey);\n            if (!mappedProperty) {\n                return {};\n            }\n            const processedValue = processValueMapping(value, mappedProperty);\n            return ({\n                [mappedKey]: processedValue\n            });\n        })\n        .reduce((acc, curr) => ({ ...acc, ...curr }), {});\n\n    const values = mergeDeep(defaultValues ?? {}, unflattenObject(mappedKeysObject));\n    let id = idColumn ? data[idColumn] : undefined;\n    if (typeof id === \"string\") {\n        id = id.trim();\n    } else if (typeof id === \"number\") {\n        id = id.toString();\n    } else if (typeof id === \"boolean\") {\n        id = id.toString();\n    } else if (id instanceof Date) {\n        id = id.toISOString();\n    } else if (id && \"toString\" in id) {\n        id = id.toString();\n    }\n\n    return {\n        id,\n        values,\n        path\n    };\n}\n\nexport function flattenEntry(obj: any, parent = \"\"): any {\n    return Object.keys(obj).reduce((acc, key) => {\n        const prefixedKey = parent ? `${parent}.${key}` : key;\n\n        if (typeof obj[key] === \"object\" && !(obj[key] instanceof Date) && obj[key] !== null && !Array.isArray(obj[key])) {\n            Object.assign(acc, flattenEntry(obj[key], prefixedKey));\n        } else {\n            // @ts-ignore\n            acc[prefixedKey] = obj[key];\n        }\n\n        return acc;\n    }, {});\n}\n\nexport function processValueMapping(value: any, property?: PropertyOrBuilder): any {\n    if (value === null) return null;\n\n    if (property === undefined) return value;\n    const usedProperty: ResolvedProperty | null = resolveProperty({\n        propertyOrBuilder: property,\n        propertyValue: value\n    })\n    if (usedProperty === null) return value;\n    const from = inferTypeFromValue(value);\n    const to = usedProperty.dataType;\n\n    if (from === \"array\" && to === \"array\" && Array.isArray(value) && usedProperty.of && !isPropertyBuilder(usedProperty.of as PropertyOrBuilder)) {\n        return value.map(v => processValueMapping(v, usedProperty.of as Property));\n    } else if (from === \"string\" && to === \"number\" && typeof value === \"string\") {\n        return Number(value);\n    } else if (from === \"string\" && to === \"array\" && typeof value === \"string\" && usedProperty.of && !isPropertyBuilder(usedProperty.of as PropertyOrBuilder)) {\n        return value.split(\",\").map((v: string) => processValueMapping(v, usedProperty.of));\n    } else if (from === \"string\" && to === \"boolean\") {\n        return value === \"true\";\n    } else if (from === \"number\" && to === \"boolean\") {\n        return value === 1;\n    } else if (from === \"boolean\" && to === \"number\") {\n        return value ? 1 : 0;\n    } else if (from === \"boolean\" && to === \"string\") {\n        return value ? \"true\" : \"false\";\n    } else if (from === \"number\" && to === \"string\" && typeof value === \"number\") {\n        return value.toString();\n    } else if (from === \"string\" && to === \"array\" && typeof value === \"string\") {\n        return value.split(\",\").map((v: string) => v.trim());\n    } else if (from === \"string\" && to === \"date\" && typeof value === \"string\") {\n        try {\n            return new Date(value);\n        } catch (e) {\n            return value;\n        }\n    } else if (from === \"date\" && to === \"string\") {\n        return value instanceof Date && value.toISOString();\n    } else if (from === \"number\" && to === \"date\" && typeof value === \"number\") {\n        try {\n            return new Date(value);\n        } catch (e) {\n            return value;\n        }\n    } else if (from === \"string\" && to === \"reference\" && typeof value === \"string\") {\n        // split value into path and entityId (entityId is the last part of the path, after the last /)\n        const path = value.split(\"/\").slice(0, -1).join(\"/\");\n        const entityId = value.split(\"/\").slice(-1)[0];\n        return new EntityReference(entityId, path);\n\n    } else if (from === to) {\n        return value;\n    } else if (from === \"array\" && to === \"string\" && Array.isArray(value)) {\n        return value.join(\",\");\n    }\n\n    return value;\n}\n","import { DataType } from \"@firecms/core\";\n\nexport function getInferenceType(value: any): DataType {\n    if (typeof value === \"number\")\n        return \"number\";\n    else if (typeof value === \"string\")\n        return \"string\";\n    else if (typeof value === \"boolean\")\n        return \"boolean\";\n    else if (value instanceof Date)\n        return \"date\";\n    else if (Array.isArray(value))\n        return \"array\";\n    return \"map\";\n}\n\n\nfunction isUnixTimestamp(num: number): boolean {\n    const numString = num.toString();\n    // check if the number has 13 digits\n    const isLengthValid = numString.length === 13;\n\n    // check if it falls in the expected Unix timestamp range (from 1970 to 2100)\n    const isInRange = num >= 0 && num <= 4102444800000;\n\n    return isLengthValid && isInRange;\n}\n","import { getPropertyInPath, PropertiesOrBuilders, Property } from \"@firecms/core\";\nimport {\n    BooleanSwitchWithLabel,\n    ChevronRightIcon,\n    DateTimeField,\n    ExpandablePanel,\n    Select,\n    SelectItem,\n    Table,\n    TableBody,\n    TableCell,\n    TableHeader,\n    TableRow,\n    TextField,\n    Typography\n} from \"@firecms/ui\";\nimport { ImportConfig } from \"../types\";\nimport { getIn, setIn } from \"@firecms/formex\";\n\nexport interface DataPropertyMappingProps {\n    importConfig: ImportConfig;\n    destinationProperties: Record<string, Property>;\n    buildPropertyView?: (props: {\n        isIdColumn: boolean,\n        property: Property | null,\n        propertyKey: string | null,\n        importKey: string\n    }) => React.ReactNode;\n}\n\nexport function DataNewPropertiesMapping({\n                                             importConfig,\n                                             destinationProperties,\n                                             buildPropertyView\n                                         }: DataPropertyMappingProps) {\n\n    const headersMapping = importConfig.headersMapping;\n    const headingsOrder = importConfig.headingsOrder;\n    const idColumn = importConfig.idColumn;\n    const originProperties = importConfig.originProperties;\n\n    return (\n        <>\n\n            <IdSelectField idColumn={idColumn}\n                           headersMapping={headersMapping}\n                           onChange={(value) => importConfig.setIdColumn(value ?? undefined)}/>\n\n            <div className={\"h-4\"}/>\n\n            <Table style={{\n                tableLayout: \"fixed\"\n            }}>\n                <TableHeader>\n                    <TableCell header={true} style={{ width: \"20%\" }}>\n                        Column in file\n                    </TableCell>\n                    <TableCell header={true}>\n                    </TableCell>\n                    <TableCell header={true} style={{ width: \"75%\" }}>\n                        Map to Property\n                    </TableCell>\n                </TableHeader>\n                <TableBody>\n                    {destinationProperties &&\n                        headingsOrder.map((importKey) => {\n                                const mappedKey = headersMapping[importKey];\n                                const propertyKey = headersMapping[importKey];\n                                const property = mappedKey ? getPropertyInPath(destinationProperties, mappedKey) as Property : null;\n\n                                const originProperty = getPropertyInPath(originProperties, importKey) as Property | undefined;\n                                const originDataType = originProperty\n                                    ? (originProperty.dataType === \"array\" && typeof originProperty.of === \"object\"\n                                        ? `${originProperty.dataType} - ${(originProperty.of as Property).dataType}`\n                                        : originProperty.dataType)\n                                    : undefined;\n                                return <TableRow key={importKey} style={{ height: \"90px\" }}>\n                                    <TableCell style={{ width: \"20%\" }}>\n                                        <Typography variant={\"body2\"}>{importKey}</Typography>\n                                        {originProperty && <Typography\n                                            variant={\"caption\"}\n                                            color={\"secondary\"}\n                                        >{originDataType}</Typography>}\n                                    </TableCell>\n                                    <TableCell>\n                                        <ChevronRightIcon/>\n                                    </TableCell>\n                                    <TableCell className={importKey === idColumn ? \"text-center\" : undefined}\n                                               style={{ width: \"75%\" }}>\n                                        {buildPropertyView?.({\n                                            isIdColumn: importKey === idColumn,\n                                            property,\n                                            propertyKey,\n                                            importKey\n                                        })}\n                                    </TableCell>\n                                </TableRow>;\n                            }\n                        )}\n                </TableBody>\n            </Table>\n\n            <ExpandablePanel title=\"Default values\" initiallyExpanded={false} className={\"p-4 mt-4\"}>\n\n                <div className={\"text-sm text-slate-500 dark:text-slate-300 font-medium ml-3.5 mb-1\"}>\n                    You can select a default value for unmapped columns and empty values:\n                </div>\n                <Table style={{\n                    tableLayout: \"fixed\"\n                }}>\n                    <TableHeader>\n                        <TableCell header={true} style={{ width: \"30%\" }}>\n                            Property\n                        </TableCell>\n                        <TableCell header={true}>\n                        </TableCell>\n                        <TableCell header={true} style={{ width: \"65%\" }}>\n                            Default value\n                        </TableCell>\n                    </TableHeader>\n                    <TableBody>\n                        {destinationProperties &&\n                            getAllPropertyKeys(destinationProperties).map((key) => {\n                                    const property = getPropertyInPath(destinationProperties, key);\n                                    if (typeof property !== \"object\" || property === null) {\n                                        return null;\n                                    }\n                                    if (![\"number\", \"string\", \"boolean\", \"map\"].includes(property.dataType)) {\n                                        return null;\n                                    }\n                                    return <TableRow key={key} style={{ height: \"70px\" }}>\n                                        <TableCell style={{ width: \"20%\" }}>\n                                            <Typography variant={\"body2\"}>{key}</Typography>\n                                        </TableCell>\n                                        <TableCell>\n                                            <ChevronRightIcon/>\n                                        </TableCell>\n                                        <TableCell className={key === idColumn ? \"text-center\" : undefined}\n                                                   style={{ width: \"75%\" }}>\n                                            <DefaultValuesField property={property}\n                                                                defaultValue={getIn(importConfig.defaultValues, key)}\n                                                                onValueChange={(value) => {\n                                                                    const newValues = setIn(importConfig.defaultValues, key, value);\n                                                                    importConfig.setDefaultValues(newValues);\n                                                                }}/>\n                                        </TableCell>\n                                    </TableRow>;\n                                }\n                            )}\n                    </TableBody>\n                </Table>\n            </ExpandablePanel>\n        </>\n    );\n}\n\nfunction getAllPropertyKeys(properties: PropertiesOrBuilders, currentKey?: string): string[] {\n    return Object.entries(properties).reduce((acc, [key, property]) => {\n        const accumulatedKey = currentKey ? `${currentKey}.${key}` : key;\n        if (typeof property !== \"function\" && property.dataType === \"map\" && property.properties) {\n            const childProperties = getAllPropertyKeys(property.properties, accumulatedKey);\n            return [...acc, ...childProperties];\n        }\n        return [...acc, accumulatedKey];\n    }, [] as string[]);\n}\n\nfunction IdSelectField({\n                           idColumn,\n                           headersMapping,\n                           onChange\n                       }: {\n    idColumn?: string,\n    headersMapping: Record<string, string | null>;\n    onChange: (value: string | null) => void\n}) {\n    return <div>\n        <Select\n            size={\"small\"}\n            value={idColumn ?? \"\"}\n            onChange={(event) => {\n                const value = event.target.value;\n                onChange(value === \"__none__\" ? null : value);\n            }}\n            placeholder={\"Autogenerate ID\"}\n            renderValue={(value) => {\n                return <Typography variant={\"body2\"}>\n                    {value !== \"__none__\" ? value : \"Autogenerate ID\"}\n                </Typography>;\n            }}\n            label={\"Column that will be used as ID for each document\"}>\n            <SelectItem value={\"__none__\"}>Autogenerate ID</SelectItem>\n            {Object.entries(headersMapping).map(([key, value]) => {\n                return <SelectItem key={key} value={key}>{key}</SelectItem>;\n            })}\n        </Select>\n    </div>;\n}\n\nfunction DefaultValuesField({\n                                property,\n                                onValueChange,\n                                defaultValue\n                            }: { property: Property, onValueChange: (value: any) => void, defaultValue?: any }) {\n    if (property.dataType === \"string\") {\n        return <TextField size={\"small\"}\n                          placeholder={\"Default value\"}\n                          value={defaultValue ?? \"\"}\n                          onChange={(event) => onValueChange(event.target.value)}/>;\n    } else if (property.dataType === \"number\") {\n        return <TextField size={\"small\"}\n                          type={\"number\"}\n                          value={defaultValue ?? \"\"}\n                          placeholder={\"Default value\"}\n                          onChange={(event) => onValueChange(event.target.value)}/>;\n    } else if (property.dataType === \"boolean\") {\n        return <BooleanSwitchWithLabel\n            value={defaultValue ?? null}\n            allowIndeterminate={true}\n            size={\"small\"}\n            onValueChange={(v: boolean | null) => onValueChange(v === null ? undefined : v)}\n            label={defaultValue === undefined\n                ? \"Do not set value\"\n                : defaultValue === true\n                    ? \"Set value to true\"\n                    : \"Set value to false\"}\n        />\n    } else if (property.dataType === \"date\") {\n        return <DateTimeField\n            mode={property.mode ?? \"date\"}\n            size={\"small\"}\n            value={defaultValue ?? undefined}\n            onChange={(dateValue: Date | undefined) => {\n                onValueChange(dateValue);\n            }}\n            clearable={true}\n        />\n    }\n\n    return null;\n}\n","import { FileUpload, UploadIcon } from \"@firecms/ui\";\nimport { convertFileToJson } from \"../utils/file_to_json\";\nimport { useSnackbarController } from \"@firecms/core\";\n\nexport function ImportFileUpload({ onDataAdded }: {\n    onDataAdded: (data: object[], propertiesOrder?: string[]) => void\n}) {\n    const snackbarController = useSnackbarController();\n    return <FileUpload\n        accept={{\n            \"text/*\": [\".csv\", \".xls\", \".xlsx\"],\n            \"application/vnd.ms-excel\": [\".xls\", \".xlsx\"],\n            \"application/msexcel\": [\".xls\", \".xlsx\"],\n            \"application/vnd.ms-office\": [\".xls\", \".xlsx\"],\n            \"application/xls\": [\".xls\", \".xlsx\"],\n            \"application/x-xls\": [\".xls\", \".xlsx\"],\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\": [\".xls\", \".xlsx\"],\n            \"application/json\": [\".json\"],\n        }}\n        preventDropOnDocument={true}\n        size={\"small\"}\n        maxFiles={1}\n        uploadDescription={<><UploadIcon/>Drag and drop a file here or click to upload</>}\n        onFilesAdded={(files: File[]) => {\n            if (files.length > 0) {\n                convertFileToJson(files[0])\n                    .then(({\n                               data,\n                               propertiesOrder\n                           }) => {\n                        onDataAdded(data, propertiesOrder);\n                    })\n                    .catch((error) => {\n                        console.error(\"Error parsing file\", error);\n                        snackbarController.open({\n                            type: \"error\",\n                            message: error.message\n                        });\n                    });\n            }\n        }}/>\n}\n","import React from \"react\";\nimport {\n    ErrorBoundary,\n    getFieldConfig,\n    Property,\n    PropertyConfigBadge,\n    useCustomizationController\n} from \"@firecms/core\";\nimport { EditIcon, IconButton, TextField, } from \"@firecms/ui\";\n\nexport function ImportNewPropertyFieldPreview({\n                                                  propertyKey,\n                                                  property,\n                                                  onEditClick,\n                                                  includeName = true,\n                                                  onPropertyNameChanged,\n                                                  propertyTypeView\n                                              }: {\n    propertyKey: string | null,\n    property: Property | null\n    includeName?: boolean,\n    onEditClick?: () => void,\n    onPropertyNameChanged?: (propertyKey: string, value: string) => void,\n    propertyTypeView?: React.ReactNode\n}) {\n\n    const { propertyConfigs } = useCustomizationController();\n    const widget = property ? getFieldConfig(property, propertyConfigs) : null;\n\n    return <ErrorBoundary>\n        <div\n            className=\"flex flex-row w-full items-center\">\n\n            <div className={\"mx-4\"}>\n                {propertyTypeView ?? <PropertyConfigBadge propertyConfig={widget ?? undefined}/>}\n            </div>\n\n            <div className=\"w-full flex flex-col grow\">\n\n                <div className={\"flex flex-row items-center gap-2\"}>\n                    {includeName &&\n                        <TextField\n                            size={\"small\"}\n                            className={\"text-base grow\"}\n                            value={property?.name ?? \"\"}\n                            onChange={(e) => {\n                                if (onPropertyNameChanged && propertyKey)\n                                    onPropertyNameChanged(propertyKey, e.target.value);\n                            }}/>}\n\n                    <IconButton onClick={onEditClick} size={\"small\"}>\n                        <EditIcon size={\"small\"}/>\n                    </IconButton>\n                </div>\n\n            </div>\n\n        </div>\n    </ErrorBoundary>\n}\n","import { DataSource, Entity, EntityCollection, useDataSource } from \"@firecms/core\";\nimport { Button, CenteredView, CircularProgress, Typography, } from \"@firecms/ui\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { ImportConfig } from \"../types\";\n\nexport function ImportSaveInProgress<C extends EntityCollection>\n({\n     path,\n     importConfig,\n     collection,\n     onImportSuccess\n }:\n     {\n         path: string,\n         importConfig: ImportConfig,\n         collection: C,\n         onImportSuccess: (collection: C) => void\n     }) {\n\n    const [errorSaving, setErrorSaving] = useState<Error | undefined>(undefined);\n    const dataSource = useDataSource();\n\n    const savingRef = useRef<boolean>(false);\n\n    const [processedEntities, setProcessedEntities] = useState<number>(0);\n\n    function save() {\n\n        if (savingRef.current)\n            return;\n\n        savingRef.current = true;\n\n        saveDataBatch(\n            dataSource,\n            collection,\n            path,\n            importConfig.entities,\n            0,\n            25,\n            setProcessedEntities\n        ).then(() => {\n            onImportSuccess(collection);\n            savingRef.current = false;\n        }).catch((e) => {\n            setErrorSaving(e);\n            savingRef.current = false;\n        });\n    }\n\n    useEffect(() => {\n        save();\n    }, []);\n\n    if (errorSaving) {\n        return (\n            <CenteredView className={\"flex flex-col gap-4 items-center\"}>\n                <Typography variant={\"h6\"}>\n                    Error saving data\n                </Typography>\n\n                <Typography variant={\"body2\"} color={\"error\"}>\n                    {errorSaving.message}\n                </Typography>\n                <Button\n                    onClick={save}\n                    variant={\"outlined\"}>\n                    Retry\n                </Button>\n            </CenteredView>\n        );\n    }\n\n    return (\n        <CenteredView className={\"flex flex-col gap-4 items-center\"}>\n            <CircularProgress/>\n\n            <Typography variant={\"h6\"}>\n                Saving data\n            </Typography>\n\n            <Typography variant={\"body2\"}>\n                {processedEntities}/{importConfig.entities.length} entities saved\n            </Typography>\n\n            <Typography variant={\"caption\"}>\n                Do not close this tab or the import will be interrupted.\n            </Typography>\n\n        </CenteredView>\n    );\n\n}\n\nfunction saveDataBatch(dataSource: DataSource,\n                       collection: EntityCollection,\n                       path: string,\n                       data: Partial<Entity<any>>[],\n                       offset = 0,\n                       batchSize = 25,\n                       onProgressUpdate: (progress: number) => void): Promise<void> {\n\n    console.debug(\"Saving imported data\", offset, batchSize);\n\n    const batch = data.slice(offset, offset + batchSize);\n    return Promise.all(batch.map(d =>\n        dataSource.saveEntity({\n            path,\n            values: d.values,\n            entityId: d.id,\n            collection,\n            status: \"new\"\n        })))\n        .then(() => {\n            if (offset + batchSize < data.length) {\n                onProgressUpdate(offset + batchSize);\n                return saveDataBatch(dataSource, collection, path, data, offset + batchSize, batchSize, onProgressUpdate);\n            }\n            onProgressUpdate(data.length);\n            return Promise.resolve();\n        });\n}\n","import React, { useCallback, useEffect } from \"react\";\nimport {\n    CollectionActionsProps,\n    EntityCollectionTable,\n    getFieldConfig,\n    getPropertiesWithPropertiesOrder,\n    getPropertyInPath,\n    PropertiesOrBuilders,\n    Property,\n    PropertyConfigBadge,\n    resolveCollection,\n    ResolvedProperties,\n    slugify,\n    useCustomizationController,\n    User,\n    useSelectionController,\n    useSnackbarController\n} from \"@firecms/core\";\nimport {\n    Button,\n    cn,\n    defaultBorderMixin,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    FileUploadIcon,\n    IconButton,\n    Select,\n    SelectItem,\n    Tooltip,\n    Typography,\n} from \"@firecms/ui\";\nimport { buildEntityPropertiesFromData } from \"@firecms/schema_inference\";\nimport { useImportConfig } from \"../hooks\";\nimport { convertDataToEntity, getInferenceType } from \"../utils\";\nimport { DataNewPropertiesMapping, ImportFileUpload, ImportSaveInProgress } from \"../components\";\nimport { ImportConfig } from \"../types\";\n\ntype ImportState = \"initial\" | \"mapping\" | \"preview\" | \"import_data_saving\";\n\nexport function ImportCollectionAction<M extends Record<string, any>, UserType extends User>({\n                                                                                                 collection,\n                                                                                                 path,\n                                                                                                 collectionEntitiesCount,\n                                                                                                 onAnalyticsEvent\n                                                                                             }: CollectionActionsProps<M, UserType> & {\n                                                                                                 onAnalyticsEvent?: (event: string, params?: any) => void;\n                                                                                             }\n) {\n\n    const customizationController = useCustomizationController();\n\n    const snackbarController = useSnackbarController();\n\n    const [open, setOpen] = React.useState(false);\n\n    const [step, setStep] = React.useState<ImportState>(\"initial\");\n\n    const importConfig = useImportConfig();\n\n    const handleClickOpen = useCallback(() => {\n        setOpen(true);\n        onAnalyticsEvent?.(\"import_open\");\n        setStep(\"initial\");\n    }, [onAnalyticsEvent]);\n\n    const handleClose = useCallback(() => {\n        setOpen(false);\n    }, [setOpen]);\n\n    const onMappingComplete = useCallback(() => {\n        onAnalyticsEvent?.(\"import_mapping_complete\");\n        setStep(\"preview\");\n    }, [onAnalyticsEvent]);\n\n    const onPreviewComplete = useCallback(() => {\n        onAnalyticsEvent?.(\"import_data_save\");\n        setStep(\"import_data_saving\");\n    }, [onAnalyticsEvent]);\n\n    const onDataAdded = async (data: object[]) => {\n        importConfig.setImportData(data);\n\n        if (data.length > 0) {\n            const originProperties = await buildEntityPropertiesFromData(data, getInferenceType);\n            importConfig.setOriginProperties(originProperties);\n\n            const headersMapping = buildHeadersMappingFromData(data, collection?.properties);\n            importConfig.setHeadersMapping(headersMapping);\n            const firstKey = Object.keys(headersMapping)?.[0];\n            if (firstKey?.includes(\"id\") || firstKey?.includes(\"key\")) {\n                importConfig.setIdColumn(firstKey);\n            }\n        }\n        setTimeout(() => {\n            onAnalyticsEvent?.(\"import_data_added\");\n            setStep(\"mapping\");\n        }, 100);\n        // setStep(\"mapping\");\n    };\n\n    const resolvedCollection = resolveCollection({\n        collection,\n        path,\n        fields: customizationController.propertyConfigs\n    });\n\n    const properties = getPropertiesWithPropertiesOrder<M>(resolvedCollection.properties, resolvedCollection.propertiesOrder as Extract<keyof M, string>[]) as ResolvedProperties<M>;\n\n    const propertiesAndLevel = Object.entries(properties)\n        .flatMap(([key, property]) => getPropertiesAndLevel(key, property, 0));\n    const propertiesOrder = (resolvedCollection.propertiesOrder ?? Object.keys(resolvedCollection.properties)) as Extract<keyof M, string>[];\n    if (collection.collectionGroup) {\n        return null;\n    }\n\n    return <>\n\n        <Tooltip title={\"Import\"}>\n            <IconButton color={\"primary\"} onClick={handleClickOpen}>\n                <FileUploadIcon/>\n            </IconButton>\n        </Tooltip>\n\n        <Dialog open={open}\n                fullWidth={step === \"preview\"}\n                fullHeight={step === \"preview\"}\n                maxWidth={step === \"initial\" ? \"lg\" : \"7xl\"}>\n            <DialogContent className={\"flex flex-col gap-4 my-4\"} fullHeight={step === \"preview\"}>\n\n                {step === \"initial\" && <>\n                    <Typography variant={\"h6\"}>Import data</Typography>\n                    <Typography variant={\"body2\"}>Upload a CSV, Excel or JSON file and map it to your existing\n                        schema</Typography>\n                    <ImportFileUpload onDataAdded={onDataAdded}/>\n                </>}\n\n                {step === \"mapping\" && <>\n                    <Typography variant={\"h6\"} className={\"ml-3.5\"}>Map fields</Typography>\n                    <DataNewPropertiesMapping importConfig={importConfig}\n                                              destinationProperties={properties}\n                                              buildPropertyView={({\n                                                                      isIdColumn,\n                                                                      property,\n                                                                      propertyKey,\n                                                                      importKey,\n                                                                  }) => {\n                                                  return <PropertyTreeSelect\n                                                      selectedPropertyKey={propertyKey ?? \"\"}\n                                                      properties={properties}\n                                                      propertiesAndLevel={propertiesAndLevel}\n                                                      isIdColumn={isIdColumn}\n                                                      onIdSelected={() => {\n                                                          importConfig.setIdColumn(importKey);\n                                                      }}\n                                                      onPropertySelected={(newPropertyKey) => {\n\n                                                          onAnalyticsEvent?.(\"import_mapping_field_updated\");\n                                                          const newHeadersMapping: Record<string, string | null> = Object.entries(importConfig.headersMapping)\n                                                              .map(([currentImportKey, currentPropertyKey]) => {\n                                                                  if (currentPropertyKey === newPropertyKey) {\n                                                                      return { [currentImportKey]: null };\n                                                                  }\n                                                                  if (currentImportKey === importKey) {\n                                                                      return { [currentImportKey]: newPropertyKey };\n                                                                  }\n                                                                  return { [currentImportKey]: currentPropertyKey };\n                                                              })\n                                                              .reduce((acc, curr) => ({ ...acc, ...curr }), {});\n                                                          importConfig.setHeadersMapping(newHeadersMapping as Record<string, string>);\n\n                                                          if (newPropertyKey === importConfig.idColumn) {\n                                                              importConfig.setIdColumn(undefined);\n                                                          }\n\n                                                      }}\n                                                  />;\n                                              }}/>\n                </>}\n\n                {step === \"preview\" && <ImportDataPreview importConfig={importConfig}\n                                                          properties={properties}\n                                                          propertiesOrder={propertiesOrder}/>}\n\n                {step === \"import_data_saving\" && importConfig &&\n                    <ImportSaveInProgress importConfig={importConfig}\n                                          collection={collection}\n                                          path={path}\n                                          onImportSuccess={(importedCollection) => {\n                                              handleClose();\n                                              snackbarController.open({\n                                                  type: \"info\",\n                                                  message: \"Data imported successfully\"\n                                              });\n                                          }}\n                    />}\n\n            </DialogContent>\n            <DialogActions>\n\n                {step === \"mapping\" && <Button onClick={() => setStep(\"initial\")}\n                                               variant={\"text\"}>\n                    Back\n                </Button>}\n\n                {step === \"preview\" && <Button onClick={() => setStep(\"mapping\")}\n                                               variant={\"text\"}>\n                    Back\n                </Button>}\n\n                <Button onClick={handleClose}\n                        variant={\"text\"}>\n                    Cancel\n                </Button>\n\n                {step === \"mapping\" && <Button variant=\"filled\"\n                                               onClick={onMappingComplete}>\n                    Next\n                </Button>}\n\n                {step === \"preview\" && <Button variant=\"filled\"\n                                               onClick={onPreviewComplete}>\n                    Save data\n                </Button>}\n\n            </DialogActions>\n        </Dialog>\n\n    </>;\n}\n\nconst internalIDValue = \"__internal_id__\";\n\nfunction PropertyTreeSelect({\n                                selectedPropertyKey,\n                                properties,\n                                onPropertySelected,\n                                onIdSelected,\n                                propertiesAndLevel,\n                                isIdColumn\n                            }: {\n    selectedPropertyKey: string | null;\n    properties: Record<string, Property>;\n    onPropertySelected: (propertyKey: string | null) => void;\n    onIdSelected: () => void;\n    propertiesAndLevel: PropertyAndLevel[];\n    isIdColumn?: boolean;\n}) {\n\n    const selectedProperty = selectedPropertyKey ? getPropertyInPath(properties, selectedPropertyKey) : null;\n\n    const renderValue = useCallback((selectedPropertyKey: string) => {\n\n        if (selectedPropertyKey === internalIDValue) {\n            return <Typography variant={\"body2\"} className={\"p-4\"}>Use this column as ID</Typography>;\n        }\n\n        if (!selectedPropertyKey || !selectedProperty) {\n            return <Typography variant={\"body2\"} color=\"disabled\" className={\"p-4\"}>Do not import this\n                property</Typography>;\n        }\n\n        return <PropertySelectEntry propertyKey={selectedPropertyKey}\n                                    property={selectedProperty as Property}/>;\n    }, [selectedProperty]);\n\n    const onSelectValueChange = (value: string) => {\n        if (value === internalIDValue) {\n            onIdSelected();\n            onPropertySelected(null);\n        } else if (value === \"__do_not_import\") {\n            onPropertySelected(null);\n        } else {\n            onPropertySelected(value);\n        }\n    };\n\n    return <Select value={isIdColumn ? internalIDValue : (selectedPropertyKey ?? undefined)}\n                   onValueChange={onSelectValueChange}\n                   renderValue={renderValue}>\n\n        <SelectItem value={\"__do_not_import\"}>\n            <Typography variant={\"body2\"} color={\"disabled\"} className={\"p-4\"}>Do not import this property</Typography>\n        </SelectItem>\n\n        <SelectItem value={internalIDValue}>\n            <Typography variant={\"body2\"} className={\"p-4\"}>Use this column as ID</Typography>\n        </SelectItem>\n\n        {propertiesAndLevel.map(({\n                                     property,\n                                     level,\n                                     propertyKey\n                                 }) => {\n            return <SelectItem value={propertyKey}\n                               key={propertyKey}\n                               disabled={property.dataType === \"map\"}>\n                <PropertySelectEntry propertyKey={propertyKey}\n                                     property={property}\n                                     level={level}/>\n            </SelectItem>;\n        })}\n\n    </Select>;\n}\n\ntype PropertyAndLevel = {\n    property: Property,\n    level: number,\n    propertyKey: string\n};\n\nfunction getPropertiesAndLevel(key: string, property: Property, level: number): PropertyAndLevel[] {\n    const properties: PropertyAndLevel[] = [];\n    properties.push({\n        property,\n        level,\n        propertyKey: key\n    });\n    if (property.dataType === \"map\" && property.properties) {\n        Object.entries(property.properties).forEach(([childKey, value]) => {\n            properties.push(...getPropertiesAndLevel(`${key}.${childKey}`, value as Property, level + 1));\n        });\n    }\n    return properties;\n}\n\nexport function PropertySelectEntry({\n                                        propertyKey,\n                                        property,\n                                        level = 0\n                                    }: {\n    propertyKey: string;\n    property: Property;\n    level?: number;\n}) {\n\n    const { propertyConfigs } = useCustomizationController();\n    const widget = getFieldConfig(property, propertyConfigs);\n\n    return <div\n        className=\"flex flex-row w-full text-start items-center h-full\">\n\n        {new Array(level).fill(0).map((_, index) =>\n            <div className={cn(defaultBorderMixin, \"ml-8 border-l h-12\")} key={index}/>)}\n\n        <div className={\"m-4\"}>\n            <Tooltip title={widget?.name}>\n                <PropertyConfigBadge propertyConfig={widget}/>\n            </Tooltip>\n        </div>\n\n        <div className={\"flex flex-col flex-grow p-2 pl-2\"}>\n            <Typography variant=\"body1\"\n                        component=\"span\"\n                        className=\"flex-grow pr-2\">\n                {property.name\n                    ? property.name\n                    : \"\\u00a0\"\n                }\n            </Typography>\n\n            <Typography className=\" pr-2\"\n                        variant={\"body2\"}\n                        component=\"span\"\n                        color=\"secondary\">\n                {propertyKey}\n            </Typography>\n        </div>\n\n    </div>;\n\n}\n\nexport function ImportDataPreview<M extends Record<string, any>>({\n                                                                     importConfig,\n                                                                     properties,\n                                                                     propertiesOrder\n                                                                 }: {\n    importConfig: ImportConfig,\n    properties: ResolvedProperties<M>,\n    propertiesOrder: Extract<keyof M, string>[],\n}) {\n\n    useEffect(() => {\n        const mappedData = importConfig.importData.map(d => convertDataToEntity(d, importConfig.idColumn, importConfig.headersMapping, properties, \"TEMP_PATH\", importConfig.defaultValues));\n        console.log(\"Mapped data\", {\n            importConfig,\n            mappedData\n        })\n        importConfig.setEntities(mappedData);\n    }, []);\n\n    const selectionController = useSelectionController();\n\n    return <EntityCollectionTable\n        title={<div>\n            <Typography variant={\"subtitle2\"}>Imported data preview</Typography>\n            <Typography variant={\"caption\"}>Entities with the same id will be overwritten</Typography>\n        </div>}\n        tableController={{\n            data: importConfig.entities,\n            dataLoading: false,\n            noMoreToLoad: false\n        }}\n        endAdornment={<div className={\"h-12\"}/>}\n        filterable={false}\n        sortable={false}\n        selectionController={selectionController}\n        properties={properties}/>\n\n}\n\nfunction buildHeadersMappingFromData(objArr: object[], properties?: PropertiesOrBuilders<any>) {\n    const headersMapping: Record<string, string> = {};\n    objArr.filter(Boolean).forEach((obj) => {\n        Object.keys(obj).forEach((key) => {\n            // @ts-ignore\n            const child = obj[key];\n            if (typeof child === \"object\" && !Array.isArray(child)) {\n                const childProperty = properties?.[key];\n                const childProperties = childProperty && \"properties\" in childProperty ? childProperty.properties : undefined;\n                const childHeadersMapping = buildHeadersMappingFromData([child], childProperties);\n                Object.entries(childHeadersMapping).forEach(([subKey, mapping]) => {\n                    headersMapping[`${key}.${subKey}`] = `${key}.${mapping}`;\n                });\n            }\n\n            if (!properties) {\n                headersMapping[key] = key;\n            } else if (key in properties) {\n                headersMapping[key] = key;\n            } else {\n                const slug = slugify(key);\n                if (slug in properties) {\n                    headersMapping[key] = slug;\n                } else {\n                    headersMapping[key] = key;\n                }\n            }\n\n        });\n    });\n    return headersMapping;\n}\n","import {\n    ArrayValuesCount,\n    Entity,\n    EntityReference,\n    getArrayValuesCount,\n    getValueInPath,\n    ResolvedEntityCollection,\n    ResolvedProperties,\n    ResolvedProperty\n} from \"@firecms/core\";\n\ninterface Header {\n    key: string;\n    label: string;\n}\n\nexport function downloadExport<M extends Record<string, any>>(data: Entity<M>[],\n                                                              additionalData: Record<string, any>[] | undefined,\n                                                              collection: ResolvedEntityCollection<M>,\n                                                              flattenArrays: boolean,\n                                                              additionalHeaders: string[] | undefined,\n                                                              exportType: \"csv\" | \"json\",\n                                                              dateExportType: \"timestamp\" | \"string\"\n) {\n\n    console.debug(\"Downloading export\", { dataLength: data.length, collection, exportType, dateExportType });\n    const properties = collection.properties;\n\n    if (exportType === \"csv\") {\n        const arrayValuesCount = flattenArrays ? getArrayValuesCount(data.map(d => d.values)) : {};\n        const headers = getExportHeaders(properties, additionalHeaders, arrayValuesCount);\n        const exportableData = getCSVExportableData(data, additionalData, properties, headers, dateExportType);\n        const headersData = entryToCSVRow(headers.map(h => h.label));\n        const csvData = exportableData.map(entry => entryToCSVRow(entry));\n        downloadBlob([headersData, ...csvData], `${collection.name}.csv`, \"text/csv\");\n    } else {\n        const exportableData = getJsonExportableData(data, additionalData, properties, dateExportType);\n        const json = JSON.stringify(exportableData, null, 2);\n        downloadBlob([json], `${collection.name}.json`, \"application/json\");\n    }\n}\n\nexport function getCSVExportableData(data: Entity<any>[],\n                                     additionalData: Record<string, any>[] | undefined,\n                                     properties: ResolvedProperties,\n                                     headers: Header[],\n                                     dateExportType: \"timestamp\" | \"string\"\n) {\n\n    const mergedData: any[] = data.map(e => ({\n        id: e.id,\n        ...processValuesForExport(e.values, properties, \"csv\", dateExportType)\n    }));\n\n    if (additionalData) {\n        additionalData.forEach((additional, index) => {\n            mergedData[index] = { ...mergedData[index], ...additional };\n        });\n    }\n\n    return mergedData && mergedData.map((entry) => {\n        return headers.map((header) => getValueInPath(entry, header.key));\n    });\n}\n\nexport function getJsonExportableData(data: Entity<any>[],\n                                      additionalData: Record<string, any>[] | undefined,\n                                      properties: ResolvedProperties,\n                                      dateExportType: \"timestamp\" | \"string\"\n) {\n\n    const mergedData: any[] = data.map(e => ({\n        id: e.id,\n        ...processValuesForExport(e.values, properties, \"json\", dateExportType)\n    }));\n\n    if (additionalData) {\n        additionalData.forEach((additional, index) => {\n            mergedData[index] = { ...mergedData[index], ...additional };\n        });\n    }\n\n    return mergedData;\n}\n\nfunction getExportHeaders<M extends Record<string, any>>(properties: ResolvedProperties<M>,\n                                                         additionalHeaders: string[] | undefined,\n                                                         arrayValuesCount?: ArrayValuesCount): Header[] {\n\n    const headers: Header[] = [\n        { label: \"id\", key: \"id\" },\n        ...Object.entries(properties)\n            .flatMap(([childKey, property]) => {\n                if (arrayValuesCount && arrayValuesCount[childKey] > 1) {\n                    return Array.from({ length: arrayValuesCount[childKey] },\n                        (_, i) => getHeaders(property as ResolvedProperty, `${childKey}[${i}]`, \"\"))\n                        .flat();\n                } else {\n                    return getHeaders(property as ResolvedProperty, childKey, \"\");\n                }\n            })\n    ];\n\n    if (additionalHeaders) {\n        headers.push(...additionalHeaders.map(h => ({ label: h, key: h })));\n    }\n\n    return headers;\n}\n\n/**\n * Get headers for property. There could be more than one header per property\n * @param property\n * @param propertyKey\n * @param prefix\n */\nfunction getHeaders(property: ResolvedProperty, propertyKey: string, prefix = \"\"): Header[] {\n    const currentKey = prefix ? `${prefix}.${propertyKey}` : propertyKey;\n    if (property.dataType === \"map\" && property.properties) {\n        return Object.entries(property.properties)\n            .map(([childKey, p]) => getHeaders(p, childKey, currentKey))\n            .flat();\n    } else {\n        return [{ label: currentKey, key: currentKey }];\n    }\n}\n\nfunction processValueForExport(inputValue: any,\n                               property: ResolvedProperty,\n                               exportType: \"csv\" | \"json\",\n                               dateExportType: \"timestamp\" | \"string\"\n): any {\n\n    let value;\n    if (property.dataType === \"map\" && property.properties) {\n        value = processValuesForExport(inputValue, property.properties as ResolvedProperties, exportType, dateExportType);\n    } else if (property.dataType === \"array\") {\n        if (property.of && Array.isArray(inputValue)) {\n            if (Array.isArray(property.of)) {\n                value = property.of.map((p, i) => processValueForExport(inputValue[i], p, exportType, dateExportType));\n            } else if (property.of.dataType === \"map\") {\n                value = exportType === \"csv\"\n                    ? inputValue.map((e) => JSON.stringify(e))\n                    : inputValue.map((e) => processValueForExport(e, property.of as ResolvedProperty, exportType, dateExportType));\n                ;\n            } else {\n                value = inputValue.map((e) => processValueForExport(e, property.of as ResolvedProperty, exportType, dateExportType));\n            }\n        } else {\n            value = inputValue;\n        }\n    } else if (property.dataType === \"reference\" && inputValue && inputValue.isEntityReference && inputValue.isEntityReference()) {\n        const ref = inputValue ? inputValue as EntityReference : undefined;\n        value = ref ? ref.pathWithId : null;\n    } else if (property.dataType === \"date\" && inputValue instanceof Date) {\n        value = inputValue ? (dateExportType === \"timestamp\" ? inputValue.getTime() : inputValue.toISOString()) : null;\n    } else {\n        value = inputValue;\n    }\n\n    return value;\n}\n\nfunction processValuesForExport<M extends Record<string, any>>\n(inputValues: Record<keyof M, any>,\n properties: ResolvedProperties<M>,\n exportType: \"csv\" | \"json\",\n dateExportType: \"timestamp\" | \"string\"\n): Record<keyof M, any> {\n    const updatedValues = Object.entries(properties)\n        .map(([key, property]) => {\n            const inputValue = inputValues && (inputValues)[key];\n            const updatedValue = processValueForExport(inputValue, property as ResolvedProperty, exportType, dateExportType);\n            if (updatedValue === undefined) return {};\n            return ({ [key]: updatedValue });\n        })\n        .reduce((a, b) => ({ ...a, ...b }), {}) as Record<keyof M, any>;\n    return { ...inputValues, ...updatedValues };\n}\n\nfunction entryToCSVRow(entry: any[]) {\n    return entry\n        .map((v: any) => {\n            if (v === null || v === undefined) return \"\";\n            if (Array.isArray(v))\n                return \"\\\"\" + JSON.stringify(v).replaceAll(\"\\\"\", \"\\\\\\\"\") + \"\\\"\";\n            const s = String(v);\n            return \"\\\"\" + s.replaceAll(\"\\\"\", \"\\\"\\\"\") + \"\\\"\";\n        })\n        .join(\",\") + \"\\r\\n\";\n}\n\nexport function downloadBlob(content: BlobPart[], filename: string, contentType: string) {\n    const blob = new Blob(content, { type: contentType });\n    const url = URL.createObjectURL(blob);\n    const pom = document.createElement(\"a\");\n    pom.href = url;\n    pom.setAttribute(\"download\", filename);\n    pom.click();\n}\n","import React, { useCallback } from \"react\";\n\nimport {\n    CollectionActionsProps,\n    Entity,\n    EntityCollection,\n    ExportConfig,\n    resolveCollection,\n    ResolvedEntityCollection,\n    useCustomizationController,\n    useDataSource,\n    useFireCMSContext,\n    useNavigationController,\n    User\n} from \"@firecms/core\";\nimport {\n    Alert,\n    BooleanSwitchWithLabel,\n    Button,\n    CircularProgress,\n    cn,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    focusedMixin,\n    GetAppIcon,\n    IconButton,\n    Tooltip,\n    Typography,\n} from \"@firecms/ui\";\nimport { downloadExport } from \"./export\";\n\nconst DOCS_LIMIT = 500;\n\nexport function ExportCollectionAction<M extends Record<string, any>, UserType extends User>({\n                                                                                                 collection: inputCollection,\n                                                                                                 path: inputPath,\n                                                                                                 collectionEntitiesCount,\n                                                                                                 onAnalyticsEvent,\n                                                                                                 exportAllowed,\n                                                                                                 notAllowedView\n                                                                                             }: CollectionActionsProps<M, UserType, EntityCollection<M, any>> & {\n    exportAllowed?: (props: { collectionEntitiesCount: number, path: string, collection: EntityCollection }) => boolean;\n    notAllowedView?: React.ReactNode;\n    onAnalyticsEvent?: (event: string, params?: any) => void;\n}) {\n\n    const customizationController = useCustomizationController();\n\n    const exportConfig = typeof inputCollection.exportable === \"object\" ? inputCollection.exportable : undefined;\n\n    const dateRef = React.useRef<Date>(new Date());\n    const [flattenArrays, setFlattenArrays] = React.useState<boolean>(true);\n    const [exportType, setExportType] = React.useState<\"csv\" | \"json\">(\"csv\");\n    const [dateExportType, setDateExportType] = React.useState<\"timestamp\" | \"string\">(\"string\");\n\n    const context = useFireCMSContext<UserType>();\n    const dataSource = useDataSource();\n    const navigationController = useNavigationController();\n\n    const path = navigationController.resolveAliasesFrom(inputPath);\n\n    const canExport = !exportAllowed || exportAllowed({\n        collectionEntitiesCount,\n        path,\n        collection: inputCollection\n    });\n\n    const collection: ResolvedEntityCollection<M> = React.useMemo(() => resolveCollection({\n        collection: inputCollection,\n        path,\n        fields: customizationController.propertyConfigs\n    }), [inputCollection, path]);\n\n    const [dataLoading, setDataLoading] = React.useState<boolean>(false);\n    const [dataLoadingError, setDataLoadingError] = React.useState<Error | undefined>();\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = useCallback(() => {\n        setOpen(true);\n    }, [setOpen]);\n\n    const handleClose = useCallback(() => {\n        setOpen(false);\n    }, [setOpen]);\n\n    const fetchAdditionalFields = useCallback(async (entities: Entity<M>[]) => {\n\n        const additionalExportFields = exportConfig?.additionalFields;\n        const additionalFields = collection.additionalFields;\n\n        const resolvedExportColumnsValues: Record<string, any>[] = additionalExportFields\n            ? await Promise.all(entities.map(async (entity) => {\n                return (await Promise.all(additionalExportFields.map(async (column) => {\n                    return {\n                        [column.key]: await column.builder({\n                            entity,\n                            context\n                        })\n                    };\n                }))).reduce((a, b) => ({ ...a, ...b }), {});\n            }))\n            : [];\n\n        const resolvedColumnsValues: Record<string, any>[] = additionalFields\n            ? await Promise.all(entities.map(async (entity) => {\n                return (await Promise.all(additionalFields\n                    .map(async (field) => {\n                        if (!field.value)\n                            return {};\n                        return {\n                            [field.key]: await field.value({\n                                entity,\n                                context\n                            })\n                        };\n                    }))).reduce((a, b) => ({ ...a, ...b }), {});\n            }))\n            : [];\n        return [...resolvedExportColumnsValues, ...resolvedColumnsValues];\n    }, [exportConfig?.additionalFields]);\n\n    const doDownload = useCallback(async (collection: ResolvedEntityCollection<M>,\n                                          exportConfig: ExportConfig<any> | undefined) => {\n\n        onAnalyticsEvent?.(\"export_collection\", {\n            collection: collection.path\n        });\n        setDataLoading(true);\n        dataSource.fetchCollection<M>({\n            path,\n            collection\n        })\n            .then(async (data) => {\n                setDataLoadingError(undefined);\n                const additionalData = await fetchAdditionalFields(data);\n                const additionalHeaders = [\n                    ...exportConfig?.additionalFields?.map(column => column.key) ?? [],\n                    ...collection.additionalFields?.map(field => field.key) ?? []\n                ];\n                downloadExport(data, additionalData, collection, flattenArrays, additionalHeaders, exportType, dateExportType);\n                onAnalyticsEvent?.(\"export_collection_success\", {\n                    collection: collection.path\n                });\n            })\n            .catch((e) => {\n                console.error(\"Error loading export data\", e);\n                setDataLoadingError(e);\n            })\n            .finally(() => setDataLoading(false));\n\n    }, [onAnalyticsEvent, dataSource, path, fetchAdditionalFields, flattenArrays, exportType, dateExportType]);\n\n    const onOkClicked = useCallback(() => {\n        doDownload(collection, exportConfig);\n        handleClose();\n    }, [doDownload, collection, exportConfig, handleClose]);\n\n    return <>\n\n        <Tooltip title={\"Export\"}>\n            <IconButton color={\"primary\"} onClick={handleClickOpen}>\n                <GetAppIcon/>\n            </IconButton>\n        </Tooltip>\n\n        <Dialog\n            open={open}\n            onOpenChange={setOpen}\n            maxWidth={\"xl\"}>\n            <DialogContent className={\"flex flex-col gap-4 my-4\"}>\n\n                <Typography variant={\"h6\"}>Export data</Typography>\n\n                <div>Download the the content of this table as a CSV</div>\n\n                {collectionEntitiesCount > DOCS_LIMIT &&\n                    <Alert color={\"warning\"}>\n                        <div>\n                            This collections has a large number\n                            of documents ({collectionEntitiesCount}).\n                        </div>\n                    </Alert>}\n\n                <div className={\"flex flex-row gap-4\"}>\n                    <div className={\"p-4 flex flex-col\"}>\n                        <div className=\"flex items-center\">\n                            <input id=\"radio-csv\" type=\"radio\" value=\"csv\" name=\"exportType\"\n                                   checked={exportType === \"csv\"}\n                                   onChange={() => setExportType(\"csv\")}\n                                   className={cn(focusedMixin, \"w-4 text-primary-dark bg-gray-100 border-gray-300 dark:bg-gray-700 dark:border-gray-600\")}/>\n                            <label htmlFor=\"radio-csv\"\n                                   className=\"p-2 text-sm font-medium text-gray-900 dark:text-slate-300\">CSV</label>\n                        </div>\n                        <div className=\"flex items-center\">\n                            <input id=\"radio-json\" type=\"radio\" value=\"json\" name=\"exportType\"\n                                   checked={exportType === \"json\"}\n                                   onChange={() => setExportType(\"json\")}\n                                   className={cn(focusedMixin, \"w-4 text-primary-dark bg-gray-100 border-gray-300 dark:bg-gray-700 dark:border-gray-600\")}/>\n                            <label htmlFor=\"radio-json\"\n                                   className=\"p-2 text-sm font-medium text-gray-900 dark:text-slate-300\">JSON</label>\n                        </div>\n                    </div>\n\n                    <div className={\"p-4 flex flex-col\"}>\n                        <div className=\"flex items-center\">\n                            <input id=\"radio-timestamp\" type=\"radio\" value=\"timestamp\" name=\"dateExportType\"\n                                   checked={dateExportType === \"timestamp\"}\n                                   onChange={() => setDateExportType(\"timestamp\")}\n                                   className={cn(focusedMixin, \"w-4 text-primary-dark bg-gray-100 border-gray-300 dark:bg-gray-700 dark:border-gray-600\")}/>\n                            <label htmlFor=\"radio-timestamp\"\n                                   className=\"p-2 text-sm font-medium text-gray-900 dark:text-slate-300\">Dates as\n                                timestamps ({dateRef.current.getTime()})</label>\n                        </div>\n                        <div className=\"flex items-center\">\n                            <input id=\"radio-string\" type=\"radio\" value=\"string\" name=\"dateExportType\"\n                                   checked={dateExportType === \"string\"}\n                                   onChange={() => setDateExportType(\"string\")}\n                                   className={cn(focusedMixin, \"w-4 text-primary-dark bg-gray-100 border-gray-300 dark:bg-gray-700 dark:border-gray-600\")}/>\n                            <label htmlFor=\"radio-string\"\n                                   className=\"p-2 text-sm font-medium text-gray-900 dark:text-slate-300\">Dates as\n                                strings ({dateRef.current.toISOString()})</label>\n                        </div>\n                    </div>\n                </div>\n\n                <BooleanSwitchWithLabel\n                    size={\"small\"}\n                    disabled={exportType !== \"csv\"}\n                    value={flattenArrays}\n                    onValueChange={setFlattenArrays}\n                    label={\"Flatten arrays\"}/>\n\n                {!canExport && notAllowedView}\n\n            </DialogContent>\n\n            <DialogActions>\n\n                {dataLoading && <CircularProgress size={\"small\"}/>}\n\n                <Button onClick={handleClose}\n                        variant={\"text\"}>\n                    Cancel\n                </Button>\n\n                <Button variant=\"filled\"\n                        onClick={onOkClicked}\n                        disabled={dataLoading || !canExport}>\n                    Download\n                </Button>\n\n            </DialogActions>\n\n        </Dialog>\n\n    </>;\n}\n","import React, { useMemo } from \"react\";\nimport { EntityCollection, FireCMSPlugin } from \"@firecms/core\";\nimport { ImportCollectionAction } from \"./export_import/ImportCollectionAction\";\nimport { ExportCollectionAction } from \"./export_import/ExportCollectionAction\";\n\n/**\n *\n */\nexport function useImportExportPlugin(props?: ImportExportPluginProps): FireCMSPlugin<any, any, any, ImportExportPluginProps> {\n\n    return useMemo(() => ({\n        key: \"import_export\",\n        collectionView: {\n            CollectionActions: [ImportCollectionAction, ExportCollectionAction],\n            collectionActionsProps: props\n        }\n    }), [props]);\n}\n\nexport type ImportExportPluginProps = {\n    exportAllowed?: (props: ExportAllowedParams) => boolean;\n    notAllowedView: React.ReactNode;\n    onAnalyticsEvent?: (event: string, params?: any) => void;\n}\nexport type ExportAllowedParams = { collectionEntitiesCount: number, path: string, collection: EntityCollection };\n"],"names":["useImportConfig","inUse","setInUse","useState","defaultValues","setDefaultValues","idColumn","setIdColumn","importData","setImportData","entities","setEntities","headersMapping","setHeadersMapping","headingsOrder","setHeadingsOrder","originProperties","setOriginProperties","getXLSXHeaders","sheet","header","hdr","o","range","r","safeDecodeRange","rr","XLSX","cols","C","val","idx","i","cc","len","convertFileToJson","file","resolve","reject","reader","e","data","jsonData","propertiesOrder","workbook","worksheetName","worksheet","parsedData","headers","mapJsonParse","unflattenObject","obj","acc","key","flatObj","nestedObj","currentObj","keyParts","keyPart","mainPropertyName","index","convertDataToEntity","properties","path","flatObject","flattenEntry","mappedKeysObject","value","mappedKey","getIn","mappedProperty","getPropertyInPath","processedValue","processValueMapping","curr","values","mergeDeep","id","parent","prefixedKey","property","usedProperty","resolveProperty","from","inferTypeFromValue","to","isPropertyBuilder","v","entityId","EntityReference","getInferenceType","DataNewPropertiesMapping","importConfig","destinationProperties","buildPropertyView","jsxs","Fragment","jsx","IdSelectField","Table","TableHeader","TableCell","TableBody","importKey","propertyKey","originProperty","originDataType","TableRow","Typography","ChevronRightIcon","ExpandablePanel","getAllPropertyKeys","DefaultValuesField","newValues","setIn","currentKey","accumulatedKey","childProperties","onChange","Select","event","SelectItem","onValueChange","defaultValue","TextField","BooleanSwitchWithLabel","DateTimeField","dateValue","ImportFileUpload","onDataAdded","snackbarController","useSnackbarController","FileUpload","UploadIcon","files","error","ImportNewPropertyFieldPreview","onEditClick","includeName","onPropertyNameChanged","propertyTypeView","propertyConfigs","useCustomizationController","widget","getFieldConfig","ErrorBoundary","PropertyConfigBadge","IconButton","EditIcon","ImportSaveInProgress","collection","onImportSuccess","errorSaving","setErrorSaving","dataSource","useDataSource","savingRef","useRef","processedEntities","setProcessedEntities","save","saveDataBatch","useEffect","CenteredView","Button","CircularProgress","offset","batchSize","onProgressUpdate","batch","ImportCollectionAction","collectionEntitiesCount","onAnalyticsEvent","customizationController","open","setOpen","React","step","setStep","handleClickOpen","useCallback","handleClose","onMappingComplete","onPreviewComplete","buildEntityPropertiesFromData","buildHeadersMappingFromData","firstKey","resolvedCollection","resolveCollection","getPropertiesWithPropertiesOrder","propertiesAndLevel","getPropertiesAndLevel","Tooltip","FileUploadIcon","Dialog","DialogContent","isIdColumn","PropertyTreeSelect","newPropertyKey","newHeadersMapping","currentImportKey","currentPropertyKey","ImportDataPreview","importedCollection","DialogActions","internalIDValue","selectedPropertyKey","onPropertySelected","onIdSelected","selectedProperty","renderValue","PropertySelectEntry","onSelectValueChange","level","childKey","_","cn","defaultBorderMixin","mappedData","d","selectionController","useSelectionController","EntityCollectionTable","objArr","child","childProperty","childHeadersMapping","subKey","mapping","slug","slugify","downloadExport","additionalData","flattenArrays","additionalHeaders","exportType","dateExportType","arrayValuesCount","getArrayValuesCount","getExportHeaders","exportableData","getCSVExportableData","headersData","entryToCSVRow","h","csvData","entry","downloadBlob","getJsonExportableData","json","mergedData","processValuesForExport","additional","getValueInPath","getHeaders","prefix","p","processValueForExport","inputValue","ref","inputValues","updatedValues","updatedValue","a","b","content","filename","contentType","blob","url","pom","DOCS_LIMIT","ExportCollectionAction","inputCollection","inputPath","exportAllowed","notAllowedView","exportConfig","dateRef","setFlattenArrays","setExportType","setDateExportType","context","useFireCMSContext","useNavigationController","canExport","dataLoading","setDataLoading","dataLoadingError","setDataLoadingError","fetchAdditionalFields","additionalExportFields","additionalFields","resolvedExportColumnsValues","entity","column","resolvedColumnsValues","field","doDownload","onOkClicked","GetAppIcon","Alert","focusedMixin","useImportExportPlugin","props","useMemo"],"mappings":"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"}