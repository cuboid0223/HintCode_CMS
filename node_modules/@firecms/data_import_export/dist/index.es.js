import w, { useState as C, useRef as Re, useEffect as ye, useCallback as D, useMemo as Be } from "react";
import { jsxs as p, Fragment as $, jsx as i } from "react/jsx-runtime";
import { getPropertyInPath as B, mergeDeep as Je, resolveProperty as He, isPropertyBuilder as le, EntityReference as Ve, useSnackbarController as ve, useCustomizationController as G, getFieldConfig as we, ErrorBoundary as Ue, PropertyConfigBadge as Ce, useDataSource as De, resolveCollection as Oe, getPropertiesWithPropertiesOrder as ze, useSelectionController as We, EntityCollectionTable as Xe, slugify as Ge, getArrayValuesCount as Ye, getValueInPath as qe, useFireCMSContext as Qe, useNavigationController as Ze } from "@firecms/core";
import { Table as ce, TableHeader as de, TableCell as y, TableBody as pe, TableRow as ue, Typography as m, ChevronRightIcon as fe, ExpandablePanel as Ke, Select as Se, SelectItem as J, TextField as ee, BooleanSwitchWithLabel as Ne, DateTimeField as et, FileUpload as tt, UploadIcon as rt, IconButton as ne, EditIcon as nt, CenteredView as me, Button as _, CircularProgress as _e, Tooltip as ae, FileUploadIcon as at, Dialog as Ie, DialogContent as Ae, DialogActions as Te, cn as R, defaultBorderMixin as st, GetAppIcon as it, Alert as ot, focusedMixin as z } from "@firecms/ui";
import { inferTypeFromValue as lt, buildEntityPropertiesFromData as ct } from "@firecms/schema_inference";
import * as H from "xlsx";
import { getIn as Ee, setIn as dt } from "@firecms/formex";
const pt = () => {
  const [e, n] = C(!1), [a, t] = C({}), [r, s] = C(), [l, o] = C([]), [c, d] = C([]), [u, f] = C({}), [h, g] = C([]), [O, k] = C({});
  return {
    inUse: e,
    setInUse: n,
    idColumn: r,
    setIdColumn: s,
    entities: c,
    setEntities: d,
    importData: l,
    setImportData: o,
    headingsOrder: (h ?? []).length > 0 ? h : Object.keys(u),
    setHeadingsOrder: g,
    headersMapping: u,
    setHeadersMapping: f,
    originProperties: O,
    setOriginProperties: k,
    defaultValues: a,
    setDefaultValues: t
  };
};
function ut(e) {
  let n = 0;
  const a = [], t = {};
  if (e == null || e["!ref"] == null)
    return [];
  const r = t.range !== void 0 ? t.range : e["!ref"];
  let s;
  switch (t.header === 1 ? n = 1 : t.header === "A" ? n = 2 : Array.isArray(t.header) && (n = 3), typeof r) {
    case "string":
      s = he(r);
      break;
    case "number":
      s = he(e["!ref"]), s.s.r = r;
      break;
    default:
      s = r;
  }
  const l = H.utils.encode_row(s.s.r), o = new Array(s.e.c - s.s.c + 1);
  for (let c = s.s.c; c <= s.e.c; ++c) {
    o[c] = H.utils.encode_col(c);
    const d = e[o[c] + l];
    switch (n) {
      case 1:
        a.push(c);
        break;
      case 2:
        a.push(o[c]);
        break;
      case 3:
        a.push(t.header[c - s.s.c]);
        break;
      default:
        if (d === void 0)
          continue;
        a.push(H.utils.format_cell(d));
    }
  }
  return a;
}
function he(e) {
  const n = {
    s: {
      c: 0,
      r: 0
    },
    e: {
      c: 0,
      r: 0
    }
  };
  let a = 0, t = 0, r = 0;
  const s = e.length;
  for (a = 0; t < s && !((r = e.charCodeAt(t) - 64) < 1 || r > 26); ++t)
    a = 26 * a + r;
  for (n.s.c = --a, a = 0; t < s && !((r = e.charCodeAt(t) - 48) < 0 || r > 9); ++t)
    a = 10 * a + r;
  if (n.s.r = --a, t === s || e.charCodeAt(++t) === 58)
    return n.e.c = n.s.c, n.e.r = n.s.r, n;
  for (a = 0; t !== s && !((r = e.charCodeAt(t) - 64) < 1 || r > 26); ++t)
    a = 26 * a + r;
  for (n.e.c = --a, a = 0; t !== s && !((r = e.charCodeAt(t) - 48) < 0 || r > 9); ++t)
    a = 10 * a + r;
  return n.e.r = --a, n;
}
function ft(e) {
  return new Promise((n, a) => {
    if (e.type === "application/json") {
      console.debug("Converting JSON file to JSON", e.name);
      const t = new FileReader();
      t.onload = function(r) {
        try {
          const s = r.target?.result, l = JSON.parse(s);
          if (!Array.isArray(l))
            a(new Error("JSON file should contain an array of objects"));
          else {
            const o = l.length > 0 ? Object.keys(l[0]) : [];
            n({
              data: l,
              propertiesOrder: o
            });
          }
        } catch (s) {
          console.error("Error parsing JSON file", s), a(s);
        }
      }, t.readAsText(e);
    } else {
      console.debug("Converting Excel file to JSON", e.name);
      const t = new FileReader();
      t.onload = function(r) {
        const s = new Uint8Array(r.target?.result), l = H.read(s, {
          type: "array",
          codepage: 65001,
          cellDates: !0
        }), o = l.SheetNames[0], c = l.Sheets[o], d = H.utils.sheet_to_json(c), u = ut(c), h = d.map(mt).map(je);
        n({
          data: h,
          propertiesOrder: u
        });
      }, t.readAsArrayBuffer(e);
    }
  });
}
function mt(e) {
  return Object.keys(e).reduce((n, a) => {
    try {
      n[a] = JSON.parse(e[a]);
    } catch {
      n[a] = e[a];
    }
    return n;
  }, {});
}
function je(e) {
  return Object.keys(e).reduce((n, a) => {
    let t = n;
    const r = a.split(".");
    return r.forEach((s, l) => {
      if (/^[\w]+\[\d+\]$/.test(s)) {
        const o = s.slice(0, s.indexOf("[")), c = parseInt(s.slice(s.indexOf("[") + 1, s.indexOf("]")));
        t[o] || (t[o] = []), l !== r.length - 1 ? (t[o][c] = t[o][c] || {}, t = t[o][c]) : t[o][c] = e[a];
      } else
        l !== r.length - 1 ? (t[s] = t[s] || {}, t = t[s]) : t[s] = e[a];
    }), n;
  }, {});
}
function ht(e, n, a, t, r, s) {
  const l = Fe(e);
  n && delete l[n];
  const o = Object.entries(l).map(([u, f]) => {
    const h = Ee(a, u) ?? u, g = B(t, h);
    if (!g)
      return {};
    const O = te(f, g);
    return {
      [h]: O
    };
  }).reduce((u, f) => ({ ...u, ...f }), {}), c = Je(s ?? {}, je(o));
  let d = n ? e[n] : void 0;
  return typeof d == "string" ? d = d.trim() : typeof d == "number" || typeof d == "boolean" ? d = d.toString() : d instanceof Date ? d = d.toISOString() : d && "toString" in d && (d = d.toString()), {
    id: d,
    values: c,
    path: r
  };
}
function Fe(e, n = "") {
  return Object.keys(e).reduce((a, t) => {
    const r = n ? `${n}.${t}` : t;
    return typeof e[t] == "object" && !(e[t] instanceof Date) && e[t] !== null && !Array.isArray(e[t]) ? Object.assign(a, Fe(e[t], r)) : a[r] = e[t], a;
  }, {});
}
function te(e, n) {
  if (e === null)
    return null;
  if (n === void 0)
    return e;
  const a = He({
    propertyOrBuilder: n,
    propertyValue: e
  });
  if (a === null)
    return e;
  const t = lt(e), r = a.dataType;
  if (t === "array" && r === "array" && Array.isArray(e) && a.of && !le(a.of))
    return e.map((s) => te(s, a.of));
  if (t === "string" && r === "number" && typeof e == "string")
    return Number(e);
  if (t === "string" && r === "array" && typeof e == "string" && a.of && !le(a.of))
    return e.split(",").map((s) => te(s, a.of));
  if (t === "string" && r === "boolean")
    return e === "true";
  if (t === "number" && r === "boolean")
    return e === 1;
  if (t === "boolean" && r === "number")
    return e ? 1 : 0;
  if (t === "boolean" && r === "string")
    return e ? "true" : "false";
  if (t === "number" && r === "string" && typeof e == "number")
    return e.toString();
  if (t === "string" && r === "array" && typeof e == "string")
    return e.split(",").map((s) => s.trim());
  if (t === "string" && r === "date" && typeof e == "string")
    try {
      return new Date(e);
    } catch {
      return e;
    }
  else {
    if (t === "date" && r === "string")
      return e instanceof Date && e.toISOString();
    if (t === "number" && r === "date" && typeof e == "number")
      try {
        return new Date(e);
      } catch {
        return e;
      }
    else if (t === "string" && r === "reference" && typeof e == "string") {
      const s = e.split("/").slice(0, -1).join("/"), l = e.split("/").slice(-1)[0];
      return new Ve(l, s);
    } else {
      if (t === r)
        return e;
      if (t === "array" && r === "string" && Array.isArray(e))
        return e.join(",");
    }
  }
  return e;
}
function gt(e) {
  return typeof e == "number" ? "number" : typeof e == "string" ? "string" : typeof e == "boolean" ? "boolean" : e instanceof Date ? "date" : Array.isArray(e) ? "array" : "map";
}
function bt({
  importConfig: e,
  destinationProperties: n,
  buildPropertyView: a
}) {
  const t = e.headersMapping, r = e.headingsOrder, s = e.idColumn, l = e.originProperties;
  return /* @__PURE__ */ p($, { children: [
    /* @__PURE__ */ i(
      xt,
      {
        idColumn: s,
        headersMapping: t,
        onChange: (o) => e.setIdColumn(o ?? void 0)
      }
    ),
    /* @__PURE__ */ i("div", { className: "h-4" }),
    /* @__PURE__ */ p(ce, { style: {
      tableLayout: "fixed"
    }, children: [
      /* @__PURE__ */ p(de, { children: [
        /* @__PURE__ */ i(y, { header: !0, style: { width: "20%" }, children: "Column in file" }),
        /* @__PURE__ */ i(y, { header: !0 }),
        /* @__PURE__ */ i(y, { header: !0, style: { width: "75%" }, children: "Map to Property" })
      ] }),
      /* @__PURE__ */ i(pe, { children: n && r.map(
        (o) => {
          const c = t[o], d = t[o], u = c ? B(n, c) : null, f = B(l, o), h = f ? f.dataType === "array" && typeof f.of == "object" ? `${f.dataType} - ${f.of.dataType}` : f.dataType : void 0;
          return /* @__PURE__ */ p(ue, { style: { height: "90px" }, children: [
            /* @__PURE__ */ p(y, { style: { width: "20%" }, children: [
              /* @__PURE__ */ i(m, { variant: "body2", children: o }),
              f && /* @__PURE__ */ i(
                m,
                {
                  variant: "caption",
                  color: "secondary",
                  children: h
                }
              )
            ] }),
            /* @__PURE__ */ i(y, { children: /* @__PURE__ */ i(fe, {}) }),
            /* @__PURE__ */ i(
              y,
              {
                className: o === s ? "text-center" : void 0,
                style: { width: "75%" },
                children: a?.({
                  isIdColumn: o === s,
                  property: u,
                  propertyKey: d,
                  importKey: o
                })
              }
            )
          ] }, o);
        }
      ) })
    ] }),
    /* @__PURE__ */ p(Ke, { title: "Default values", initiallyExpanded: !1, className: "p-4 mt-4", children: [
      /* @__PURE__ */ i("div", { className: "text-sm text-slate-500 dark:text-slate-300 font-medium ml-3.5 mb-1", children: "You can select a default value for unmapped columns and empty values:" }),
      /* @__PURE__ */ p(ce, { style: {
        tableLayout: "fixed"
      }, children: [
        /* @__PURE__ */ p(de, { children: [
          /* @__PURE__ */ i(y, { header: !0, style: { width: "30%" }, children: "Property" }),
          /* @__PURE__ */ i(y, { header: !0 }),
          /* @__PURE__ */ i(y, { header: !0, style: { width: "65%" }, children: "Default value" })
        ] }),
        /* @__PURE__ */ i(pe, { children: n && ke(n).map(
          (o) => {
            const c = B(n, o);
            return typeof c != "object" || c === null || !["number", "string", "boolean", "map"].includes(c.dataType) ? null : /* @__PURE__ */ p(ue, { style: { height: "70px" }, children: [
              /* @__PURE__ */ i(y, { style: { width: "20%" }, children: /* @__PURE__ */ i(m, { variant: "body2", children: o }) }),
              /* @__PURE__ */ i(y, { children: /* @__PURE__ */ i(fe, {}) }),
              /* @__PURE__ */ i(
                y,
                {
                  className: o === s ? "text-center" : void 0,
                  style: { width: "75%" },
                  children: /* @__PURE__ */ i(
                    yt,
                    {
                      property: c,
                      defaultValue: Ee(e.defaultValues, o),
                      onValueChange: (d) => {
                        const u = dt(e.defaultValues, o, d);
                        e.setDefaultValues(u);
                      }
                    }
                  )
                }
              )
            ] }, o);
          }
        ) })
      ] })
    ] })
  ] });
}
function ke(e, n) {
  return Object.entries(e).reduce((a, [t, r]) => {
    const s = n ? `${n}.${t}` : t;
    if (typeof r != "function" && r.dataType === "map" && r.properties) {
      const l = ke(r.properties, s);
      return [...a, ...l];
    }
    return [...a, s];
  }, []);
}
function xt({
  idColumn: e,
  headersMapping: n,
  onChange: a
}) {
  return /* @__PURE__ */ i("div", { children: /* @__PURE__ */ p(
    Se,
    {
      size: "small",
      value: e ?? "",
      onChange: (t) => {
        const r = t.target.value;
        a(r === "__none__" ? null : r);
      },
      placeholder: "Autogenerate ID",
      renderValue: (t) => /* @__PURE__ */ i(m, { variant: "body2", children: t !== "__none__" ? t : "Autogenerate ID" }),
      label: "Column that will be used as ID for each document",
      children: [
        /* @__PURE__ */ i(J, { value: "__none__", children: "Autogenerate ID" }),
        Object.entries(n).map(([t, r]) => /* @__PURE__ */ i(J, { value: t, children: t }, t))
      ]
    }
  ) });
}
function yt({
  property: e,
  onValueChange: n,
  defaultValue: a
}) {
  return e.dataType === "string" ? /* @__PURE__ */ i(
    ee,
    {
      size: "small",
      placeholder: "Default value",
      value: a ?? "",
      onChange: (t) => n(t.target.value)
    }
  ) : e.dataType === "number" ? /* @__PURE__ */ i(
    ee,
    {
      size: "small",
      type: "number",
      value: a ?? "",
      placeholder: "Default value",
      onChange: (t) => n(t.target.value)
    }
  ) : e.dataType === "boolean" ? /* @__PURE__ */ i(
    Ne,
    {
      value: a ?? null,
      allowIndeterminate: !0,
      size: "small",
      onValueChange: (t) => n(t === null ? void 0 : t),
      label: a === void 0 ? "Do not set value" : a === !0 ? "Set value to true" : "Set value to false"
    }
  ) : e.dataType === "date" ? /* @__PURE__ */ i(
    et,
    {
      mode: e.mode ?? "date",
      size: "small",
      value: a ?? void 0,
      onChange: (t) => {
        n(t);
      },
      clearable: !0
    }
  ) : null;
}
function vt({ onDataAdded: e }) {
  const n = ve();
  return /* @__PURE__ */ i(
    tt,
    {
      accept: {
        "text/*": [".csv", ".xls", ".xlsx"],
        "application/vnd.ms-excel": [".xls", ".xlsx"],
        "application/msexcel": [".xls", ".xlsx"],
        "application/vnd.ms-office": [".xls", ".xlsx"],
        "application/xls": [".xls", ".xlsx"],
        "application/x-xls": [".xls", ".xlsx"],
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": [".xls", ".xlsx"],
        "application/json": [".json"]
      },
      preventDropOnDocument: !0,
      size: "small",
      maxFiles: 1,
      uploadDescription: /* @__PURE__ */ p($, { children: [
        /* @__PURE__ */ i(rt, {}),
        "Drag and drop a file here or click to upload"
      ] }),
      onFilesAdded: (a) => {
        a.length > 0 && ft(a[0]).then(({
          data: t,
          propertiesOrder: r
        }) => {
          e(t, r);
        }).catch((t) => {
          console.error("Error parsing file", t), n.open({
            type: "error",
            message: t.message
          });
        });
      }
    }
  );
}
function $t({
  propertyKey: e,
  property: n,
  onEditClick: a,
  includeName: t = !0,
  onPropertyNameChanged: r,
  propertyTypeView: s
}) {
  const { propertyConfigs: l } = G(), o = n ? we(n, l) : null;
  return /* @__PURE__ */ i(Ue, { children: /* @__PURE__ */ p(
    "div",
    {
      className: "flex flex-row w-full items-center",
      children: [
        /* @__PURE__ */ i("div", { className: "mx-4", children: s ?? /* @__PURE__ */ i(Ce, { propertyConfig: o ?? void 0 }) }),
        /* @__PURE__ */ i("div", { className: "w-full flex flex-col grow", children: /* @__PURE__ */ p("div", { className: "flex flex-row items-center gap-2", children: [
          t && /* @__PURE__ */ i(
            ee,
            {
              size: "small",
              className: "text-base grow",
              value: n?.name ?? "",
              onChange: (c) => {
                r && e && r(e, c.target.value);
              }
            }
          ),
          /* @__PURE__ */ i(ne, { onClick: a, size: "small", children: /* @__PURE__ */ i(nt, { size: "small" }) })
        ] }) })
      ]
    }
  ) });
}
function wt({
  path: e,
  importConfig: n,
  collection: a,
  onImportSuccess: t
}) {
  const [r, s] = C(void 0), l = De(), o = Re(!1), [c, d] = C(0);
  function u() {
    o.current || (o.current = !0, Pe(
      l,
      a,
      e,
      n.entities,
      0,
      25,
      d
    ).then(() => {
      t(a), o.current = !1;
    }).catch((f) => {
      s(f), o.current = !1;
    }));
  }
  return ye(() => {
    u();
  }, []), r ? /* @__PURE__ */ p(me, { className: "flex flex-col gap-4 items-center", children: [
    /* @__PURE__ */ i(m, { variant: "h6", children: "Error saving data" }),
    /* @__PURE__ */ i(m, { variant: "body2", color: "error", children: r.message }),
    /* @__PURE__ */ i(
      _,
      {
        onClick: u,
        variant: "outlined",
        children: "Retry"
      }
    )
  ] }) : /* @__PURE__ */ p(me, { className: "flex flex-col gap-4 items-center", children: [
    /* @__PURE__ */ i(_e, {}),
    /* @__PURE__ */ i(m, { variant: "h6", children: "Saving data" }),
    /* @__PURE__ */ p(m, { variant: "body2", children: [
      c,
      "/",
      n.entities.length,
      " entities saved"
    ] }),
    /* @__PURE__ */ i(m, { variant: "caption", children: "Do not close this tab or the import will be interrupted." })
  ] });
}
function Pe(e, n, a, t, r = 0, s = 25, l) {
  console.debug("Saving imported data", r, s);
  const o = t.slice(r, r + s);
  return Promise.all(o.map((c) => e.saveEntity({
    path: a,
    values: c.values,
    entityId: c.id,
    collection: n,
    status: "new"
  }))).then(() => r + s < t.length ? (l(r + s), Pe(e, n, a, t, r + s, s, l)) : (l(t.length), Promise.resolve()));
}
function Ct({
  collection: e,
  path: n,
  collectionEntitiesCount: a,
  onAnalyticsEvent: t
}) {
  const r = G(), s = ve(), [l, o] = w.useState(!1), [c, d] = w.useState("initial"), u = pt(), f = D(() => {
    o(!0), t?.("import_open"), d("initial");
  }, [t]), h = D(() => {
    o(!1);
  }, [o]), g = D(() => {
    t?.("import_mapping_complete"), d("preview");
  }, [t]), O = D(() => {
    t?.("import_data_save"), d("import_data_saving");
  }, [t]), k = async (b) => {
    if (u.setImportData(b), b.length > 0) {
      const T = await ct(b, gt);
      u.setOriginProperties(T);
      const E = $e(b, e?.properties);
      u.setHeadersMapping(E);
      const j = Object.keys(E)?.[0];
      (j?.includes("id") || j?.includes("key")) && u.setIdColumn(j);
    }
    setTimeout(() => {
      t?.("import_data_added"), d("mapping");
    }, 100);
  }, I = Oe({
    collection: e,
    path: n,
    fields: r.propertyConfigs
  }), L = ze(I.properties, I.propertiesOrder), A = Object.entries(L).flatMap(([b, T]) => Me(b, T, 0)), V = I.propertiesOrder ?? Object.keys(I.properties);
  return e.collectionGroup ? null : /* @__PURE__ */ p($, { children: [
    /* @__PURE__ */ i(ae, { title: "Import", children: /* @__PURE__ */ i(ne, { color: "primary", onClick: f, children: /* @__PURE__ */ i(at, {}) }) }),
    /* @__PURE__ */ p(
      Ie,
      {
        open: l,
        fullWidth: c === "preview",
        fullHeight: c === "preview",
        maxWidth: c === "initial" ? "lg" : "7xl",
        children: [
          /* @__PURE__ */ p(Ae, { className: "flex flex-col gap-4 my-4", fullHeight: c === "preview", children: [
            c === "initial" && /* @__PURE__ */ p($, { children: [
              /* @__PURE__ */ i(m, { variant: "h6", children: "Import data" }),
              /* @__PURE__ */ i(m, { variant: "body2", children: "Upload a CSV, Excel or JSON file and map it to your existing schema" }),
              /* @__PURE__ */ i(vt, { onDataAdded: k })
            ] }),
            c === "mapping" && /* @__PURE__ */ p($, { children: [
              /* @__PURE__ */ i(m, { variant: "h6", className: "ml-3.5", children: "Map fields" }),
              /* @__PURE__ */ i(
                bt,
                {
                  importConfig: u,
                  destinationProperties: L,
                  buildPropertyView: ({
                    isIdColumn: b,
                    property: T,
                    propertyKey: E,
                    importKey: j
                  }) => /* @__PURE__ */ i(
                    Dt,
                    {
                      selectedPropertyKey: E ?? "",
                      properties: L,
                      propertiesAndLevel: A,
                      isIdColumn: b,
                      onIdSelected: () => {
                        u.setIdColumn(j);
                      },
                      onPropertySelected: (P) => {
                        t?.("import_mapping_field_updated");
                        const Y = Object.entries(u.headersMapping).map(([x, M]) => M === P ? { [x]: null } : x === j ? { [x]: P } : { [x]: M }).reduce((x, M) => ({ ...x, ...M }), {});
                        u.setHeadersMapping(Y), P === u.idColumn && u.setIdColumn(void 0);
                      }
                    }
                  )
                }
              )
            ] }),
            c === "preview" && /* @__PURE__ */ i(
              Ot,
              {
                importConfig: u,
                properties: L,
                propertiesOrder: V
              }
            ),
            c === "import_data_saving" && u && /* @__PURE__ */ i(
              wt,
              {
                importConfig: u,
                collection: e,
                path: n,
                onImportSuccess: (b) => {
                  h(), s.open({
                    type: "info",
                    message: "Data imported successfully"
                  });
                }
              }
            )
          ] }),
          /* @__PURE__ */ p(Te, { children: [
            c === "mapping" && /* @__PURE__ */ i(
              _,
              {
                onClick: () => d("initial"),
                variant: "text",
                children: "Back"
              }
            ),
            c === "preview" && /* @__PURE__ */ i(
              _,
              {
                onClick: () => d("mapping"),
                variant: "text",
                children: "Back"
              }
            ),
            /* @__PURE__ */ i(
              _,
              {
                onClick: h,
                variant: "text",
                children: "Cancel"
              }
            ),
            c === "mapping" && /* @__PURE__ */ i(
              _,
              {
                variant: "filled",
                onClick: g,
                children: "Next"
              }
            ),
            c === "preview" && /* @__PURE__ */ i(
              _,
              {
                variant: "filled",
                onClick: O,
                children: "Save data"
              }
            )
          ] })
        ]
      }
    )
  ] });
}
const W = "__internal_id__";
function Dt({
  selectedPropertyKey: e,
  properties: n,
  onPropertySelected: a,
  onIdSelected: t,
  propertiesAndLevel: r,
  isIdColumn: s
}) {
  const l = e ? B(n, e) : null, o = D((d) => d === W ? /* @__PURE__ */ i(m, { variant: "body2", className: "p-4", children: "Use this column as ID" }) : !d || !l ? /* @__PURE__ */ i(m, { variant: "body2", color: "disabled", className: "p-4", children: "Do not import this property" }) : /* @__PURE__ */ i(
    ge,
    {
      propertyKey: d,
      property: l
    }
  ), [l]);
  return /* @__PURE__ */ p(
    Se,
    {
      value: s ? W : e ?? void 0,
      onValueChange: (d) => {
        d === W ? (t(), a(null)) : a(d === "__do_not_import" ? null : d);
      },
      renderValue: o,
      children: [
        /* @__PURE__ */ i(J, { value: "__do_not_import", children: /* @__PURE__ */ i(m, { variant: "body2", color: "disabled", className: "p-4", children: "Do not import this property" }) }),
        /* @__PURE__ */ i(J, { value: W, children: /* @__PURE__ */ i(m, { variant: "body2", className: "p-4", children: "Use this column as ID" }) }),
        r.map(({
          property: d,
          level: u,
          propertyKey: f
        }) => /* @__PURE__ */ i(
          J,
          {
            value: f,
            disabled: d.dataType === "map",
            children: /* @__PURE__ */ i(
              ge,
              {
                propertyKey: f,
                property: d,
                level: u
              }
            )
          },
          f
        ))
      ]
    }
  );
}
function Me(e, n, a) {
  const t = [];
  return t.push({
    property: n,
    level: a,
    propertyKey: e
  }), n.dataType === "map" && n.properties && Object.entries(n.properties).forEach(([r, s]) => {
    t.push(...Me(`${e}.${r}`, s, a + 1));
  }), t;
}
function ge({
  propertyKey: e,
  property: n,
  level: a = 0
}) {
  const { propertyConfigs: t } = G(), r = we(n, t);
  return /* @__PURE__ */ p(
    "div",
    {
      className: "flex flex-row w-full text-start items-center h-full",
      children: [
        new Array(a).fill(0).map((s, l) => /* @__PURE__ */ i("div", { className: R(st, "ml-8 border-l h-12") }, l)),
        /* @__PURE__ */ i("div", { className: "m-4", children: /* @__PURE__ */ i(ae, { title: r?.name, children: /* @__PURE__ */ i(Ce, { propertyConfig: r }) }) }),
        /* @__PURE__ */ p("div", { className: "flex flex-col flex-grow p-2 pl-2", children: [
          /* @__PURE__ */ i(
            m,
            {
              variant: "body1",
              component: "span",
              className: "flex-grow pr-2",
              children: n.name ? n.name : " "
            }
          ),
          /* @__PURE__ */ i(
            m,
            {
              className: " pr-2",
              variant: "body2",
              component: "span",
              color: "secondary",
              children: e
            }
          )
        ] })
      ]
    }
  );
}
function Ot({
  importConfig: e,
  properties: n,
  propertiesOrder: a
}) {
  ye(() => {
    const r = e.importData.map((s) => ht(s, e.idColumn, e.headersMapping, n, "TEMP_PATH", e.defaultValues));
    console.log("Mapped data", {
      importConfig: e,
      mappedData: r
    }), e.setEntities(r);
  }, []);
  const t = We();
  return /* @__PURE__ */ i(
    Xe,
    {
      title: /* @__PURE__ */ p("div", { children: [
        /* @__PURE__ */ i(m, { variant: "subtitle2", children: "Imported data preview" }),
        /* @__PURE__ */ i(m, { variant: "caption", children: "Entities with the same id will be overwritten" })
      ] }),
      tableController: {
        data: e.entities,
        dataLoading: !1,
        noMoreToLoad: !1
      },
      endAdornment: /* @__PURE__ */ i("div", { className: "h-12" }),
      filterable: !1,
      sortable: !1,
      selectionController: t,
      properties: n
    }
  );
}
function $e(e, n) {
  const a = {};
  return e.filter(Boolean).forEach((t) => {
    Object.keys(t).forEach((r) => {
      const s = t[r];
      if (typeof s == "object" && !Array.isArray(s)) {
        const l = n?.[r], o = l && "properties" in l ? l.properties : void 0, c = $e([s], o);
        Object.entries(c).forEach(([d, u]) => {
          a[`${r}.${d}`] = `${r}.${u}`;
        });
      }
      if (!n)
        a[r] = r;
      else if (r in n)
        a[r] = r;
      else {
        const l = Ge(r);
        l in n ? a[r] = l : a[r] = r;
      }
    });
  }), a;
}
function St(e, n, a, t, r, s, l) {
  console.debug("Downloading export", { dataLength: e.length, collection: a, exportType: s, dateExportType: l });
  const o = a.properties;
  if (s === "csv") {
    const c = t ? Ye(e.map((g) => g.values)) : {}, d = It(o, r, c), u = Nt(e, n, o, d, l), f = be(d.map((g) => g.label)), h = u.map((g) => be(g));
    xe([f, ...h], `${a.name}.csv`, "text/csv");
  } else {
    const c = _t(e, n, o, l), d = JSON.stringify(c, null, 2);
    xe([d], `${a.name}.json`, "application/json");
  }
}
function Nt(e, n, a, t, r) {
  const s = e.map((l) => ({
    id: l.id,
    ...se(l.values, a, "csv", r)
  }));
  return n && n.forEach((l, o) => {
    s[o] = { ...s[o], ...l };
  }), s && s.map((l) => t.map((o) => qe(l, o.key)));
}
function _t(e, n, a, t) {
  const r = e.map((s) => ({
    id: s.id,
    ...se(s.values, a, "json", t)
  }));
  return n && n.forEach((s, l) => {
    r[l] = { ...r[l], ...s };
  }), r;
}
function It(e, n, a) {
  const t = [
    { label: "id", key: "id" },
    ...Object.entries(e).flatMap(([r, s]) => a && a[r] > 1 ? Array.from(
      { length: a[r] },
      (l, o) => re(s, `${r}[${o}]`, "")
    ).flat() : re(s, r, ""))
  ];
  return n && t.push(...n.map((r) => ({ label: r, key: r }))), t;
}
function re(e, n, a = "") {
  const t = a ? `${a}.${n}` : n;
  return e.dataType === "map" && e.properties ? Object.entries(e.properties).map(([r, s]) => re(s, r, t)).flat() : [{ label: t, key: t }];
}
function X(e, n, a, t) {
  let r;
  if (n.dataType === "map" && n.properties)
    r = se(e, n.properties, a, t);
  else if (n.dataType === "array")
    n.of && Array.isArray(e) ? Array.isArray(n.of) ? r = n.of.map((s, l) => X(e[l], s, a, t)) : n.of.dataType === "map" ? r = a === "csv" ? e.map((s) => JSON.stringify(s)) : e.map((s) => X(s, n.of, a, t)) : r = e.map((s) => X(s, n.of, a, t)) : r = e;
  else if (n.dataType === "reference" && e && e.isEntityReference && e.isEntityReference()) {
    const s = e || void 0;
    r = s ? s.pathWithId : null;
  } else
    n.dataType === "date" && e instanceof Date ? r = e ? t === "timestamp" ? e.getTime() : e.toISOString() : null : r = e;
  return r;
}
function se(e, n, a, t) {
  const r = Object.entries(n).map(([s, l]) => {
    const o = e && e[s], c = X(o, l, a, t);
    return c === void 0 ? {} : { [s]: c };
  }).reduce((s, l) => ({ ...s, ...l }), {});
  return { ...e, ...r };
}
function be(e) {
  return e.map((n) => n == null ? "" : Array.isArray(n) ? '"' + JSON.stringify(n).replaceAll('"', '\\"') + '"' : '"' + String(n).replaceAll('"', '""') + '"').join(",") + `\r
`;
}
function xe(e, n, a) {
  const t = new Blob(e, { type: a }), r = URL.createObjectURL(t), s = document.createElement("a");
  s.href = r, s.setAttribute("download", n), s.click();
}
const At = 500;
function Tt({
  collection: e,
  path: n,
  collectionEntitiesCount: a,
  onAnalyticsEvent: t,
  exportAllowed: r,
  notAllowedView: s
}) {
  const l = G(), o = typeof e.exportable == "object" ? e.exportable : void 0, c = w.useRef(/* @__PURE__ */ new Date()), [d, u] = w.useState(!0), [f, h] = w.useState("csv"), [g, O] = w.useState("string"), k = Qe(), I = De(), A = Ze().resolveAliasesFrom(n), V = !r || r({
    collectionEntitiesCount: a,
    path: A,
    collection: e
  }), b = w.useMemo(() => Oe({
    collection: e,
    path: A,
    fields: l.propertyConfigs
  }), [e, A]), [T, E] = w.useState(!1), [j, P] = w.useState(), [Y, x] = w.useState(!1), M = D(() => {
    x(!0);
  }, [x]), q = D(() => {
    x(!1);
  }, [x]), ie = D(async (S) => {
    const U = o?.additionalFields, N = b.additionalFields, Q = U ? await Promise.all(S.map(async (F) => (await Promise.all(U.map(async (v) => ({
      [v.key]: await v.builder({
        entity: F,
        context: k
      })
    })))).reduce((v, K) => ({ ...v, ...K }), {}))) : [], Z = N ? await Promise.all(S.map(async (F) => (await Promise.all(N.map(async (v) => v.value ? {
      [v.key]: await v.value({
        entity: F,
        context: k
      })
    } : {}))).reduce((v, K) => ({ ...v, ...K }), {}))) : [];
    return [...Q, ...Z];
  }, [o?.additionalFields]), oe = D(async (S, U) => {
    t?.("export_collection", {
      collection: S.path
    }), E(!0), I.fetchCollection({
      path: A,
      collection: S
    }).then(async (N) => {
      P(void 0);
      const Q = await ie(N), Z = [
        ...U?.additionalFields?.map((F) => F.key) ?? [],
        ...S.additionalFields?.map((F) => F.key) ?? []
      ];
      St(N, Q, S, d, Z, f, g), t?.("export_collection_success", {
        collection: S.path
      });
    }).catch((N) => {
      console.error("Error loading export data", N), P(N);
    }).finally(() => E(!1));
  }, [t, I, A, ie, d, f, g]), Le = D(() => {
    oe(b, o), q();
  }, [oe, b, o, q]);
  return /* @__PURE__ */ p($, { children: [
    /* @__PURE__ */ i(ae, { title: "Export", children: /* @__PURE__ */ i(ne, { color: "primary", onClick: M, children: /* @__PURE__ */ i(it, {}) }) }),
    /* @__PURE__ */ p(
      Ie,
      {
        open: Y,
        onOpenChange: x,
        maxWidth: "xl",
        children: [
          /* @__PURE__ */ p(Ae, { className: "flex flex-col gap-4 my-4", children: [
            /* @__PURE__ */ i(m, { variant: "h6", children: "Export data" }),
            /* @__PURE__ */ i("div", { children: "Download the the content of this table as a CSV" }),
            a > At && /* @__PURE__ */ i(ot, { color: "warning", children: /* @__PURE__ */ p("div", { children: [
              "This collections has a large number of documents (",
              a,
              ")."
            ] }) }),
            /* @__PURE__ */ p("div", { className: "flex flex-row gap-4", children: [
              /* @__PURE__ */ p("div", { className: "p-4 flex flex-col", children: [
                /* @__PURE__ */ p("div", { className: "flex items-center", children: [
                  /* @__PURE__ */ i(
                    "input",
                    {
                      id: "radio-csv",
                      type: "radio",
                      value: "csv",
                      name: "exportType",
                      checked: f === "csv",
                      onChange: () => h("csv"),
                      className: R(z, "w-4 text-primary-dark bg-gray-100 border-gray-300 dark:bg-gray-700 dark:border-gray-600")
                    }
                  ),
                  /* @__PURE__ */ i(
                    "label",
                    {
                      htmlFor: "radio-csv",
                      className: "p-2 text-sm font-medium text-gray-900 dark:text-slate-300",
                      children: "CSV"
                    }
                  )
                ] }),
                /* @__PURE__ */ p("div", { className: "flex items-center", children: [
                  /* @__PURE__ */ i(
                    "input",
                    {
                      id: "radio-json",
                      type: "radio",
                      value: "json",
                      name: "exportType",
                      checked: f === "json",
                      onChange: () => h("json"),
                      className: R(z, "w-4 text-primary-dark bg-gray-100 border-gray-300 dark:bg-gray-700 dark:border-gray-600")
                    }
                  ),
                  /* @__PURE__ */ i(
                    "label",
                    {
                      htmlFor: "radio-json",
                      className: "p-2 text-sm font-medium text-gray-900 dark:text-slate-300",
                      children: "JSON"
                    }
                  )
                ] })
              ] }),
              /* @__PURE__ */ p("div", { className: "p-4 flex flex-col", children: [
                /* @__PURE__ */ p("div", { className: "flex items-center", children: [
                  /* @__PURE__ */ i(
                    "input",
                    {
                      id: "radio-timestamp",
                      type: "radio",
                      value: "timestamp",
                      name: "dateExportType",
                      checked: g === "timestamp",
                      onChange: () => O("timestamp"),
                      className: R(z, "w-4 text-primary-dark bg-gray-100 border-gray-300 dark:bg-gray-700 dark:border-gray-600")
                    }
                  ),
                  /* @__PURE__ */ p(
                    "label",
                    {
                      htmlFor: "radio-timestamp",
                      className: "p-2 text-sm font-medium text-gray-900 dark:text-slate-300",
                      children: [
                        "Dates as timestamps (",
                        c.current.getTime(),
                        ")"
                      ]
                    }
                  )
                ] }),
                /* @__PURE__ */ p("div", { className: "flex items-center", children: [
                  /* @__PURE__ */ i(
                    "input",
                    {
                      id: "radio-string",
                      type: "radio",
                      value: "string",
                      name: "dateExportType",
                      checked: g === "string",
                      onChange: () => O("string"),
                      className: R(z, "w-4 text-primary-dark bg-gray-100 border-gray-300 dark:bg-gray-700 dark:border-gray-600")
                    }
                  ),
                  /* @__PURE__ */ p(
                    "label",
                    {
                      htmlFor: "radio-string",
                      className: "p-2 text-sm font-medium text-gray-900 dark:text-slate-300",
                      children: [
                        "Dates as strings (",
                        c.current.toISOString(),
                        ")"
                      ]
                    }
                  )
                ] })
              ] })
            ] }),
            /* @__PURE__ */ i(
              Ne,
              {
                size: "small",
                disabled: f !== "csv",
                value: d,
                onValueChange: u,
                label: "Flatten arrays"
              }
            ),
            !V && s
          ] }),
          /* @__PURE__ */ p(Te, { children: [
            T && /* @__PURE__ */ i(_e, { size: "small" }),
            /* @__PURE__ */ i(
              _,
              {
                onClick: q,
                variant: "text",
                children: "Cancel"
              }
            ),
            /* @__PURE__ */ i(
              _,
              {
                variant: "filled",
                onClick: Le,
                disabled: T || !V,
                children: "Download"
              }
            )
          ] })
        ]
      }
    )
  ] });
}
function Lt(e) {
  return Be(() => ({
    key: "import_export",
    collectionView: {
      CollectionActions: [Ct, Tt],
      collectionActionsProps: e
    }
  }), [e]);
}
export {
  bt as DataNewPropertiesMapping,
  vt as ImportFileUpload,
  $t as ImportNewPropertyFieldPreview,
  wt as ImportSaveInProgress,
  ht as convertDataToEntity,
  ft as convertFileToJson,
  Fe as flattenEntry,
  gt as getInferenceType,
  te as processValueMapping,
  je as unflattenObject,
  pt as useImportConfig,
  Lt as useImportExportPlugin
};
//# sourceMappingURL=index.es.js.map
