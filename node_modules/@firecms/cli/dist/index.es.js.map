{"version":3,"file":"index.es.js","sources":["../src/common.ts","../src/util/done_html.ts","../src/commands/auth.ts","../src/commands/deploy.ts","../src/commands/init.ts","../src/cli.ts"],"sourcesContent":["\n// export const DEFAULT_SERVER = \"http://localhost:5001/firecms-dev-2da42/europe-west3/api\"; // Local\nexport const DEFAULT_SERVER_DEV = \"https://api-kdoe6pj3qq-ey.a.run.app\";\nexport const DEFAULT_SERVER = \"https://api-drplyi3b6q-ey.a.run.app\";\n","export const done_html = `<html lang=\"en\">\n<head>\n    <style>\n        html, body {\n            font-family: Rubik, sans-serif;\n            height: 100%;\n            margin: 0;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n        }\n    </style>\n    <link rel=\"stylesheet\"\n          href=\"https://fonts.googleapis.com/css?family=Rubik\">\n</head>\n\n<body>\n\n<img src=\"https://firecms.co/img/firecms_logo.svg\" alt=\"FireCMS logo\" width=\"100\" height=\"100\">\n\n<h2>FireCMS CLI</h2>\n\n<p style=\"margin: 0;\">You can now close this tab</p>\n\n<script>\n\n    setTimeout(function () {\n        window.close();\n    }, 3000);\n\n</script>\n\n</body>\n</html>\n\n`;\n","import open from \"open\";\n\nimport fs from \"fs\";\nimport http from \"http\";\nimport path from \"path\";\nimport axios from \"axios\";\nimport { DEFAULT_SERVER, DEFAULT_SERVER_DEV } from \"../common\";\nimport * as os from \"os\";\nimport EventEmitter from \"events\";\nimport chalk from \"chalk\";\nimport { done_html } from \"../util/done_html\";\n\nimport https from \"https\";\n\nimport url from \"url\";\n\nexport async function getCurrentUser(env: \"prod\" | \"dev\", debug: boolean): Promise<object | null> {\n    if (debug) console.log(\"Getting current user\");\n    const userCredential = await getTokens(env, debug);\n    if (!userCredential) {\n        return null;\n    }\n    if (debug) console.log(\"userCredential\", userCredential);\n    return parseJwt(userCredential[\"id_token\"]);\n}\n\nexport async function login(env: \"prod\" | \"dev\", debug: boolean) {\n    const emitter = new EventEmitter();\n    const currentUser = await getCurrentUser(env, debug);\n    if (currentUser) {\n        console.log(\"You are already logged in as\", currentUser[\"email\"]);\n        console.log(`Run ${chalk.bold(\"firecms logout\")} to sign out`);\n        return;\n    }\n\n    const activeConnections: Set<any> = new Set();\n    const server = http.createServer(async (req, res) => {\n        res.setHeader(\"Cache-Control\", \"no-store, max-age=0\");\n\n        if (req.url === \"/\") {\n            const authURL = await getAuthURL(env);\n            console.log(\"Opening browser to\", authURL);\n            res.writeHead(301, { \"Location\": authURL });\n            res.end();\n        }\n\n        if (req.url.startsWith(\"/oauth2callback\")) {\n            let q = url.parse(req.url, true).query;\n\n            if (q.error) {\n                console.log(\"Error:\" + q.error);\n                server.close();\n                throw q.error;\n            } else {\n                // return the imported html\n                res.writeHead(200);\n                res.end(done_html, () => req.socket.end());\n                emitter.emit(\"tokensReady\", q.code);\n\n            }\n        }\n\n    }).listen(3000);\n\n    server.on(\"connection\", (socket) => {\n        activeConnections.add(socket);\n        socket.on(\"close\", () => {\n            activeConnections.delete(socket);\n        });\n    });\n\n    open(\"http://localhost:3000\");\n\n    return new Promise(async (resolve, reject) => {\n        emitter.once(\"tokensReady\", async (code) => {\n            // Handle the OAuth 2.0 server response\n            const tokens = await exchangeCodeForToken(code, env);\n            if (!tokens) {\n                return reject(\"Token could not be obtained\");\n            } else {\n                console.log(\"You have successfully logged in.\");\n                saveTokens(tokens, env);\n                resolve(tokens);\n            }\n            for (const socket of activeConnections) {\n                socket.destroy();\n            }\n            server.close();\n        })\n    });\n}\n\n// save this token to a file in .firecms or program data\nfunction saveTokens(tokens: object, env: \"prod\" | \"dev\") {\n    const dirPath = path.join(os.homedir(), \".firecms\");\n\n    if (!fs.existsSync(dirPath)) {\n        fs.mkdirSync(dirPath);\n    }\n\n    const filePath = path.join(dirPath, (env === \"dev\" ? \"staging.\" : \"\") + \"tokens.json\");\n\n    const data = JSON.stringify(tokens);\n\n    fs.writeFile(filePath, data, (error) => {\n        if (error) throw error;\n    });\n\n}\n\nexport async function logout(env: \"prod\" | \"dev\", debug: boolean) {\n\n    const userCredential = await getTokens(env, debug);\n    if (!userCredential) {\n        console.log(\"⚠️ You are not logged in\");\n        console.log(`Run ${chalk.red.bold(\"firecms login\")} to log in`);\n        return;\n    }\n\n    revokeToken(userCredential[\"access_token\"], env);\n\n    const dirPath = path.join(os.homedir(), \".firecms\");\n    const filePath = path.join(dirPath, (env === \"dev\" ? \"staging.\" : \"\") + \"tokens.json\");\n    fs.unlinkSync(filePath);\n    console.log(\"You have successfully logged out.\")\n}\n\nexport async function getTokens(env: \"prod\" | \"dev\", debug: boolean): Promise<object | null> {\n    const dirPath = path.join(os.homedir(), \".firecms\");\n    const filePath = path.join(dirPath, (env === \"dev\" ? \"staging.\" : \"\") + \"tokens.json\");\n\n    if (!fs.existsSync(filePath)) {\n        return null;\n    }\n\n    return new Promise((resolve, reject) => {\n        fs.readFile(filePath, \"utf8\", (err, data) => {\n            if (debug) console.log(\"getTokens\", { data });\n            if (err) {\n                reject(err);\n                return;\n            }\n            const result = JSON.parse(data);\n            if (result[\"env\"] === \"dev\") {\n                console.log(\"Using DEV environment\");\n            }\n            resolve(result);\n        });\n    });\n}\n\nfunction revokeToken(accessToken: string, env: \"prod\" | \"dev\") {\n    // Build the string for the POST request\n    let postData = \"token=\" + accessToken;\n\n    // Options for POST request to Google's OAuth 2.0 server to revoke a token\n    let postOptions = {\n        host: \"oauth2.googleapis.com\",\n        port: \"443\",\n        path: \"/revoke\",\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            \"Content-Length\": Buffer.byteLength(postData)\n        }\n    };\n\n    // Set up the request\n    const postReq = https.request(postOptions, function (res) {\n        res.setEncoding(\"utf8\");\n        res.on(\"data\", d => {\n            // console.log(\"Response: \" + d);\n        });\n    });\n\n    postReq.on(\"error\", error => {\n        console.log(error)\n    });\n\n    // Post the request with data\n    postReq.write(postData);\n    postReq.end();\n}\n\nexport function parseJwt(token: string): object {\n    if (!token) {\n        throw new Error(\"No JWT token\");\n    }\n    const base64Url = token.split(\".\")[1];\n    const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    const buffer = Buffer.from(base64, \"base64\");\n    // console.log({\n    //     base64Url,\n    //     base64,\n    //     buffer: buffer.toString()\n    // });\n    // const uri = buffer.toString().split(\"\").map(function (c) {\n    //     return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n    // }).join(\"\");\n    // console.log({ uri });\n    // const jsonPayload = decodeURIComponent(uri);\n\n    return JSON.parse(buffer.toString());\n}\n\nasync function getAuthURL(env: \"prod\" | \"dev\") {\n    const server = env === \"prod\" ? DEFAULT_SERVER : DEFAULT_SERVER_DEV;\n\n    const response = await axios.get(server + \"/cli/generate_auth_url\", {\n        params: {\n            redirect_uri: \"http://localhost:3000/oauth2callback/\"\n        }\n    });\n\n    return response.data.data;\n}\n\nexport async function refreshCredentials(env: \"dev\" | \"prod\", credentials?: object, onErr?: (e: any) => void) {\n    if (credentials) {\n        const expiryDate = new Date(credentials[\"expiry_date\"]);\n        const now = new Date();\n        if (expiryDate.getTime() > now.getTime()) {\n            return credentials;\n        }\n    }\n    try {\n        const server = env === \"prod\" ? DEFAULT_SERVER : DEFAULT_SERVER_DEV;\n\n        const response = await axios.post(server + \"/cli/refresh_access_token\", credentials);\n        const newCredentials = response.data.data;\n        saveTokens({\n            ...credentials, ...newCredentials,\n            env\n        }, env);\n        return newCredentials;\n    } catch (error) {\n        if (onErr) onErr(error);\n        await logout(env, false);\n        console.error(\"\\nError refreshing credentials\", error.response?.status, error.response?.data?.message);\n        console.log(`⚠️ Run ${chalk.red.bold(\"firecms login\")} to log in again`);\n        return null;\n    }\n}\n\nasync function exchangeCodeForToken(code: string, env: \"prod\" | \"dev\") {\n    const server = env === \"prod\" ? DEFAULT_SERVER : DEFAULT_SERVER_DEV;\n\n    const response = await axios.get(server + \"/cli/exchange_code_for_token\", {\n        params: {\n            code\n        }\n    });\n\n    return response.data.data;\n}\n\n\n\n","import FormData from \"form-data\";\nimport * as os from \"os\";\nimport * as path from \"path\";\nimport fs from \"fs\";\nimport axios from \"axios\";\nimport { exec } from \"child_process\";\nimport zipFolder from \"zip-folder\";\nimport { getCurrentUser, getTokens, refreshCredentials } from \"./auth\";\nimport { DEFAULT_SERVER, DEFAULT_SERVER_DEV } from \"../common\";\nimport ora from \"ora\";\nimport chalk from \"chalk\";\n\nexport async function deploy(projectId: string, env: \"prod\" | \"dev\", debug: boolean) {\n    const currentUser = await getCurrentUser(env, debug);\n    if (!currentUser) {\n        console.log(\"⚠️ You are not logged in\");\n        console.log(`Run ${chalk.red.bold(\"firecms login\")} to log in`);\n        return;\n    }\n    console.log(\"Starting deploy\");\n    const zipFilePath = await createZipFromBuild();\n    await uploadZip(projectId, zipFilePath, env, debug);\n}\n\nexport function build() {\n\n    exec(\"yarn build\", (err, stdout, stderr) => {\n        if (err) {\n            // Node couldn't execute the command\n            return console.error(`exec error: ${err}`);\n        }\n        // The output of the command is passed in stdout and stderr\n        console.log(`stdout: ${stdout}`);\n        console.error(`stderr: ${stderr}`);\n    });\n}\n\nexport async function createZipFromBuild(): Promise<string> {\n    return new Promise((resolve, reject) => {\n        const tmpdir = os.tmpdir();\n        const destFile = path.join(tmpdir, `firecms_build.zip`);\n        // const destFile = path.join(tmpdir, `${crypto.randomUUID()}.zip`);\n        zipFolder(\"./dist/assets\", destFile, function (err) {\n            if (err) {\n                reject(err);\n            } else {\n                resolve(destFile);\n            }\n        });\n    })\n}\n\nexport async function uploadZip(projectId: string, zipFilePath: string, env: \"prod\" | \"dev\", debug: boolean) {\n\n    if (env === \"dev\") {\n        console.log(\"!!! Uploading to dev server\");\n    }\n    const spinner = ora(\"Uploading build of project \" + projectId).start();\n\n    const tokens = await refreshCredentials(env, await getTokens(env, debug));\n\n    const form = new FormData();\n\n    // Check if the file exists\n    if (!fs.existsSync(zipFilePath)) {\n        console.error(`File ${zipFilePath} does not exist`);\n        return;\n    }\n\n    form.append(\"zip\", fs.createReadStream(zipFilePath), \"file.zip\");\n\n    try {\n        const server = env === \"prod\" ? DEFAULT_SERVER : DEFAULT_SERVER_DEV;\n        const response = await axios.post(`${server}/projects/${projectId}/upload_config`, form, {\n            headers: {\n                ...form.getHeaders(),\n                [\"x-admin-authorization\"]: `Bearer ${tokens[\"access_token\"]}`\n            },\n            maxContentLength: Infinity,\n            maxBodyLength: Infinity\n        });\n\n        if (response.status === 200) {\n            spinner.succeed();\n            console.log(\"🔥 Successfully uploaded new build\");\n            const baseUrl = env === \"prod\" ? \"https://app.firecms.co/\" : \"https://staging.app.firecms.co/\";\n            console.log(\"\\nCheck it out at\", baseUrl + `p/${projectId}`);\n        } else {\n            console.error(\"There was an error uploading the build\");\n            console.error(response.data);\n            spinner.fail();\n        }\n\n        // console.log(response.data);\n    } catch (err) {\n        console.error(\"There was an error uploading the build\");\n        console.error(err.response.data);\n        spinner.fail();\n    }\n}\n","import arg from \"arg\";\nimport inquirer from \"inquirer\";\nimport chalk from \"chalk\";\nimport path, { dirname } from \"path\";\nimport fs from \"fs\";\n\nimport { promisify } from \"util\";\nimport execa from \"execa\";\nimport Listr from \"listr\";\n\nimport JSON5 from \"json5\";\nimport axios from \"axios\";\nimport { DEFAULT_SERVER, DEFAULT_SERVER_DEV } from \"../common\";\nimport { getCurrentUser, getTokens, login, refreshCredentials } from \"./auth\";\nimport ora from \"ora\";\n\nimport ncp from \"ncp\";\nimport { fileURLToPath } from \"url\";\n\nconst access = promisify(fs.access);\nconst copy = promisify(ncp);\n\n\n// Function to find a specific parent directory by name\nfunction findSpecificParentDir(currentDir:string, targetDirName:string) {\n    // Prevent infinite loop in case root is reached without finding target\n    const rootDir = path.parse(currentDir).root;\n\n    while (currentDir && currentDir !== rootDir) {\n        // Check if the current directory is the target directory\n        if (path.basename(currentDir) === targetDirName) {\n            // Target directory found\n            return currentDir;\n        }\n\n        // Move to the parent directory\n        currentDir = path.dirname(currentDir);\n    }\n\n    // Target directory not found\n    return null;\n}\n\n// For ES Modules, where __dirname is not defined directly\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst targetDirPath = findSpecificParentDir(__dirname, \"cli\");\n\n\nexport type Template = \"cloud\" | \"v2\" | \"pro\" | \"community\";\nexport type InitOptions = Partial<{\n    // skipPrompts: boolean;\n    git: boolean;\n    dir_name: string;\n\n    targetDirectory: string;\n    templateDirectory: string;\n\n    // skipInstall: boolean;\n\n    authToken?: string;\n    firebaseProjectId?: string;\n\n    template: Template;\n\n    env: \"prod\" | \"dev\";\n    debug: boolean;\n}>\n\nexport async function createFireCMSApp(rawArgs) {\n\n    console.log(`\n${chalk.green.bold(\" ___ _          ___ __  __ ___\")}\n${chalk.green.bold(\"| __(_)_ _ ___ / __|  \\\\/  / __|\")}\n${chalk.green.bold(\"| _|| | '_/ -_) (__| |\\\\/| \\\\__ \\\\\")}\n${chalk.green.bold(\"|_| |_|_| \\\\___|\\\\___|_|  |_|___/\")}\n\n${chalk.red.bold(\"Welcome to the FireCMS CLI\")} 🔥\n`);\n\n    let options = parseArgumentsIntoOptions(rawArgs);\n    let currentUser = await getCurrentUser(options.env, options.debug);\n    const shouldLogin = [\"cloud\", \"pro\", \"community\"].includes(options.template) && !currentUser;\n    if (shouldLogin) {\n        console.log(\"You need to be logged in to create a project\");\n        await inquirer.prompt([\n            {\n                type: \"confirm\",\n                name: \"login\",\n                message: \"Do you want to log in?\",\n                default: true,\n            }\n        ]).then(async answers => {\n            if (answers.login) {\n                return login(options.env, options.debug);\n            }\n        });\n\n        let currentUser = await getCurrentUser(options.env, options.debug);\n        if (!currentUser) {\n            console.log(\"The login process was not completed. Exiting...\");\n            return;\n        }\n    } else if (currentUser) {\n        console.log(\"You are logged in as\", currentUser[\"email\"]);\n    }\n\n    options = await promptForMissingOptions(options);\n    // console.log({ options });\n\n    await createProject(options);\n}\n\nfunction parseArgumentsIntoOptions(rawArgs): InitOptions {\n    const args = arg(\n        {\n            \"--git\": Boolean,\n            \"--yes\": Boolean,\n            \"--skipInstall\": Boolean,\n            \"--projectId\": String,\n            \"--v2\": Boolean,\n            \"--pro\": Boolean,\n            \"--community\": Boolean,\n            \"--debug\": Boolean,\n            \"--env\": String\n        },\n        {\n            argv: rawArgs.slice(2),\n        }\n    );\n    const env = args[\"--env\"] || \"prod\";\n    if (env !== \"prod\" && env !== \"dev\") {\n        console.log(\"Please specify a valid environment: dev or prod\");\n        console.log(\"create-firecms-app --env=prod\");\n        return;\n    }\n\n    let template: Template = \"cloud\";\n    if (args[\"--v2\"]) {\n        template = \"v2\";\n    } else if (args[\"--pro\"]) {\n        template = \"pro\";\n    } else if (args[\"--community\"]) {\n        template = \"community\";\n    }\n\n    return {\n        git: args[\"--git\"] || false,\n        dir_name: args._[0],\n        template,\n        debug: args[\"--debug\"] || false,\n        firebaseProjectId: args[\"--projectId\"],\n        env\n    };\n}\n\nasync function promptForMissingOptions(options: InitOptions): Promise<InitOptions> {\n    const defaultName = \"my-cms\";\n    // if (options.skipPrompts) {\n    //     return {\n    //         ...options,\n    //         dir_name: options.dir_name || defaultName,\n    //     };\n    // }\n\n    const questions = [];\n    if (options.template !== \"v2\") {\n        if (options.template === \"cloud\") {\n            questions.push({\n                type: \"confirm\",\n                name: \"existing_firecms_project\",\n                message: \"Do you already have a FireCMS Cloud project?\",\n                default: true,\n            });\n        }\n\n        const spinner = ora(\"Loading your projects\").start();\n        const projects = await getProjects(options.env,\n            options.debug,\n            onErr => {\n                spinner.fail(\"Error loading projects\");\n            })\n            .then((res) => {\n                if (!res) {\n                    if (spinner.isSpinning)\n                        spinner.fail(\"Error loading projects\");\n                    process.exit(1);\n                }\n                spinner.succeed();\n                return res;\n            })\n            .catch((e) => {\n                if (spinner.isSpinning)\n                    spinner.fail(\"Error loading projects\");\n            });\n\n        const fireCMSProjects = projects.filter(project => project[\"fireCMSProject\"]);\n        if (!fireCMSProjects.length) {\n            console.log(\"No FireCMS projects found\");\n            process.exit(1);\n        }\n        // console.log({ projects });\n        questions.push({\n            type: \"list\",\n            name: \"firebaseProjectId\",\n            message: \"Select your project\",\n            when: (answers) => Boolean(answers.existing_firecms_project) || options.template !== \"cloud\",\n            choices: projects.map(project => project.projectId)\n        });\n    }\n\n    questions.push({\n        type: \"input\",\n        name: \"dir_name\",\n        message: \"Please choose which folder to create the project in\",\n        when: (answers) => Boolean(answers.existing_firecms_project) || options.template !== \"cloud\",\n        default: options.dir_name ?? defaultName,\n    });\n\n    if (!options.git) {\n        questions.push({\n            type: \"confirm\",\n            name: \"git\",\n            message: \"Initialize a git repository?\",\n            when: (answers) => Boolean(answers.firebaseProjectId),\n            default: false,\n        });\n    }\n\n    const answers = await inquirer.prompt(questions);\n\n    if (options.template === \"cloud\" && !answers.existing_firecms_project) {\n        console.log(\"Please create a FireCMS Cloud project first. Head to https://app.firecms.co to get started and then run this command again!\");\n        process.exit(1);\n    }\n\n    return {\n        ...options,\n        dir_name: answers.dir_name ?? options.dir_name,\n        git: options.git || answers.git,\n        firebaseProjectId: answers.firebaseProjectId,\n    };\n}\n\nexport async function createProject(options: InitOptions) {\n\n    const dir = \"./\" + options.dir_name;\n    if (fs.existsSync(dir)) {\n        if (fs.readdirSync(dir).length !== 0) {\n            console.error(\"%s Directory is not empty\", chalk.red.bold(\"ERROR\"));\n            process.exit(1);\n        }\n    } else {\n        fs.mkdirSync(dir);\n    }\n\n    const targetDirectory = path.resolve(\n        process.cwd(),\n        dir\n    );\n\n    options = {\n        ...options,\n        targetDirectory: targetDirectory,\n    };\n\n    let templateFolder: string;\n    if (options.template === \"v2\") {\n        templateFolder = \"template_v2\";\n    } else if (options.template === \"pro\") {\n        templateFolder = \"template_pro\";\n    } else if (options.template === \"community\") {\n        templateFolder = \"template\";\n    } else if (options.template === \"cloud\") {\n        templateFolder = \"template_cloud\";\n    } else {\n        throw new Error(\"createProject: Invalid template\");\n    }\n\n    const templateDir = path.resolve(\n        targetDirPath,\n        \"./templates/\" + templateFolder\n    );\n    options.templateDirectory = templateDir;\n\n    try {\n        await access(templateDir, fs.constants.R_OK);\n    } catch (err) {\n        console.error(\"%s Invalid template name \" + templateDir, chalk.red.bold(\"ERROR\"));\n        process.exit(1);\n    }\n\n    const tasks = new Listr([\n        {\n            title: \"Copy project files: \" + options.templateDirectory,\n            task: (ctx) => copyTemplateFiles(options, ctx.webappConfig),\n        },\n        {\n            title: \"Initialize git\",\n            task: () => initGit(options),\n            enabled: () => options.git,\n        }\n    ]);\n\n    await tasks.run();\n\n    console.log(\"\");\n    console.log(\"%s Your project is ready!\", chalk.green.bold(\"DONE\"));\n    console.log(\"\");\n\n    if (options.template === \"v2\") {\n        console.log(\"First update your firebase config in\");\n        console.log(chalk.bgYellow.black.bold(\"src/firebase_config.ts\"));\n        console.log(\"\");\n        console.log(\"Then run:\");\n        console.log(chalk.cyan.bold(\"cd \" + options.dir_name));\n        console.log(chalk.cyan.bold(\"yarn\"));\n        console.log(chalk.cyan.bold(\"yarn dev\"));\n        console.log(\"\");\n    } else if (options.template === \"pro\" || options.template === \"community\") {\n        console.log(\"Run:\");\n        console.log(chalk.cyan.bold(\"cd \" + options.dir_name));\n        console.log(chalk.cyan.bold(\"yarn\"));\n        console.log(chalk.cyan.bold(\"yarn dev\"));\n        console.log(\"\");\n    } else if (options.template === \"cloud\") {\n        console.log(\"If you want to run your project locally, run:\");\n        console.log(chalk.bgYellow.black.bold(\"cd \" + options.dir_name));\n        console.log(chalk.bgYellow.black.bold(\"yarn install\"));\n        console.log(chalk.bgYellow.black.bold(\"yarn dev\"));\n        console.log(\"\");\n        console.log(\"If you want to deploy your project, run:\");\n        console.log(chalk.bgYellow.black.bold(\"yarn deploy\"));\n        console.log(\"and see it running in https://app.firecms.co\");\n    } else {\n        throw new Error(\"createProject: Invalid template\");\n    }\n\n    return true;\n}\n\nasync function copyTemplateFiles(options: InitOptions, webappConfig?: object) {\n    return copy(options.templateDirectory, options.targetDirectory, {\n        clobber: false,\n        dot: true,\n    }).then(async _ => {\n        if (options.template === \"v2\") {\n            if (webappConfig)\n                writeWebAppConfig(options, webappConfig);\n        } else {\n            if (options.template === \"pro\" || options.template === \"community\") {\n\n                const firebaseConfig = await getProjectWebappConfig(options.env, options.firebaseProjectId, options.debug);\n                await copyWebAppConfig(options, firebaseConfig);\n\n                return replaceProjectIdInTemplateFiles(options, [\n                    \"./src/App.tsx\",\n                    \"./firebase.json\",\n                    \"./package.json\",\n                    \"./.firebaserc\",\n                ]);\n            } else if (options.template === \"cloud\") {\n\n                return replaceProjectIdInTemplateFiles(options, [\n                    \"./src/App.tsx\",\n                    \"./package.json\",\n                ]);\n            }\n        }\n    });\n}\n\nasync function copyWebAppConfig(options: InitOptions, firebaseConfig: object) {\n\n    const fullFileName = path.resolve(options.targetDirectory, \"src/firebase_config.ts\");\n    fs.writeFile(fullFileName, \"export const firebaseConfig = \" + JSON.stringify(firebaseConfig, null, 4), err => {\n        if (err) {\n            console.error(\"Failed to write file:\", err);\n        }\n    });\n}\n\nasync function replaceProjectIdInTemplateFiles(options: InitOptions, files: string[] = []) {\n    for (const file of files) {\n        const fullFileName = path.resolve(options.targetDirectory, file);\n        await fs.readFile(fullFileName, \"utf8\", function (err, data) {\n            if (err) {\n                return console.log(err);\n            }\n            const result = data.replace(/\\[REPLACE_WITH_PROJECT_ID]/g, options.firebaseProjectId);\n\n            fs.writeFile(fullFileName, result, \"utf8\", function (err) {\n                if (err) return console.log(err);\n            });\n        });\n    }\n\n}\n\nasync function initGit(options: InitOptions) {\n    const result = await execa(\"git\", [\"init\"], {\n        cwd: options.targetDirectory,\n    });\n    if (result.failed) {\n        return Promise.reject(new Error(\"Failed to initialize git\"));\n    }\n    return;\n}\n\nfunction writeWebAppConfig(options: InitOptions, webappConfig: object) {\n    fs.writeFile(options.targetDirectory + \"/src/firebase_config.ts\",\n        `export const firebaseConfig = ${JSON5.stringify(webappConfig, null, \"\\t\")};`,\n        function (err) {\n            if (err) return console.log(err);\n        });\n}\n\nasync function getProjects(env: \"prod\" | \"dev\", debug: boolean, onErr?: (e: any) => void) {\n\n    try {\n        const credentials = await getTokens(env, debug);\n        const tokens = await refreshCredentials(env, credentials, onErr);\n        if (!tokens) {\n            return null;\n        }\n        const server = env === \"prod\" ? DEFAULT_SERVER : DEFAULT_SERVER_DEV;\n        const response = await axios.get(server + \"/gcp_projects\", {\n            headers: {\n                [\"x-admin-authorization\"]: `Bearer ${tokens[\"access_token\"]}`\n            },\n        });\n\n        if (response.status >= 400) {\n            console.log(response.data.data?.message);\n            return null;\n        }\n        return response.data.data;\n    } catch (e) {\n        if (onErr) {\n            onErr(e);\n        }\n        console.error(\"Error getting projects\", e.response?.data);\n    }\n}\n\nasync function getProjectWebappConfig(env: \"prod\" | \"dev\", projectId: string, debug: boolean, onErr?: (e: any) => void) {\n\n    try {\n        const credentials = await getTokens(env, debug);\n        const tokens = await refreshCredentials(env, credentials, onErr);\n        if (!tokens) {\n            return null;\n        }\n        const server = env === \"prod\" ? DEFAULT_SERVER : DEFAULT_SERVER_DEV;\n        const response = await axios.get(server + `/projects/${projectId}/webapp_config`, {\n            headers: {\n                [\"x-admin-authorization\"]: `Bearer ${tokens[\"access_token\"]}`\n            },\n        });\n\n        if (response.status >= 400) {\n            console.log(response.data.data?.message);\n            return null;\n        }\n        return response.data.data;\n    } catch (e) {\n        if (onErr) {\n            onErr(e);\n        }\n        console.error(\"Error getting projects\", e.response?.data);\n    }\n}\n","import chalk from \"chalk\";\nimport { deploy } from \"./commands/deploy\";\nimport { getCurrentUser, login, logout } from \"./commands/auth\";\nimport arg from \"arg\";\nimport { createFireCMSApp } from \"./commands/init\";\n\nexport async function entry(args) {\n\n    if (args.length < 2) {\n        printHelp();\n        return;\n    }\n\n    const command = args[2];\n\n    if (command === \"init\") {\n        await createFireCMSApp(args);\n    } else if (command === \"login\") {\n        await loginArgs(args);\n    } else if (command === \"logout\") {\n        await logoutArgs(args);\n    } else if (command === \"deploy\") {\n        await deployArgs(args);\n    } else {\n        if (command)\n            console.log(\"Unknown command\", command)\n        printHelp();\n        return;\n    }\n}\n\nasync function loginArgs(rawArgs) {\n    const args = arg(\n        {\n            \"--env\": String,\n            \"--debug\": Boolean\n        },\n        {\n            argv: rawArgs.slice(2),\n        }\n    );\n    const env = args[\"--env\"] || \"prod\";\n    const debug = args[\"--debug\"] || false;\n    if (env !== \"prod\" && env !== \"dev\") {\n        console.log(\"Please specify a valid environment: dev or prod\");\n        console.log(\"firecms login --env=prod\");\n        return;\n    }\n    await login(env, debug);\n}\n\nasync function logoutArgs(rawArgs) {\n    const args = arg(\n        {\n            \"--env\": String,\n            \"--debug\": Boolean\n        },\n        {\n            argv: rawArgs.slice(2),\n        }\n    );\n    const env = args[\"--env\"] || \"prod\";\n    const debug = args[\"--debug\"] || false;\n    if (env !== \"prod\" && env !== \"dev\") {\n        console.log(\"Please specify a valid environment: dev or prod\");\n        console.log(\"firecms logout --env=prod\");\n        return;\n    }\n    await logout(env, debug);\n}\n\nasync function deployArgs(rawArgs) {\n    const args = arg(\n        {\n            \"--project\": String,\n            \"--env\": String,\n            \"--debug\": Boolean\n        },\n        {\n            argv: rawArgs.slice(2),\n        }\n    );\n    const project = args[\"--project\"];\n\n    if (!project) {\n        console.log(\"Please specify a project:\");\n        console.log(\"firecms deploy --project=your-project-id\");\n        return;\n    }\n    const env = args[\"--env\"] || \"prod\";\n    const debug = args[\"--debug\"] || false;\n    if (env !== \"prod\" && env !== \"dev\") {\n        console.log(\"Please specify a valid environment:\");\n        console.log(\"firecms deploy --project=your-project-id --env=dev\");\n        return;\n    }\n\n    const currentUser = await getCurrentUser(env, debug);\n    if (!currentUser) {\n        await login(env, debug);\n    }\n\n    await deploy(project, env, debug);\n}\n\nasync function printHelp(env: \"prod\" | \"dev\" = \"prod\", debug: boolean = false) {\n\n    console.log(`\n${chalk.red.bold(\"Welcome to the FireCMS CLI 🔥🔥🔥\")}\n\n${chalk.green.bold(\"Usage\")}\nfirecms ${chalk.blue.bold(\"<command>\")} [options]\n\n${chalk.green.bold(\"Commands\")}\n${chalk.blue.bold(\"login\")} - Login to FireCMS\n${chalk.blue.bold(\"logout\")} - Sign out\n${chalk.blue.bold(\"init\")} - Create a new CMS project\n${chalk.blue.bold(\"deploy\")} - Deploy an existing CMS project\n`);\n    const currentCredentials = await getCurrentUser(env, debug);\n    if (currentCredentials) {\n        console.log(`${chalk.green.bold(\"Current user\")}\n${currentCredentials[\"email\"]}\n`);\n    }\n\n}\n\n// function debugPaths() {\n//     // @ts-ignore\n//     const currentFileUrl = import.meta[\"url\"];\n//     console.log(\"currentFileUrl\", currentFileUrl)\n//     console.log(\"__dirname\", __dirname);\n//     console.log(\"process.cwd()\", process.cwd());\n//\n//     const templateDir = path.resolve(\n//         new URL(currentFileUrl).pathname,\n//         '../../template'\n//     );\n//\n//     console.log(\"templateDir\", templateDir);\n//\n//     const templateDir2 = path.resolve(\n//         __dirname,\n//         '../template'\n//     );\n//     console.log(\"templateDir2\", templateDir2);\n// }\n"],"names":["DEFAULT_SERVER_DEV","DEFAULT_SERVER","done_html","getCurrentUser","env","debug","userCredential","getTokens","parseJwt","login","emitter","EventEmitter","currentUser","chalk","activeConnections","server","http","req","res","authURL","getAuthURL","q","url","socket","open","resolve","reject","code","tokens","exchangeCodeForToken","saveTokens","dirPath","path","os","fs","filePath","data","error","logout","revokeToken","err","result","accessToken","postData","postOptions","postReq","https","d","token","base64","buffer","axios","refreshCredentials","credentials","onErr","expiryDate","now","newCredentials","deploy","projectId","zipFilePath","createZipFromBuild","uploadZip","build","exec","stdout","stderr","tmpdir","destFile","zipFolder","spinner","ora","form","FormData","response","access","promisify","copy","ncp","findSpecificParentDir","currentDir","targetDirName","rootDir","__filename","fileURLToPath","__dirname","targetDirPath","createFireCMSApp","rawArgs","options","parseArgumentsIntoOptions","inquirer","answers","promptForMissingOptions","createProject","args","arg","template","defaultName","questions","projects","getProjects","e","project","dir","targetDirectory","templateFolder","templateDir","Listr","ctx","copyTemplateFiles","initGit","webappConfig","_","writeWebAppConfig","firebaseConfig","getProjectWebappConfig","copyWebAppConfig","replaceProjectIdInTemplateFiles","fullFileName","files","file","execa","JSON5","entry","printHelp","command","loginArgs","logoutArgs","deployArgs","currentCredentials"],"mappings":"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"}