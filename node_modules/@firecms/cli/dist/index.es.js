import i from "chalk";
import R from "form-data";
import * as b from "os";
import * as I from "path";
import f from "path";
import c from "fs";
import u from "axios";
import { exec as E } from "child_process";
import T from "zip-folder";
import U from "open";
import D from "http";
import B from "events";
import L from "https";
import M, { fileURLToPath as O } from "url";
import S from "ora";
import _ from "arg";
import C from "inquirer";
import { promisify as x } from "util";
import Y from "execa";
import A from "listr";
import N from "json5";
import z from "ncp";
const p = "https://api-kdoe6pj3qq-ey.a.run.app", m = "https://api-drplyi3b6q-ey.a.run.app", J = `<html lang="en">
<head>
    <style>
        html, body {
            font-family: Rubik, sans-serif;
            height: 100%;
            margin: 0;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }
    </style>
    <link rel="stylesheet"
          href="https://fonts.googleapis.com/css?family=Rubik">
</head>

<body>

<img src="https://firecms.co/img/firecms_logo.svg" alt="FireCMS logo" width="100" height="100">

<h2>FireCMS CLI</h2>

<p style="margin: 0;">You can now close this tab</p>

<script>

    setTimeout(function () {
        window.close();
    }, 3000);

<\/script>

</body>
</html>

`;
async function g(e, o) {
  o && console.log("Getting current user");
  const t = await y(e, o);
  return t ? (o && console.log("userCredential", t), H(t.id_token)) : null;
}
async function w(e, o) {
  const t = new B(), r = await g(e, o);
  if (r) {
    console.log("You are already logged in as", r.email), console.log(`Run ${i.bold("firecms logout")} to sign out`);
    return;
  }
  const n = /* @__PURE__ */ new Set(), s = D.createServer(async (l, a) => {
    if (a.setHeader("Cache-Control", "no-store, max-age=0"), l.url === "/") {
      const d = await q(e);
      console.log("Opening browser to", d), a.writeHead(301, { Location: d }), a.end();
    }
    if (l.url.startsWith("/oauth2callback")) {
      let d = M.parse(l.url, !0).query;
      if (d.error)
        throw console.log("Error:" + d.error), s.close(), d.error;
      a.writeHead(200), a.end(J, () => l.socket.end()), t.emit("tokensReady", d.code);
    }
  }).listen(3e3);
  return s.on("connection", (l) => {
    n.add(l), l.on("close", () => {
      n.delete(l);
    });
  }), U("http://localhost:3000"), new Promise(async (l, a) => {
    t.once("tokensReady", async (d) => {
      const h = await V(d, e);
      if (h)
        console.log("You have successfully logged in."), P(h, e), l(h);
      else
        return a("Token could not be obtained");
      for (const $ of n)
        $.destroy();
      s.close();
    });
  });
}
function P(e, o) {
  const t = f.join(b.homedir(), ".firecms");
  c.existsSync(t) || c.mkdirSync(t);
  const r = f.join(t, (o === "dev" ? "staging." : "") + "tokens.json"), n = JSON.stringify(e);
  c.writeFile(r, n, (s) => {
    if (s)
      throw s;
  });
}
async function F(e, o) {
  const t = await y(e, o);
  if (!t) {
    console.log("⚠️ You are not logged in"), console.log(`Run ${i.red.bold("firecms login")} to log in`);
    return;
  }
  W(t.access_token);
  const r = f.join(b.homedir(), ".firecms"), n = f.join(r, (e === "dev" ? "staging." : "") + "tokens.json");
  c.unlinkSync(n), console.log("You have successfully logged out.");
}
async function y(e, o) {
  const t = f.join(b.homedir(), ".firecms"), r = f.join(t, (e === "dev" ? "staging." : "") + "tokens.json");
  return c.existsSync(r) ? new Promise((n, s) => {
    c.readFile(r, "utf8", (l, a) => {
      if (o && console.log("getTokens", { data: a }), l) {
        s(l);
        return;
      }
      const d = JSON.parse(a);
      d.env === "dev" && console.log("Using DEV environment"), n(d);
    });
  }) : null;
}
function W(e, o) {
  let t = "token=" + e, r = {
    host: "oauth2.googleapis.com",
    port: "443",
    path: "/revoke",
    method: "POST",
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      "Content-Length": Buffer.byteLength(t)
    }
  };
  const n = L.request(r, function(s) {
    s.setEncoding("utf8"), s.on("data", (l) => {
    });
  });
  n.on("error", (s) => {
    console.log(s);
  }), n.write(t), n.end();
}
function H(e) {
  if (!e)
    throw new Error("No JWT token");
  const t = e.split(".")[1].replace(/-/g, "+").replace(/_/g, "/"), r = Buffer.from(t, "base64");
  return JSON.parse(r.toString());
}
async function q(e) {
  const o = e === "prod" ? m : p;
  return (await u.get(o + "/cli/generate_auth_url", {
    params: {
      redirect_uri: "http://localhost:3000/oauth2callback/"
    }
  })).data.data;
}
async function v(e, o, t) {
  if (o) {
    const r = new Date(o.expiry_date), n = /* @__PURE__ */ new Date();
    if (r.getTime() > n.getTime())
      return o;
  }
  try {
    const r = e === "prod" ? m : p, s = (await u.post(r + "/cli/refresh_access_token", o)).data.data;
    return P({
      ...o,
      ...s,
      env: e
    }, e), s;
  } catch (r) {
    return t && t(r), await F(e, !1), console.error(`
Error refreshing credentials`, r.response?.status, r.response?.data?.message), console.log(`⚠️ Run ${i.red.bold("firecms login")} to log in again`), null;
  }
}
async function V(e, o) {
  const t = o === "prod" ? m : p;
  return (await u.get(t + "/cli/exchange_code_for_token", {
    params: {
      code: e
    }
  })).data.data;
}
async function G(e, o, t) {
  if (!await g(o, t)) {
    console.log("⚠️ You are not logged in"), console.log(`Run ${i.red.bold("firecms login")} to log in`);
    return;
  }
  console.log("Starting deploy");
  const n = await Z();
  await K(e, n, o, t);
}
function Le() {
  E("yarn build", (e, o, t) => {
    if (e)
      return console.error(`exec error: ${e}`);
    console.log(`stdout: ${o}`), console.error(`stderr: ${t}`);
  });
}
async function Z() {
  return new Promise((e, o) => {
    const t = b.tmpdir(), r = I.join(t, "firecms_build.zip");
    T("./dist/assets", r, function(n) {
      n ? o(n) : e(r);
    });
  });
}
async function K(e, o, t, r) {
  t === "dev" && console.log("!!! Uploading to dev server");
  const n = S("Uploading build of project " + e).start(), s = await v(t, await y(t, r)), l = new R();
  if (!c.existsSync(o)) {
    console.error(`File ${o} does not exist`);
    return;
  }
  l.append("zip", c.createReadStream(o), "file.zip");
  try {
    const a = t === "prod" ? m : p, d = await u.post(`${a}/projects/${e}/upload_config`, l, {
      headers: {
        ...l.getHeaders(),
        "x-admin-authorization": `Bearer ${s.access_token}`
      },
      maxContentLength: 1 / 0,
      maxBodyLength: 1 / 0
    });
    d.status === 200 ? (n.succeed(), console.log("🔥 Successfully uploaded new build"), console.log(`
Check it out at`, (t === "prod" ? "https://app.firecms.co/" : "https://staging.app.firecms.co/") + `p/${e}`)) : (console.error("There was an error uploading the build"), console.error(d.data), n.fail());
  } catch (a) {
    console.error("There was an error uploading the build"), console.error(a.response.data), n.fail();
  }
}
const Q = x(c.access), X = x(z);
function ee(e, o) {
  const t = f.parse(e).root;
  for (; e && e !== t; ) {
    if (f.basename(e) === o)
      return e;
    e = f.dirname(e);
  }
  return null;
}
const oe = O(import.meta.url), te = f.dirname(oe), re = ee(te, "cli");
async function ne(e) {
  console.log(`
${i.green.bold(" ___ _          ___ __  __ ___")}
${i.green.bold("| __(_)_ _ ___ / __|  \\/  / __|")}
${i.green.bold("| _|| | '_/ -_) (__| |\\/| \\__ \\")}
${i.green.bold("|_| |_|_| \\___|\\___|_|  |_|___/")}

${i.red.bold("Welcome to the FireCMS CLI")} 🔥
`);
  let o = se(e), t = await g(o.env, o.debug);
  if (["cloud", "pro", "community"].includes(o.template) && !t) {
    if (console.log("You need to be logged in to create a project"), await C.prompt([
      {
        type: "confirm",
        name: "login",
        message: "Do you want to log in?",
        default: !0
      }
    ]).then(async (s) => {
      if (s.login)
        return w(o.env, o.debug);
    }), !await g(o.env, o.debug)) {
      console.log("The login process was not completed. Exiting...");
      return;
    }
  } else
    t && console.log("You are logged in as", t.email);
  o = await ae(o), await ie(o);
}
function se(e) {
  const o = _(
    {
      "--git": Boolean,
      "--yes": Boolean,
      "--skipInstall": Boolean,
      "--projectId": String,
      "--v2": Boolean,
      "--pro": Boolean,
      "--community": Boolean,
      "--debug": Boolean,
      "--env": String
    },
    {
      argv: e.slice(2)
    }
  ), t = o["--env"] || "prod";
  if (t !== "prod" && t !== "dev") {
    console.log("Please specify a valid environment: dev or prod"), console.log("create-firecms-app --env=prod");
    return;
  }
  let r = "cloud";
  return o["--v2"] ? r = "v2" : o["--pro"] ? r = "pro" : o["--community"] && (r = "community"), {
    git: o["--git"] || !1,
    dir_name: o._[0],
    template: r,
    debug: o["--debug"] || !1,
    firebaseProjectId: o["--projectId"],
    env: t
  };
}
async function ae(e) {
  const o = "my-cms", t = [];
  if (e.template !== "v2") {
    e.template === "cloud" && t.push({
      type: "confirm",
      name: "existing_firecms_project",
      message: "Do you already have a FireCMS Cloud project?",
      default: !0
    });
    const n = S("Loading your projects").start(), s = await ge(
      e.env,
      e.debug,
      (a) => {
        n.fail("Error loading projects");
      }
    ).then((a) => (a || (n.isSpinning && n.fail("Error loading projects"), process.exit(1)), n.succeed(), a)).catch((a) => {
      n.isSpinning && n.fail("Error loading projects");
    });
    s.filter((a) => a.fireCMSProject).length || (console.log("No FireCMS projects found"), process.exit(1)), t.push({
      type: "list",
      name: "firebaseProjectId",
      message: "Select your project",
      when: (a) => !!a.existing_firecms_project || e.template !== "cloud",
      choices: s.map((a) => a.projectId)
    });
  }
  t.push({
    type: "input",
    name: "dir_name",
    message: "Please choose which folder to create the project in",
    when: (n) => !!n.existing_firecms_project || e.template !== "cloud",
    default: e.dir_name ?? o
  }), e.git || t.push({
    type: "confirm",
    name: "git",
    message: "Initialize a git repository?",
    when: (n) => !!n.firebaseProjectId,
    default: !1
  });
  const r = await C.prompt(t);
  return e.template === "cloud" && !r.existing_firecms_project && (console.log("Please create a FireCMS Cloud project first. Head to https://app.firecms.co to get started and then run this command again!"), process.exit(1)), {
    ...e,
    dir_name: r.dir_name ?? e.dir_name,
    git: e.git || r.git,
    firebaseProjectId: r.firebaseProjectId
  };
}
async function ie(e) {
  const o = "./" + e.dir_name;
  c.existsSync(o) ? c.readdirSync(o).length !== 0 && (console.error("%s Directory is not empty", i.red.bold("ERROR")), process.exit(1)) : c.mkdirSync(o);
  const t = f.resolve(
    process.cwd(),
    o
  );
  e = {
    ...e,
    targetDirectory: t
  };
  let r;
  if (e.template === "v2")
    r = "template_v2";
  else if (e.template === "pro")
    r = "template_pro";
  else if (e.template === "community")
    r = "template";
  else if (e.template === "cloud")
    r = "template_cloud";
  else
    throw new Error("createProject: Invalid template");
  const n = f.resolve(
    re,
    "./templates/" + r
  );
  e.templateDirectory = n;
  try {
    await Q(n, c.constants.R_OK);
  } catch {
    console.error("%s Invalid template name " + n, i.red.bold("ERROR")), process.exit(1);
  }
  if (await new A([
    {
      title: "Copy project files: " + e.templateDirectory,
      task: (l) => le(e, l.webappConfig)
    },
    {
      title: "Initialize git",
      task: () => de(e),
      enabled: () => e.git
    }
  ]).run(), console.log(""), console.log("%s Your project is ready!", i.green.bold("DONE")), console.log(""), e.template === "v2")
    console.log("First update your firebase config in"), console.log(i.bgYellow.black.bold("src/firebase_config.ts")), console.log(""), console.log("Then run:"), console.log(i.cyan.bold("cd " + e.dir_name)), console.log(i.cyan.bold("yarn")), console.log(i.cyan.bold("yarn dev")), console.log("");
  else if (e.template === "pro" || e.template === "community")
    console.log("Run:"), console.log(i.cyan.bold("cd " + e.dir_name)), console.log(i.cyan.bold("yarn")), console.log(i.cyan.bold("yarn dev")), console.log("");
  else if (e.template === "cloud")
    console.log("If you want to run your project locally, run:"), console.log(i.bgYellow.black.bold("cd " + e.dir_name)), console.log(i.bgYellow.black.bold("yarn install")), console.log(i.bgYellow.black.bold("yarn dev")), console.log(""), console.log("If you want to deploy your project, run:"), console.log(i.bgYellow.black.bold("yarn deploy")), console.log("and see it running in https://app.firecms.co");
  else
    throw new Error("createProject: Invalid template");
  return !0;
}
async function le(e, o) {
  return X(e.templateDirectory, e.targetDirectory, {
    clobber: !1,
    dot: !0
  }).then(async (t) => {
    if (e.template === "v2")
      o && fe(e, o);
    else if (e.template === "pro" || e.template === "community") {
      const r = await ue(e.env, e.firebaseProjectId, e.debug);
      return await ce(e, r), j(e, [
        "./src/App.tsx",
        "./firebase.json",
        "./package.json",
        "./.firebaserc"
      ]);
    } else if (e.template === "cloud")
      return j(e, [
        "./src/App.tsx",
        "./package.json"
      ]);
  });
}
async function ce(e, o) {
  const t = f.resolve(e.targetDirectory, "src/firebase_config.ts");
  c.writeFile(t, "export const firebaseConfig = " + JSON.stringify(o, null, 4), (r) => {
    r && console.error("Failed to write file:", r);
  });
}
async function j(e, o = []) {
  for (const t of o) {
    const r = f.resolve(e.targetDirectory, t);
    await c.readFile(r, "utf8", function(n, s) {
      if (n)
        return console.log(n);
      const l = s.replace(/\[REPLACE_WITH_PROJECT_ID]/g, e.firebaseProjectId);
      c.writeFile(r, l, "utf8", function(a) {
        if (a)
          return console.log(a);
      });
    });
  }
}
async function de(e) {
  if ((await Y("git", ["init"], {
    cwd: e.targetDirectory
  })).failed)
    return Promise.reject(new Error("Failed to initialize git"));
}
function fe(e, o) {
  c.writeFile(
    e.targetDirectory + "/src/firebase_config.ts",
    `export const firebaseConfig = ${N.stringify(o, null, "	")};`,
    function(t) {
      if (t)
        return console.log(t);
    }
  );
}
async function ge(e, o, t) {
  try {
    const r = await y(e, o), n = await v(e, r, t);
    if (!n)
      return null;
    const s = e === "prod" ? m : p, l = await u.get(s + "/gcp_projects", {
      headers: {
        "x-admin-authorization": `Bearer ${n.access_token}`
      }
    });
    return l.status >= 400 ? (console.log(l.data.data?.message), null) : l.data.data;
  } catch (r) {
    t && t(r), console.error("Error getting projects", r.response?.data);
  }
}
async function ue(e, o, t, r) {
  try {
    const n = await y(e, t), s = await v(e, n, r);
    if (!s)
      return null;
    const l = e === "prod" ? m : p, a = await u.get(l + `/projects/${o}/webapp_config`, {
      headers: {
        "x-admin-authorization": `Bearer ${s.access_token}`
      }
    });
    return a.status >= 400 ? (console.log(a.data.data?.message), null) : a.data.data;
  } catch (n) {
    r && r(n), console.error("Error getting projects", n.response?.data);
  }
}
async function Me(e) {
  if (e.length < 2) {
    k();
    return;
  }
  const o = e[2];
  if (o === "init")
    await ne(e);
  else if (o === "login")
    await pe(e);
  else if (o === "logout")
    await me(e);
  else if (o === "deploy")
    await ye(e);
  else {
    o && console.log("Unknown command", o), k();
    return;
  }
}
async function pe(e) {
  const o = _(
    {
      "--env": String,
      "--debug": Boolean
    },
    {
      argv: e.slice(2)
    }
  ), t = o["--env"] || "prod", r = o["--debug"] || !1;
  if (t !== "prod" && t !== "dev") {
    console.log("Please specify a valid environment: dev or prod"), console.log("firecms login --env=prod");
    return;
  }
  await w(t, r);
}
async function me(e) {
  const o = _(
    {
      "--env": String,
      "--debug": Boolean
    },
    {
      argv: e.slice(2)
    }
  ), t = o["--env"] || "prod", r = o["--debug"] || !1;
  if (t !== "prod" && t !== "dev") {
    console.log("Please specify a valid environment: dev or prod"), console.log("firecms logout --env=prod");
    return;
  }
  await F(t, r);
}
async function ye(e) {
  const o = _(
    {
      "--project": String,
      "--env": String,
      "--debug": Boolean
    },
    {
      argv: e.slice(2)
    }
  ), t = o["--project"];
  if (!t) {
    console.log("Please specify a project:"), console.log("firecms deploy --project=your-project-id");
    return;
  }
  const r = o["--env"] || "prod", n = o["--debug"] || !1;
  if (r !== "prod" && r !== "dev") {
    console.log("Please specify a valid environment:"), console.log("firecms deploy --project=your-project-id --env=dev");
    return;
  }
  await g(r, n) || await w(r, n), await G(t, r, n);
}
async function k(e = "prod", o = !1) {
  console.log(`
${i.red.bold("Welcome to the FireCMS CLI 🔥🔥🔥")}

${i.green.bold("Usage")}
firecms ${i.blue.bold("<command>")} [options]

${i.green.bold("Commands")}
${i.blue.bold("login")} - Login to FireCMS
${i.blue.bold("logout")} - Sign out
${i.blue.bold("init")} - Create a new CMS project
${i.blue.bold("deploy")} - Deploy an existing CMS project
`);
  const t = await g(e, o);
  t && console.log(`${i.green.bold("Current user")}
${t.email}
`);
}
export {
  Le as build,
  ne as createFireCMSApp,
  ie as createProject,
  Z as createZipFromBuild,
  G as deploy,
  Me as entry,
  g as getCurrentUser,
  y as getTokens,
  w as login,
  F as logout,
  H as parseJwt,
  v as refreshCredentials,
  K as uploadZip
};
//# sourceMappingURL=index.es.js.map
