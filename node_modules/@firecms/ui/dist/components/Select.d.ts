import React from "react";
export type SelectProps = {
    open?: boolean;
    name?: string;
    id?: string;
    onOpenChange?: (open: boolean) => void;
    value?: string | string[];
    className?: string;
    inputClassName?: string;
    onChange?: React.EventHandler<React.ChangeEvent<HTMLSelectElement>>;
    onValueChange?: (updatedValue: string) => void;
    onMultiValueChange?: (updatedValue: string[]) => void;
    placeholder?: React.ReactNode;
    renderValue?: (value: string, index: number) => React.ReactNode;
    renderValues?: (values: string[]) => React.ReactNode;
    size?: "small" | "medium";
    label?: React.ReactNode;
    disabled?: boolean;
    error?: boolean;
    position?: "item-aligned" | "popper";
    endAdornment?: React.ReactNode;
    multiple?: boolean;
    inputRef?: React.RefObject<HTMLButtonElement>;
    padding?: boolean;
    includeFocusOutline?: boolean;
    invisible?: boolean;
    children?: React.ReactNode;
};
export declare function Select({ inputRef, open, name, id, onOpenChange, value, onChange, onValueChange, onMultiValueChange, className, inputClassName, placeholder, renderValue, renderValues, label, size, includeFocusOutline, error, disabled, padding, position, endAdornment, multiple, invisible, children, ...props }: SelectProps): import("react/jsx-runtime").JSX.Element;
export type SelectItemProps = {
    value: string;
    children?: React.ReactNode;
    disabled?: boolean;
    className?: string;
};
export declare function SelectItem({ value, children, disabled, className }: SelectItemProps): import("react/jsx-runtime").JSX.Element;
export type SelectGroupProps = {
    label: React.ReactNode;
    children: React.ReactNode;
    className?: string;
};
export declare function SelectGroup({ label, children, className }: SelectGroupProps): import("react/jsx-runtime").JSX.Element;
