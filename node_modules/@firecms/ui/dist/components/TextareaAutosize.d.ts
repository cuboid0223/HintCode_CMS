import * as React from "react";
type State = {
    outerHeightStyle: number;
    overflow?: boolean | undefined;
};
export declare const TextareaAutosize: React.FC<Omit<React.InputHTMLAttributes<HTMLTextAreaElement>, "onResize"> & {
    className?: string | undefined;
    shadowClassName?: string | undefined;
    /**
     * Maximum number of rows to display.
     */
    maxRows?: string | number | undefined;
    /**
     * Minimum number of rows to display.
     * @default 1
     */
    minRows?: string | number | undefined;
    /**
     * @ignore
     */
    onChange?: ((event: React.ChangeEvent<HTMLTextAreaElement>) => void) | undefined;
    /**
     * @ignore
     */
    placeholder?: string | undefined;
    /**
     * @ignore
     */
    style?: object | undefined;
    /**
     * @ignore
     */
    value?: string | number | string[] | undefined;
    sizeRef?: React.RefObject<HTMLDivElement> | undefined;
    onScroll?: ((event: React.UIEvent<HTMLTextAreaElement>) => void) | undefined;
    onResize?: ((state: State) => void) | undefined;
    autoFocus?: boolean | undefined;
    ignoreBoxSizing?: boolean | undefined;
} & {
    ref?: React.ForwardedRef<Element> | undefined;
}>;
export type TextareaAutosizeProps = Omit<React.InputHTMLAttributes<HTMLTextAreaElement>, "onResize"> & {
    className?: string;
    shadowClassName?: string;
    /**
     * Maximum number of rows to display.
     */
    maxRows?: number | string;
    /**
     * Minimum number of rows to display.
     * @default 1
     */
    minRows?: number | string;
    /**
     * @ignore
     */
    onChange?: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;
    /**
     * @ignore
     */
    placeholder?: string;
    /**
     * @ignore
     */
    style?: object;
    /**
     * @ignore
     */
    value?: string[] | number | string;
    sizeRef?: React.RefObject<HTMLDivElement>;
    onScroll?: (event: React.UIEvent<HTMLTextAreaElement>) => void;
    onResize?: (state: State) => void;
    autoFocus?: boolean;
    ignoreBoxSizing?: boolean;
};
export {};
