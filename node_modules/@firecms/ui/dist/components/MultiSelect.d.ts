import * as React from "react";
export type MultiSelectProps = {
    open?: boolean;
    name?: string;
    id?: string;
    onOpenChange?: (open: boolean) => void;
    value?: string[];
    containerClassName?: string;
    className?: string;
    inputClassName?: string;
    onMultiValueChange?: (updatedValue: string[]) => void;
    placeholder?: React.ReactNode;
    renderValue?: (values: string, index: number) => React.ReactNode;
    renderValues?: (values: string[]) => React.ReactNode;
    size?: "small" | "medium";
    label?: React.ReactNode;
    disabled?: boolean;
    error?: boolean;
    position?: "item-aligned" | "popper";
    endAdornment?: React.ReactNode;
    inputRef?: React.RefObject<HTMLButtonElement>;
    padding?: boolean;
    includeFocusOutline?: boolean;
    children?: React.ReactNode;
};
interface MultiSelectContextProps {
    fieldValue?: string[];
    setInputValue: (v: string) => void;
    onValueChangeInternal: (v: string) => void;
}
export declare const MultiSelectContext: React.Context<MultiSelectContextProps>;
export declare function MultiSelect({ value, open, onMultiValueChange, size, label, disabled, renderValue, renderValues, includeFocusOutline, containerClassName, className, children, error }: MultiSelectProps): import("react/jsx-runtime").JSX.Element;
export interface MultiSelectItemProps {
    value: string;
    children?: React.ReactNode;
    className?: string;
}
export declare function MultiSelectItem({ children, value, className }: MultiSelectItemProps): import("react/jsx-runtime").JSX.Element;
export {};
