import v, { useState as H, useRef as ee, useMemo as ue, useEffect as G, useCallback as $, useContext as Ce, useDeferredValue as Oe } from "react";
import { isPropertyBuilder as te, getValueInPath as Z, getFieldId as de, useFireCMSContext as Fe, useCustomizationController as Ne, useAuthController as fe, useSnackbarController as Ae, resolveCollection as De, useDataSource as Ve, useNavigationController as je, useClearRestoreValue as Pe, LabelWithIcon as $e, getIconForProperty as Be, FieldHelperText as ze, singular as Me, stripCollectionPath as Re } from "@firecms/core";
import { jsxs as O, jsx as s, Fragment as Le } from "react/jsx-runtime";
import { Typography as q, Button as me, TextField as ge, cn as J, fieldBackgroundMixin as Ke, fieldBackgroundDisabledMixin as _e, fieldBackgroundHoverMixin as We, InputLabel as Ue, TextareaAutosize as he, focusedMixin as He, Tooltip as pe, Menu as qe, IconButton as Y, CircularProgress as ye, AutoAwesomeIcon as ae, MenuItem as Je, SendIcon as be, useAutoComplete as Ye, defaultBorderMixin as Ge, AutoFixHighIcon as Xe, Autocomplete as Qe, AutocompleteItem as Ze, ClearIcon as se } from "@firecms/ui";
import Se from "react-fast-compare";
function we(e, t = "") {
  return e ? Object.entries(e).flatMap(([n, a]) => {
    const i = t ? `${t}.${n}` : n;
    return typeof a == "object" ? we(a, i) : { [i]: a };
  }).reduce((n, a) => ({ ...n, ...a }), {}) : {};
}
const Ie = "https://api-drplyi3b6q-ey.a.run.app";
async function et(e) {
  const t = we(e.values), n = e.properties, i = {
    inputEntity: {
      entityId: e.entityId,
      values: t
    },
    properties: n,
    entityName: e.entityName,
    entityDescription: e.entityDescription,
    propertyKey: e.propertyKey,
    propertyInstructions: e.propertyInstructions,
    instructions: e.instructions
  };
  return console.debug("enhanceDataAPIStream", i), fetch(
    (e.host ?? Ie) + "/data/enhance_stream/",
    {
      // mode: "no-cors",
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Basic ${e.firebaseToken}`,
        "x-de-api-key": `Basic ${e.apiKey}`
        // "x-de-version": version
      },
      body: JSON.stringify(i)
    }
  ).then(async (r) => {
    if (!r.ok)
      throw console.error("enhanceDataAPIStream error", r), await r.json();
    const o = r.body?.getReader();
    if (!o)
      throw new Error("No reader");
    for await (const l of tt(o)) {
      const m = new TextDecoder().decode(l);
      try {
        m.split("&$# ").forEach((c) => {
          if (c && c.length > 0) {
            const g = JSON.parse(c.trim());
            g.type === "suggestion_delta" && e.onUpdateDelta(g.data.propertyKey, g.data.partialValue), g.type === "suggestion" && e.onUpdate(g.data), g.type === "result" && e.onEnd(g.data);
          }
        });
      } catch (c) {
        console.error("str", m), console.error("Error parsing stream", c), e.onError(c);
      }
    }
  });
}
function tt(e) {
  return {
    async *[Symbol.asyncIterator]() {
      let t = await e.read();
      for (; !t.done; )
        yield t.value, t = await e.read();
    }
  };
}
async function nt(e) {
  return console.debug("fetchEntityPromptSuggestion", e), fetch(
    (e.host ?? Ie) + "/data/prompt_autocomplete/",
    {
      // mode: "no-cors",
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Basic ${e.firebaseToken}`,
        "x-de-api-key": `Basic ${e.apiKey}`
      },
      body: JSON.stringify({
        entityName: e.entityName,
        input: e.input ?? null
      })
    }
  ).then(async (t) => {
    const n = await t.json();
    if (console.debug("fetchEntityPromptSuggestion data", n), !t.ok)
      throw console.error("fetchEntityPromptSuggestion", n), Error(n.message);
    return {
      prompts: n.data.prompts.map((a) => ({
        prompt: a,
        type: "sample"
      }))
    };
  });
}
function le(e, t) {
  const n = typeof e == "string" && typeof t == "string" && e.toLowerCase().trim().startsWith(t.toLowerCase().trim());
  return typeof t == "string" && n ? e.substr(e.toLowerCase().trim().indexOf(t.toLowerCase().trim()) + t.trim().length) : void 0;
}
function rt(e, t, n = "") {
  return e ? Object.entries(e).map(([a, i]) => {
    if (te(i))
      return {};
    const r = n ? `${n}.${a}` : a, o = Z(t, r);
    return ie(i, r, o);
  }).reduce((a, i) => ({ ...a, ...i }), {}) : {};
}
function re(e) {
  const t = de(e);
  if (!t)
    throw console.error("No fieldId found for property", e), new Error("Field id not found");
  return {
    name: e.name,
    description: e.description,
    dataType: e.dataType,
    fieldConfigId: t,
    enumValues: "enumValues" in e && e.enumValues ? it(e.enumValues) : void 0,
    disabled: !!(e.disabled || e.readOnly)
  };
}
function ie(e, t, n) {
  if (te(e))
    return {};
  if (e.dataType === "array") {
    if (e.of && !te(e.of)) {
      const a = {
        name: e.name,
        description: e.description,
        dataType: e.dataType,
        fieldConfigId: "repeat",
        disabled: !!(e.disabled || e.readOnly),
        of: re(e.of)
      };
      return { [t]: a };
    } else if (e.oneOf) {
      const a = {
        name: e.name,
        description: e.description,
        dataType: e.dataType,
        fieldConfigId: "block",
        disabled: !!(e.disabled || e.readOnly),
        oneOf: {
          typeField: e.oneOf.typeField,
          valueField: e.oneOf.valueField,
          properties: Object.entries(e.oneOf.properties).map(([i, r]) => ({ [i]: re(r) })).reduce((i, r) => ({ ...i, ...r }), {})
        }
      };
      return Array.isArray(n) ? n.map((i, r) => {
        const o = e.oneOf.typeField ?? "type", l = i[o], m = e.oneOf.valueField ?? "value", c = i[m], g = e.oneOf.properties[l];
        if (g === void 0)
          return console.error(`No property found for type ${l}`, e.oneOf.properties), {};
        const d = ie(g, `${t}.${r}.${m}`, c);
        return {
          [`${t}.${r}.${o}`]: l,
          ...d
        };
      }).reduce((i, r) => ({ ...i, ...r }), { [t]: a }) : { [t]: a };
    }
  } else if (e.dataType === "map") {
    if (e.properties) {
      const a = Object.entries(e.properties).map(([r, o]) => {
        const l = n?.[r];
        return ie(o, r, l);
      }).map((r) => at(r, t)).reduce((r, o) => ({ ...r, ...o }), {});
      if (Object.keys(a).length === 0)
        return {};
      const i = {
        name: e.name,
        description: e.description,
        dataType: e.dataType,
        fieldConfigId: "group",
        disabled: !!(e.disabled || e.readOnly)
      };
      return {
        [t]: i,
        ...a
      };
    }
  } else
    return de(e) ? {
      [t]: re(e)
    } : (console.warn(`No fieldId found for property ${t} with dataType ${e.dataType}`), {});
  return {};
}
function at(e, t = "") {
  return Object.entries(e).map(([n, a]) => ({ [t ? `${t}.${n}` : n]: a })).reduce((n, a) => ({ ...n, ...a }), {});
}
function it(e) {
  if (Array.isArray(e))
    return e.map((t) => String(t.id));
  if (typeof e == "object")
    return Object.keys(e);
  throw Error("getSimpleEnumValues: Invalid enumValues");
}
function ot({ projectId: e }) {
  return /* @__PURE__ */ O("div", { className: "flex flex-col space-y-1 p-1", children: [
    /* @__PURE__ */ s(q, { variant: "h6", children: "Subscription required" }),
    /* @__PURE__ */ s(q, { children: "You have finished your free usage quota." }),
    /* @__PURE__ */ s(q, { children: "You need an active subscription in order to continue using the plugin" }),
    /* @__PURE__ */ s(
      me,
      {
        href: `https://app.firecms.co/subscriptions?projectId=${e}`,
        color: "primary",
        component: "a",
        rel: "noopener noreferrer",
        target: "_blank",
        children: "Create a subscription"
      }
    )
  ] });
}
const Ee = v.createContext({}), ke = () => Ce(Ee);
function oe(e, t) {
  if (t in e)
    return e[t];
  {
    const n = t.split(".");
    if (n.length === 1)
      return;
    const a = n.slice(0, n.length - 1).join(".");
    return oe(e, a);
  }
}
function st({
  apiKey: e,
  getConfigForPath: t,
  children: n,
  host: a,
  path: i,
  collection: r,
  formContext: o,
  SubscriptionMessage: l = ot
}) {
  const [m, c] = H(!1), [g, d] = H({}), [y, b] = H([]), h = Fe(), j = Ne(), D = ee(!1), P = fe(), T = Ae(), V = De({
    collection: r,
    path: i,
    entityId: o?.entityId,
    values: o?.values,
    fields: j.propertyConfigs
  }), x = ue(() => rt(V.properties, o?.values), [o?.values]), E = v.useRef(o?.values ?? {});
  G(() => {
    D.current || (E.current = o?.values ?? {});
  }, [o?.values]);
  const k = !1, C = $(async () => {
    if (!t)
      return;
    t({
      path: i,
      collection: r
    }) && c(!0);
  }, [r, t, i]);
  G(() => {
    t ? C() : c(!0);
  }, [t, C]);
  const N = Ve(r), W = je(), X = $((f) => {
    d((S) => {
      const {
        [f]: B,
        ...w
      } = S;
      return w;
    });
  }, []), Q = (f, S) => {
    const B = oe(x, f);
    if (S === null || B?.disabled)
      return;
    const w = Z(E.current, f), A = (w ? w + "" : "") + S;
    E.current = {
      ...E.current,
      [f]: A
    }, o?.setFieldValue(f, A, !1), d((F) => ({
      ...F,
      [f]: (F[f] ?? "") + S
    }));
  }, z = (f, S, B) => {
    b((w) => w.filter((I) => !Object.keys(S).includes(I))), Object.entries(S).forEach(([w, I]) => {
      const A = Z(f, w), F = oe(x, w);
      if (!F || I === null || F.disabled)
        return;
      if (typeof I == "number") {
        o?.setFieldValue(w, I);
        return;
      }
      if (B) {
        o?.setFieldValue(w, I);
        return;
      }
      const p = le(I, A), M = A ? A + "" : "";
      if (p)
        o?.setFieldValue(w, I);
      else {
        const xe = F?.fieldConfigId === "multiline" || F?.fieldConfigId === "markdown", R = M.trimEnd();
        xe && (R.endsWith(".") || R.endsWith("?") || R.endsWith("!") || R.endsWith(":")) ? o?.setFieldValue(w, R + `

` + I.trimStart()) : o?.setFieldValue(w, R + (R.length > 0 ? " " : "") + I);
      }
    }), d((w) => ({
      ...w,
      ...Object.keys(S).reduce((I, A) => {
        const F = Z(o?.values, A), p = S[A];
        return {
          ...I,
          [A]: le(p, F) ?? p
        };
      }, {})
    }));
  };
  function U(f) {
    T.open({
      type: "warning",
      message: /* @__PURE__ */ s(l, { projectId: f, context: h }),
      autoHideDuration: 4e3
    });
  }
  const u = async (f) => {
    if (!P.user)
      return T.open({
        type: "warning",
        message: "You need to be logged in to enhance data"
      }), Promise.reject(new Error("Not logged in"));
    const S = W.resolveAliasesFrom(i), B = await P.getAuthToken();
    f.propertyKey ? X(f.propertyKey) : L(), b((I) => [...I, ...f.propertyKey ? [f.propertyKey] : Object.keys(x)]), D.current = !0;
    const w = E.current ?? {};
    return new Promise((I, A) => {
      function F(p) {
        if (b([]), p.code === "payment-required") {
          const M = p.data.projectId;
          U(M);
        } else
          console.error("Enhance error", p);
        A(p), D.current = !1;
      }
      try {
        et({
          ...f,
          host: a,
          apiKey: e,
          properties: x,
          path: S,
          entityName: r.singularName ?? r.name,
          entityDescription: r.description,
          dataSource: N,
          firebaseToken: B,
          onUpdate: (p) => {
            console.debug("de onUpdate", p), z(w, p, f.replaceValues ?? !1);
          },
          onUpdateDelta: (p, M) => {
            Q(p, M);
          },
          onError: F,
          onEnd: (p) => {
            console.debug("de onEnd", p), p.errors && p.errors.forEach((M) => {
              T.open({
                type: "warning",
                message: M
              });
            }), Object.keys(p.suggestions).length === 0 && T.open({
              type: "info",
              autoHideDuration: 1800,
              message: "No fields were updated"
            }), b([]), I(p), D.current = !1;
          }
        }).catch(F);
      } catch (p) {
        F(p);
      }
    });
  }, L = $(() => {
    d({});
  }, []), K = $(async (f, S) => {
    const B = await P.getAuthToken();
    return nt({
      host: a,
      entityName: f,
      firebaseToken: B,
      apiKey: e,
      input: S
    });
  }, [e, P.getAuthToken]), _ = {
    enabled: m,
    suggestions: g,
    clearSuggestion: X,
    enhance: u,
    allowReferenceDataSelection: k,
    clearAllSuggestions: L,
    getSamplePrompts: K,
    loadingSuggestions: y
  };
  return /* @__PURE__ */ s(
    Ee.Provider,
    {
      value: _,
      children: n
    }
  );
}
const lt = [
  "text_field",
  "number_input",
  "multiline",
  "markdown",
  "email",
  "select"
  // "multi_select",
];
function ct({
  value: e,
  setValue: t,
  label: n,
  inputType: a,
  multiline: i = !1,
  highlight: r,
  disabled: o,
  error: l,
  size: m = "medium",
  className: c
}) {
  const g = ee(null), d = ee(null), [y, b] = v.useState(e ? e.toString() : "");
  G(() => {
    b(e ? e.toString() : "");
  }, [e]);
  const h = $((k) => {
    d.current && (d.current.scrollTop = k.target.scrollTop, d.current.scrollLeft = k.target.scrollLeft);
  }, []), [j, D] = v.useState(document.activeElement === g.current), P = y != null && y !== "", T = !!r && (e === r || String(e).endsWith(r)), V = T ? String(e).substring(0, String(e).length - r.length) : y, x = $((k) => {
    const C = k.target.value;
    if (a === "number")
      if (C === "-" || C.startsWith(".") || C.endsWith("."))
        b(C);
      else {
        const N = C ? parseFloat(C) : void 0;
        N && isNaN(N) ? (t(null), b("")) : N != null ? (t(N), b(N.toString())) : (t(null), b(""));
      }
    else
      t(C), b(C);
  }, [a, t]);
  if ($((k) => {
    k.target.blur(), k.stopPropagation(), setTimeout(() => {
      k.target.focus();
    }, 0);
  }, []), o)
    return /* @__PURE__ */ s(
      ge,
      {
        label: n,
        disabled: !0,
        value: y
      }
    );
  const E = {
    onKeyPress: (k) => {
      !i && k.key === "Enter" && k.preventDefault();
    }
  };
  return /* @__PURE__ */ O("div", { className: J(
    "rounded-md relative max-w-full",
    Ke,
    o ? _e : We,
    l ? "border border-red-500 dark:border-red-600" : "",
    {
      "min-h-[48px]": m === "small",
      "min-h-[64px]": m === "medium"
    },
    c
  ), children: [
    n && /* @__PURE__ */ s(
      Ue,
      {
        className: J(
          "absolute top-1 pointer-events-none",
          l ? "text-red-500 dark:text-red-600" : j ? "text-primary" : "text-text-secondary dark:text-text-secondary-dark",
          o ? "opacity-50" : ""
        ),
        shrink: P || j,
        children: n
      }
    ),
    /* @__PURE__ */ O(
      "div",
      {
        ref: d,
        className: "inset-0 whitespace-pre-wrap min-h-16 overflow-x-auto select-none pt-8 pb-2 px-3",
        children: [
          ce(V, !T && i),
          T && /* @__PURE__ */ s("span", { className: "dark:bg-slate-700 bg-slate-300 p-px -m-px rounded-sm", children: ce(r, i) })
        ]
      }
    ),
    /* @__PURE__ */ s(
      he,
      {
        className: J(
          He,
          m === "small" ? "min-h-[48px]" : "min-h-[64px]",
          "rounded-md resize-none w-full outline-none p-[32px] text-base bg-transparent px-3 pt-[28px]",
          o && "border border-transparent outline-none opacity-50 text-gray-600 dark:text-gray-500",
          "absolute top-0 right-0 left-0 max-w-full bg-transparent text-transparent caret-gray-800 dark:caret-gray-200",
          "pt-8 pb-2 px-3"
        ),
        ignoreBoxSizing: !0,
        ref: g,
        onFocus: () => D(!0),
        onBlur: () => D(!1),
        value: y,
        sizeRef: d,
        onChange: x,
        onScroll: h,
        ...E
      }
    )
  ] });
}
function ce(e, t = !1) {
  if (typeof e == "number" || e === void 0)
    return e;
  if (typeof e != "string")
    return console.error("addLineBreaks: value is not a string", e), "";
  const n = e.split(`
`);
  return n.length === 1 ? /* @__PURE__ */ s(
    "span",
    {
      className: "break-words",
      children: e ?? " "
    }
  ) : n.map((a, i) => /* @__PURE__ */ O(v.Fragment, { children: [
    /* @__PURE__ */ s(
      "span",
      {
        className: "break-words",
        children: a ?? " "
      }
    ),
    (n.length - 1 !== i || t) && /* @__PURE__ */ s("br", {})
  ] }, i));
}
const ut = v.memo(function({
  value: t,
  setValue: n,
  error: a,
  showError: i,
  disabled: r,
  autoFocus: o,
  property: l,
  propertyKey: m,
  includeDescription: c,
  highlight: g
}) {
  let d = !1;
  l.dataType === "string" && (d = (l.multiline || l.markdown) ?? !1), Pe({
    property: l,
    value: t,
    setValue: n
  });
  const y = t ?? (l.dataType === "string" ? "" : t === 0 ? 0 : "");
  return /* @__PURE__ */ O(Le, { children: [
    /* @__PURE__ */ s(
      ct,
      {
        inputType: l.dataType === "number" ? "number" : "text",
        label: /* @__PURE__ */ s(
          $e,
          {
            icon: Be(l),
            title: (l.name ?? "") + (l.validation?.required ? " *" : "")
          }
        ),
        value: y,
        multiline: d,
        highlight: g,
        setValue: n,
        disabled: r,
        error: i
      }
    ),
    /* @__PURE__ */ s(
      ze,
      {
        includeDescription: c,
        showError: i,
        error: a,
        disabled: r,
        property: l
      }
    )
  ] });
}, (e, t) => e.value === t.value && e.error === t.error && e.showError === t.showError && e.disabled === t.disabled && Se(e.property, t.property) && e.highlight === t.highlight);
function ve(e, t) {
  let n = 0;
  for (const a in e) {
    const i = e[a], r = t[a];
    r && !r.disabled && (r.dataType === "string" || r.dataType === "number" ? n += String(i).length : r.dataType === "array" && Array.isArray(i) && r.of?.dataType === "string" ? n += i.reduce((o, l) => o + (l?.length ?? 0), 0) : r.dataType === "map" && r.properties && typeof i == "object" && (n += ve(i, r.properties)));
  }
  return n;
}
function dt(e) {
  const {
    fieldConfigId: t,
    property: n
  } = e;
  return n.disabled || n.readOnly || n.Field ? null : lt.includes(t) ? ft(e) : null;
}
function ft({
  fieldConfigId: e,
  Field: t
}) {
  return function(a) {
    const {
      enabled: i,
      suggestions: r,
      enhance: o,
      loadingSuggestions: l
    } = ke(), m = l?.includes(a.propertyKey), c = r?.[a.propertyKey], d = ve(a.context.values, a.context.collection.properties) > 5;
    return /* @__PURE__ */ s(
      mt,
      {
        loading: m,
        props: a,
        suggestedValue: c,
        enabled: i,
        enoughData: d,
        Field: t,
        enhance: o
      }
    );
  };
}
const mt = v.memo(function({
  loading: t,
  props: n,
  suggestedValue: a,
  enabled: i,
  enoughData: r,
  Field: o,
  enhance: l
}) {
  const [m, c] = H(!1), [g, d] = v.useState(!1), [y, b] = v.useState(!1), [h, j] = H();
  if (!i)
    return /* @__PURE__ */ s(o, { ...n });
  const D = !n.disabled && (!n.value || n.property.dataType === "string" && (n.property.multiline || n.property.markdown)), T = n.property.dataType === "string" && !n.property.enumValues && !n.property.markdown ? /* @__PURE__ */ s(
    ut,
    {
      ...n,
      highlight: a
    }
  ) : /* @__PURE__ */ s(o, { ...n }), V = (E) => {
    if (n.context.entityId && r)
      return b(!1), c(!0), l({
        entityId: n.context.entityId,
        propertyKey: n.propertyKey,
        propertyInstructions: E,
        values: n.context.values,
        replaceValues: !1
      }).finally(() => c(!1));
  }, x = n.property.dataType === "string" && !n.property.enumValues;
  return /* @__PURE__ */ O("div", { className: "relative", children: [
    T,
    D && /* @__PURE__ */ s("div", { className: "dark:bg-gray-700 bg-gray-100 rounded-full absolute right-2 -top-4", children: /* @__PURE__ */ s(
      pe,
      {
        open: g,
        onOpenChange: d,
        side: "left",
        title: r ? `Autofill ${n.property.name ?? "this field"}` : `You need to input some data in the form before enhancing ${n.property.name ?? "this field"}`,
        children: /* @__PURE__ */ O(
          qe,
          {
            open: y,
            onOpenChange: b,
            trigger: /* @__PURE__ */ s(
              Y,
              {
                size: "small",
                "aria-label": "Enhance field",
                disabled: m || t,
                className: r ? "text-gray-900 dark:text-white" : "text-gray-400 dark:text-gray-600",
                onClick: () => {
                  if (n.context.entityId && r)
                    return d(!1), c(!0), l({
                      entityId: n.context.entityId,
                      propertyKey: n.propertyKey,
                      values: n.context.values,
                      replaceValues: !1
                    }).finally(() => c(!1));
                },
                children: m || t ? /* @__PURE__ */ s(ye, { size: "small" }) : /* @__PURE__ */ s(
                  ae,
                  {
                    size: "small"
                  }
                )
              }
            ),
            children: [
              /* @__PURE__ */ O(Je, { onClick: () => V(), children: [
                /* @__PURE__ */ s(
                  ae,
                  {
                    size: "small"
                  }
                ),
                /* @__PURE__ */ O("div", { className: "flex flex-col", children: [
                  /* @__PURE__ */ O(
                    q,
                    {
                      variant: "body2",
                      children: [
                        " ",
                        `Autofill ${n.property.name ?? "this field"}`
                      ]
                    }
                  ),
                  /* @__PURE__ */ s(q, { variant: "caption", children: "based on the rest of the entity" })
                ] })
              ] }),
              x && /* @__PURE__ */ s("div", { className: "p-4", children: /* @__PURE__ */ s(
                ge,
                {
                  label: "Ask AI to write",
                  size: "small",
                  className: "w-[400px] max-w-full",
                  value: h ?? "",
                  onKeyDown: (E) => {
                    E.key === "Enter" && V(h);
                  },
                  placeholder: "Instructions",
                  onChange: (E) => j(E.target.value),
                  endAdornment: /* @__PURE__ */ s(
                    Y,
                    {
                      size: "small",
                      onClick: () => V(h),
                      disabled: !h,
                      children: /* @__PURE__ */ s(be, { size: "small" })
                    }
                  )
                }
              ) })
            ]
          }
        )
      }
    ) })
  ] });
}, (e, t) => e.loading === t.loading && e.suggestedValue === t.suggestedValue && e.enabled === t.enabled && e.props.value === t.props.value && e.props.error === t.props.error && e.props.showError === t.props.showError && e.props.disabled === t.props.disabled && Se(e.props.property, t.props.property) && e.Field === t.Field && e.enoughData === t.enoughData);
function Te(e, t) {
  let n = 0;
  for (const a in e) {
    const i = e[a], r = t[a];
    r && !r.disabled && (r.dataType === "string" || r.dataType === "number" ? n += i ? String(i).length : 0 : r.dataType === "array" && Array.isArray(i) && r.of?.dataType === "string" ? n += i.reduce((o, l) => o + (l?.length ?? 0), 0) : r.dataType === "map" && r.properties && typeof i == "object" && (n += Te(i, r.properties)));
  }
  return n;
}
const gt = 52;
function ht({
  entityId: e,
  path: t,
  status: n,
  collection: a,
  formContext: i
}) {
  const r = v.useRef(null), [o, l] = v.useState(n), m = bt(t, o), [c, g] = v.useState(!1), d = ke(), [y, b] = v.useState(void 0), [h, j] = v.useState(""), [D, P] = v.useState(gt), {
    inputFocused: T,
    autoCompleteOpen: V,
    setAutoCompleteOpen: x
  } = Ye({
    ref: r
  }), E = ue(() => yt(a.singularName ?? a.name, y), [y]), {
    suggestions: k,
    getSamplePrompts: C
  } = d, N = ee(!1), W = $(
    async function(L) {
      if (N.current)
        return;
      N.current = !0;
      const K = o === "new" ? (await C(a.singularName ?? a.name, L)).prompts : pt(a.properties), _ = ne(m), f = _.map((S) => S.prompt);
      b([..._, ...K.filter((S) => !f.includes(S.prompt))].slice(0, 5)), N.current = !1;
    },
    [a.name, a.singularName, C, o]
  ), X = Oe(i?.values), Q = Te(X, a.properties) > 20;
  G(() => {
    y || (b(ne(m)), W().then());
  }, [y, m, W, h, o]), G(() => {
    W().then();
  }, [o]);
  const z = (u) => {
    if (!(!e || !i?.values))
      return g(!0), x(!1), u && (St(m, u), b([{
        prompt: u,
        type: "recent"
      }, ...(y ?? []).slice(0, 5)])), d.enhance({
        entityId: e,
        values: i.values,
        instructions: u,
        replaceValues: !0
      }).finally(() => {
        g(!1);
      });
  };
  if (!d?.enabled)
    return null;
  Object.values(k).filter(Boolean).length > 0, (y ?? []).length > 0 && h.length;
  const U = !i?.entityId;
  return /* @__PURE__ */ s(
    "div",
    {
      className: "relative w-full",
      style: { height: D },
      children: /* @__PURE__ */ s("div", { className: "absolute flex flex-col items-center w-full font-medium text-sm", children: /* @__PURE__ */ O(
        "form",
        {
          className: J(
            Ge,
            "border-b",
            "flex w-full items-center gap-2 pr-4 pl-6",
            T ? "text-primary" : "text-gray-700 dark:text-gray-200"
          ),
          onSubmit: (u) => {
            x(!1), u.preventDefault(), z(h);
          },
          children: [
            /* @__PURE__ */ s(Xe, {}),
            /* @__PURE__ */ s(
              he,
              {
                className: "flex-grow w-full resize-none w-full outline-none py-5 mx-2 bg-transparent",
                ref: r,
                value: h,
                autoFocus: n === "new",
                disabled: c || U,
                onResize: (u) => {
                  P(u.outerHeightStyle);
                },
                placeholder: U ? "Please set an ID first" : E?.prompt,
                onClick: () => {
                  V || x(!0);
                },
                onKeyDown: (u) => {
                  u.key === "Enter" && !u.shiftKey && (u.preventDefault(), z(h)), u.key === "Escape" && V && (x(!1), u.preventDefault());
                },
                onChange: (u) => {
                  U || j(u.target.value);
                }
              }
            ),
            /* @__PURE__ */ s(
              Qe,
              {
                open: V,
                setOpen: x,
                children: y?.map((u, L) => /* @__PURE__ */ O(
                  Ze,
                  {
                    onClick: () => {
                      j(u.prompt), z(u.prompt);
                    },
                    children: [
                      /* @__PURE__ */ s("div", { className: "flex-grow", children: u.prompt }),
                      u.type === "recent" && /* @__PURE__ */ s(
                        Y,
                        {
                          onClick: (K) => {
                            K.preventDefault(), K.stopPropagation(), wt(m, u.prompt), b((y ?? []).filter((_) => _.prompt !== u.prompt));
                          },
                          size: "small",
                          children: /* @__PURE__ */ s(se, { size: "small" })
                        }
                      )
                    ]
                  },
                  L + "_" + u.prompt
                ))
              }
            ),
            !c && h && /* @__PURE__ */ s(
              Y,
              {
                size: "small",
                onClick: () => {
                  j(""), r.current?.focus();
                },
                color: T || !h ? "primary" : void 0,
                disabled: c,
                children: /* @__PURE__ */ s(se, { size: "small" })
              }
            ),
            (c || h) && /* @__PURE__ */ O(
              Y,
              {
                onClick: () => z(h),
                size: "large",
                color: T || !h ? "primary" : void 0,
                className: J(h ? "" : "!bg-slate-50 dark:!bg-slate-800"),
                disabled: c,
                children: [
                  c && /* @__PURE__ */ s(ye, { size: "small" }),
                  !c && h && /* @__PURE__ */ s(be, { color: "primary" })
                ]
              }
            ),
            !c && !h && /* @__PURE__ */ s(
              pe,
              {
                title: Q ? "Try to fill the missing fields. You can use the prompt to give specific instructions" : "You need to input some data in the form before enhancing this entity, or use the prompt to give specific instructions",
                children: /* @__PURE__ */ O(
                  me,
                  {
                    variant: "outlined",
                    size: "small",
                    onClick: () => z(),
                    disabled: !Q || c,
                    children: [
                      /* @__PURE__ */ s(ae, { color: "primary" }),
                      "Autofill"
                    ]
                  }
                )
              }
            )
          ]
        }
      ) })
    }
  );
}
function pt(e) {
  const t = Object.values(e).filter((i) => te(i) ? !1 : i.dataType === "string" && (i.markdown || i.multiline)), n = t.length > 0 ? t[Math.floor(Math.random() * t.length)] : void 0, a = [
    "Fill the missing fields",
    "Translate the missing content"
  ];
  return n && a.push(`Add 2 paragraphs to '${n.name}'`), a.map((i) => ({
    prompt: i,
    type: "sample"
  }));
}
function yt(e, t) {
  const n = (t ?? []).length > 0 ? t : [
    "e.g. I want to generate a new document about...",
    "e.g. Add a paragraph to the description",
    `e.g. Generate a new ${Me(e)} related to...`
  ].map((a) => ({
    prompt: a,
    type: "sample"
  }));
  return n[Math.floor(Math.random() * n.length)];
}
const bt = (e, t) => `data_enhancement::${t === "new" ? "new" : "existing"}::${Re(e)}`, ne = (e) => {
  const t = localStorage.getItem(e);
  return t ? JSON.parse(t).map((n) => ({
    prompt: n,
    type: "recent"
  })) : [];
}, St = (e, t) => {
  if (!t || t.trim().length === 0)
    return;
  const n = ne(e);
  localStorage.setItem(e, JSON.stringify([t, ...n.map((a) => a.prompt).filter((a) => a !== t).slice(0, 5)]));
}, wt = (e, t) => {
  localStorage.setItem(e, JSON.stringify(ne(e).map((n) => n.prompt).filter((n) => n !== t)));
}, It = "fcms-U9jdDii0xXWSDC34asfrf54lbkFJBfKfRWcEDEwdc4V5wDWEDF";
function Ct(e) {
  const t = e?.apiKey ?? It, n = e?.getConfigForPath, a = fe(), i = $((r) => n ? n({
    path: r.path,
    collection: r.collection,
    user: a.user
  }) : !0, [n, a.user]);
  return {
    key: "data_enhancement",
    form: {
      Actions: ht,
      provider: {
        Component: st,
        props: {
          apiKey: t,
          getConfigForPath: n,
          SubscriptionMessage: e?.SubscriptionMessage,
          host: e?.host
        }
      },
      fieldBuilder: dt,
      fieldBuilderEnabled: i
    },
    homePage: {
      // CollectionActions: EnhanceCollectionIcon,
      extraProps: {
        getConfigForPath: n
      }
    }
    // loading: configController.loading,
  };
}
export {
  Ct as useDataEnhancementPlugin
};
//# sourceMappingURL=index.es.js.map
