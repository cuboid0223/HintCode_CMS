{"version":3,"file":"index.es.js","sources":["../src/utils/values.ts","../src/api.ts","../src/utils/suggestions.ts","../src/utils/properties.ts","../src/components/DefaultSubscriptionMessage.tsx","../src/components/DataEnhancementControllerProvider.tsx","../src/utils/fields.ts","../src/components/fields/AdvancedTextField.tsx","../src/components/fields/EnhanceTextField.tsx","../src/utils/strings_counter.ts","../src/components/field_builder.tsx","../src/utils/countStringCharacters.ts","../src/components/FormEnhanceAction.tsx","../src/useDataEnhancementPlugin.tsx"],"sourcesContent":["export function flatMapEntityValues<M extends object>(values: M, path = \"\"): object {\n    if (!values) return {};\n    return Object.entries(values).flatMap(([key, value]) => {\n        const currentPath = path ? `${path}.${key}` : key;\n        if (typeof value === \"object\") {\n            return flatMapEntityValues(value, currentPath);\n        } else {\n            return { [currentPath]: value };\n        }\n    }).reduce((acc, curr) => ({ ...acc, ...curr }), {})\n}\n","import {\n    DataEnhancementRequest,\n    EnhancedDataResult,\n    InputEntity,\n    InputProperty,\n    SamplePromptsResult\n} from \"./types/data_enhancement_controller\";\nimport { DataSource, EntityValues } from \"@firecms/core\";\nimport { flatMapEntityValues } from \"./utils/values\";\n\n// const DEFAULT_SERVER = \"http://localhost:5001/firecms-dev-2da42/europe-west3/api\"; // Local\n\nconst DEFAULT_SERVER = \"https://api-drplyi3b6q-ey.a.run.app\";\n\nexport async function enhanceDataAPIStream<M extends object>(props: {\n    apiKey: string,\n    entityId: string,\n    entityName: string,\n    entityDescription?: string,\n    propertyKey?: string,\n    propertyInstructions?: string;\n    values: EntityValues<M>,\n    path: string,\n    properties: Record<string, InputProperty>,\n    dataSource: DataSource,\n    instructions?: string,\n    firebaseToken: string,\n    onUpdate: (suggestions: Record<string, any>) => void;\n    onUpdateDelta: (propertyKey: string, partialValue: any) => void;\n    onError: (error: Error) => void;\n    onEnd: (result: EnhancedDataResult) => void;\n    host?: string;\n}) {\n\n    const flatValues = flatMapEntityValues(props.values);\n\n    const properties = props.properties;\n\n    const inputEntity: InputEntity = {\n        entityId: props.entityId,\n        values: flatValues\n    }\n\n    const request: DataEnhancementRequest = {\n        inputEntity,\n        properties,\n        entityName: props.entityName,\n        entityDescription: props.entityDescription,\n        propertyKey: props.propertyKey,\n        propertyInstructions: props.propertyInstructions,\n        instructions: props.instructions\n    };\n\n    console.debug(\"enhanceDataAPIStream\", request);\n\n    return fetch((props.host ?? DEFAULT_SERVER) + \"/data/enhance_stream/\",\n        {\n            // mode: \"no-cors\",\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Basic ${props.firebaseToken}`,\n                \"x-de-api-key\": `Basic ${props.apiKey}`,\n                // \"x-de-version\": version\n            },\n            body: JSON.stringify(request)\n        })\n        .then(async (res) => {\n            if (!res.ok) {\n                console.error(\"enhanceDataAPIStream error\", res)\n                throw await res.json();\n            }\n            const reader = res.body?.getReader();\n            if (!reader) {\n                throw new Error(\"No reader\");\n            }\n\n            for await (const chunk of readChunks(reader)) {\n                const str = new TextDecoder().decode(chunk);\n                try {\n                    str.split(\"&$# \").forEach((s) => {\n                        if (s && s.length > 0) {\n                            const data = JSON.parse(s.trim());\n                            if (data.type === \"suggestion_delta\")\n                                props.onUpdateDelta(data.data.propertyKey, data.data.partialValue);\n                            if (data.type === \"suggestion\")\n                                props.onUpdate(data.data);\n                            if (data.type === \"result\")\n                                props.onEnd(data.data);\n                        }\n                    });\n                } catch (e: any) {\n                    console.error(\"str\", str);\n                    console.error(\"Error parsing stream\", e);\n                    props.onError(e);\n                }\n            }\n\n        });\n\n}\n\nfunction readChunks(reader: ReadableStreamDefaultReader) {\n    return {\n        async * [Symbol.asyncIterator]() {\n            let readResult = await reader.read();\n            while (!readResult.done) {\n                yield readResult.value;\n                readResult = await reader.read();\n            }\n        }\n    };\n}\n\nexport async function fetchEntityPromptSuggestion<M extends object>(props: {\n    input?: string,\n    entityName: string,\n    firebaseToken: string,\n    apiKey: string,\n    host?: string\n}): Promise<SamplePromptsResult> {\n\n    console.debug(\"fetchEntityPromptSuggestion\", props);\n    return fetch((props.host ?? DEFAULT_SERVER) + \"/data/prompt_autocomplete/\",\n        {\n            // mode: \"no-cors\",\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Basic ${props.firebaseToken}`,\n                \"x-de-api-key\": `Basic ${props.apiKey}`\n            },\n            body: JSON.stringify({\n                entityName: props.entityName,\n                input: props.input ?? null\n            })\n        })\n        .then(async (res) => {\n            const data = await res.json();\n            console.debug(\"fetchEntityPromptSuggestion data\", data);\n            if (!res.ok) {\n                console.error(\"fetchEntityPromptSuggestion\", data);\n                throw Error(data.message);\n            }\n            return {\n                prompts: data.data.prompts.map((e: string) => ({\n                    prompt: e,\n                    type: \"sample\"\n                }))\n            };\n        });\n\n}\n","export function getAppendableSuggestion(suggestion: string | number | undefined, value: any): string | undefined {\n    const suggestionIncludesValue = typeof suggestion === \"string\" && typeof value === \"string\" && suggestion.toLowerCase().trim().startsWith(value.toLowerCase().trim());\n    return (typeof value === \"string\" && suggestionIncludesValue)\n        ? suggestion.substr(suggestion.toLowerCase().trim().indexOf(value.toLowerCase().trim()) + value.trim().length)\n        : undefined;\n}\n","import {\n    EnumValues,\n    getFieldId,\n    getValueInPath,\n    isPropertyBuilder,\n    PropertiesOrBuilders,\n    Property,\n    PropertyOrBuilder\n} from \"@firecms/core\";\nimport { InputProperty } from \"../types/data_enhancement_controller\";\n\nexport function getSimplifiedProperties<M extends Record<string, any>>(properties: PropertiesOrBuilders<M>, values: M, path = \"\"): Record<string, InputProperty> {\n    if (!properties) return {};\n    return Object.entries(properties)\n        .map(([key, property]) => {\n            if (isPropertyBuilder(property)) return {};\n            const fullKey = path ? `${path}.${key}` : key;\n            const valueInPath = getValueInPath(values, fullKey);\n            return getSimplifiedProperty(property, fullKey, valueInPath)\n        })\n        .reduce((a, b) => ({ ...a, ...b }), {});\n}\n\nfunction getSimpleProperty(property: Property): InputProperty {\n    const fieldId = getFieldId(property);\n    if (!fieldId) {\n        console.error(\"No fieldId found for property\", property);\n        throw new Error(\"Field id not found\");\n    }\n    return {\n        name: property.name,\n        description: property.description,\n        dataType: property.dataType,\n        fieldConfigId: fieldId,\n        enumValues: \"enumValues\" in property && property.enumValues\n            ? getSimpleEnumValues(property.enumValues)\n            : undefined,\n        disabled: Boolean(property.disabled || property.readOnly)\n    };\n}\n\nfunction getSimplifiedProperty(property: PropertyOrBuilder, path: string, value?: any): Record<string, InputProperty> {\n    if (isPropertyBuilder(property)) return {};\n    if (property.dataType === \"array\") {\n\n        if (property.of && !isPropertyBuilder(property.of as PropertyOrBuilder)) {\n            const arrayParentProperty: InputProperty = {\n                name: property.name,\n                description: property.description,\n                dataType: property.dataType,\n                fieldConfigId: \"repeat\",\n                disabled: Boolean(property.disabled || property.readOnly),\n                of: getSimpleProperty(property.of as Property)\n            };\n\n            const result = { [path]: arrayParentProperty };\n            // if (Array.isArray(value)) {\n            //     result = {\n            //         ...result,\n            //         ...value\n            //             .map((v, i) => getSimplifiedProperty(property.of as PropertyOrBuilder, `${path}.${i}`, v))\n            //             .reduce((a, b) => ({ ...a, ...b }), {})\n            //     };\n            // }\n            //\n            // const existingValuesCount = Array.isArray(value) ? value.length : 0;\n            //\n            // const newValuesCount = property.of && !isPropertyBuilder<any, any>(property.of) && (property.of as Property).dataType === \"map\" ? 1 : 3;\n            // result = {\n            //     ...result,\n            //     // ...Array.from(Array(newValuesCount))\n            //     //     .map((v, i) => getSimplifiedProperty(property.of as PropertyOrBuilder, `${path}.${i + existingValuesCount}`, v))\n            //     //     .reduce((a, b) => ({ ...a, ...b }), {})\n            // }\n\n            return result;\n        } else if (property.oneOf) {\n\n            const arrayParentProperty: InputProperty = {\n                name: property.name,\n                description: property.description,\n                dataType: property.dataType,\n                fieldConfigId: \"block\",\n                disabled: Boolean(property.disabled || property.readOnly),\n                oneOf: {\n                    typeField: property.oneOf.typeField,\n                    valueField: property.oneOf.valueField,\n                    properties: Object.entries(property.oneOf.properties)\n                        .map(([key, prop]) => ({ [key]: getSimpleProperty(prop) }))\n                        .reduce((a, b) => ({ ...a, ...b }), {})\n                }\n            };\n\n            if (!Array.isArray(value)) {\n                return { [path]: arrayParentProperty };\n            }\n\n            return value.map((v, i) => {\n                const typeKey = property.oneOf!.typeField ?? \"type\";\n                const oneOfType = v[typeKey];\n                const valueKey = property.oneOf!.valueField ?? \"value\";\n                const oneOfValue = v[valueKey];\n                const childProperty = property.oneOf!.properties[oneOfType];\n                if (childProperty === undefined) {\n                    console.error(`No property found for type ${oneOfType}`, property.oneOf!.properties);\n                    return {};\n                }\n                const simplifiedProperty = getSimplifiedProperty(childProperty, `${path}.${i}.${valueKey}`, oneOfValue);\n                return {\n                    [`${path}.${i}.${typeKey}`]: oneOfType,\n                    ...simplifiedProperty\n                };\n            }).reduce((a, b) => ({ ...a, ...b }), { [path]: arrayParentProperty });\n        }\n    } else if (property.dataType === \"map\") {\n        if (property.properties) {\n            const mapProperties: Record<string, InputProperty> = Object.entries(property.properties)\n                .map(([key, childProperty]) => {\n                    const childValue = value?.[key];\n                    return getSimplifiedProperty(childProperty, key, childValue);\n                })\n                .map(o => attachPathToKeys(o, path))\n                .reduce((a, b) => ({ ...a, ...b }), {});\n\n            if (Object.keys(mapProperties).length === 0) return {};\n            const mapParentProperty: InputProperty = {\n                name: property.name,\n                description: property.description,\n                dataType: property.dataType,\n                fieldConfigId: \"group\",\n                disabled: Boolean(property.disabled || property.readOnly)\n            };\n            return {\n                [path]: mapParentProperty,\n                ...mapProperties\n            } as Record<string, InputProperty>;\n        }\n    } else {\n        const fieldId = getFieldId(property);\n        if (!fieldId) {\n            console.warn(`No fieldId found for property ${path} with dataType ${property.dataType}`);\n            return {};\n        }\n        return {\n            [path]: getSimpleProperty(property)\n        };\n    }\n    return {};\n}\n\n// attach a path to every key in an object\nfunction attachPathToKeys(obj: Record<string, any>, path = \"\"): Record<string, any> {\n    return Object.entries(obj)\n        .map(([key, value]) => {\n            const fullKey = path ? `${path}.${key}` : key;\n            return { [fullKey]: value };\n        })\n        .reduce((a, b) => ({ ...a, ...b }), {});\n}\n\nfunction getSimpleEnumValues(enumValues: EnumValues): string[] {\n    if (Array.isArray(enumValues))\n        return enumValues.map(v => String(v.id));\n    if (typeof enumValues === \"object\")\n        return Object.keys(enumValues);\n    throw Error(\"getSimpleEnumValues: Invalid enumValues\");\n}\n","import React from \"react\";\nimport { Button, Typography } from \"@firecms/ui\";\nimport { SubscriptionMessageProps } from \"../types/subscriptions_message_props\";\n\nexport function DefaultSubscriptionMessage({ projectId }: SubscriptionMessageProps) {\n    return (\n        <div className=\"flex flex-col space-y-1 p-1\">\n            <Typography variant={\"h6\"}>Subscription required</Typography>\n            <Typography>You have finished your free usage quota.</Typography>\n            <Typography>You need an active subscription in order to continue using\n                the plugin</Typography>\n            <Button\n                href={`https://app.firecms.co/subscriptions?projectId=${projectId}`}\n                color={\"primary\"}\n                component={\"a\"}\n                rel=\"noopener noreferrer\"\n                target=\"_blank\">\n                Create a subscription\n            </Button>\n        </div>\n    )\n}\n","import React, { PropsWithChildren, useCallback, useContext, useEffect, useMemo, useRef, useState } from \"react\";\n\nimport {\n    DataEnhancementController,\n    EnhancedDataResult,\n    EnhanceParams,\n    InputProperty\n} from \"../types/data_enhancement_controller\";\nimport {\n    DataSource,\n    Entity,\n    EntityCollection,\n    getValueInPath,\n    PluginFormActionProps,\n    resolveCollection,\n    useAuthController,\n    useCustomizationController,\n    useDataSource,\n    useFireCMSContext,\n    useNavigationController,\n    useSnackbarController\n} from \"@firecms/core\";\n\nimport { enhanceDataAPIStream, fetchEntityPromptSuggestion } from \"../api\";\nimport { getAppendableSuggestion } from \"../utils/suggestions\";\nimport { getSimplifiedProperties } from \"../utils/properties\";\nimport { DefaultSubscriptionMessage } from \"./DefaultSubscriptionMessage\";\nimport { SubscriptionMessageProps } from \"../types/subscriptions_message_props\";\n\nexport const DataEnhancementControllerContext = React.createContext<DataEnhancementController>({} as any);\n\nexport type DataEnhancementControllerProviderProps = {\n\n    apiKey: string;\n\n    getConfigForPath?: (props: {\n        path: string,\n        collection: EntityCollection\n    }) => boolean;\n\n    SubscriptionMessage?: React.ComponentType<SubscriptionMessageProps>;\n\n    host?: string;\n}\n\nexport const useDataEnhancementController = (): DataEnhancementController => useContext(DataEnhancementControllerContext);\n\nfunction getPropertyFromKey(properties: Record<string, InputProperty>, propertyKey: string) {\n    if (propertyKey in properties) {\n        return properties[propertyKey];\n    } else {\n        //split the property key\n        const split = propertyKey.split(\".\");\n        if (split.length === 1) {\n            return undefined;\n        }\n        const parentKey = split.slice(0, split.length - 1).join(\".\");\n        return getPropertyFromKey(properties, parentKey);\n\n    }\n}\n\nexport function DataEnhancementControllerProvider({\n                                                      apiKey,\n                                                      getConfigForPath,\n                                                      children,\n                                                      host,\n                                                      path,\n                                                      collection,\n                                                      formContext,\n                                                      SubscriptionMessage: SubscriptionMessageProp = DefaultSubscriptionMessage\n                                                  }: PropsWithChildren<DataEnhancementControllerProviderProps & PluginFormActionProps<any>>) {\n\n    const [enabled, setEnabled] = useState(false);\n    const [suggestions, setSuggestions] = useState<Record<string, string | number>>({});\n    const [loadingSuggestions, setLoadingSuggestions] = useState<string[]>([]);\n\n    const context = useFireCMSContext();\n    const customizationController = useCustomizationController();\n    const enhancingInProgress = useRef(false);\n\n    const authController = useAuthController();\n    const snackbarController = useSnackbarController();\n\n    const resolvedCollection = resolveCollection({\n        collection,\n        path,\n        entityId: formContext?.entityId,\n        values: formContext?.values,\n        fields: customizationController.propertyConfigs\n    });\n\n    const properties = useMemo(() => getSimplifiedProperties(resolvedCollection.properties, formContext?.values), [formContext?.values]);\n    // const preEnhanceValuesRef = React.useRef(formContext?.values ?? {});\n    const valuesRef = React.useRef(formContext?.values ?? {});\n    useEffect(() => {\n        if (!enhancingInProgress.current)\n            valuesRef.current = formContext?.values ?? {};\n    }, [formContext?.values]);\n\n    const allowReferenceDataSelection = false;\n\n    const updateConfig = useCallback(async () => {\n        if (!getConfigForPath) return;\n        const config = getConfigForPath({\n            path,\n            collection\n        });\n        if (config) {\n            setEnabled(true);\n        }\n    }, [collection, getConfigForPath, path]);\n\n    useEffect(() => {\n        if (!getConfigForPath) {\n            setEnabled(true);\n        } else {\n            updateConfig();\n        }\n\n    }, [getConfigForPath, updateConfig]);\n\n    const dataSource = useDataSource(collection);\n    const navigationController = useNavigationController();\n\n    const clearSuggestion = useCallback((propertyKey: string) => {\n        setSuggestions((prev) => {\n            //remove propertyKey from prev\n            const {\n                [propertyKey]: _,\n                ...rest\n            } = prev;\n            return rest;\n        });\n    }, []);\n\n    const appendValueDelta = (propertyKey: string, delta: string) => {\n\n        const property = getPropertyFromKey(properties, propertyKey);\n        if (delta === null || property?.disabled) {\n            return;\n        }\n\n        // clearSuggestion(propertyKey);\n        const value = getValueInPath(valuesRef.current, propertyKey);\n\n        const currentValue = value ? (value as string) + \"\" : \"\";\n        const updatedValue = currentValue + delta;\n        // if (currentValue.length === 0) updatedValue = updatedValue.trimStart();\n        valuesRef.current = {\n            ...valuesRef.current,\n            [propertyKey]: updatedValue\n        };\n        formContext?.setFieldValue(propertyKey, updatedValue, false);\n        setSuggestions(prev => ({\n            ...prev,\n            [propertyKey]: (prev[propertyKey] ?? \"\") + delta\n        }));\n    };\n\n    const updateSuggestedValues = (currentValues: object, updatedValues: Record<string, string | number>, replaceValues: boolean) => {\n\n        setLoadingSuggestions((prev) => {\n            return prev.filter(p => !Object.keys(updatedValues).includes(p));\n        });\n\n        Object.entries(updatedValues).forEach(([propertyKey, suggestion]) => {\n\n            const value = getValueInPath(currentValues, propertyKey);\n            const property = getPropertyFromKey(properties, propertyKey);\n\n            if (!property || suggestion === null || property.disabled) {\n                return;\n            }\n\n            if (typeof suggestion === \"number\") {\n                formContext?.setFieldValue(propertyKey, suggestion);\n                return;\n            }\n\n            if (replaceValues) {\n                formContext?.setFieldValue(propertyKey, suggestion);\n                return;\n            }\n\n            const appendableValue = getAppendableSuggestion(suggestion, value);\n\n            const currentValue = value ? (value as string) + \"\" : \"\";\n            if (appendableValue) {\n                formContext?.setFieldValue(propertyKey, suggestion);\n            } else {\n                const multiline = property?.fieldConfigId === \"multiline\" || property?.fieldConfigId === \"markdown\";\n                const trimmedValue = currentValue.trimEnd();\n                if (multiline && (trimmedValue.endsWith(\".\") || trimmedValue.endsWith(\"?\") || trimmedValue.endsWith(\"!\") || trimmedValue.endsWith(\":\"))) {\n                    formContext?.setFieldValue(propertyKey, trimmedValue + \"\\n\\n\" + (suggestion as string).trimStart());\n                } else {\n                    formContext?.setFieldValue(propertyKey, trimmedValue + (trimmedValue.length > 0 ? \" \" : \"\") + (suggestion as string));\n                }\n            }\n        });\n\n        setSuggestions(prev => ({\n            ...prev,\n            ...Object.keys(updatedValues)\n                .reduce((acc, key) => {\n                    const value = getValueInPath(formContext?.values, key);\n                    const suggestion = updatedValues[key];\n                    return {\n                        ...acc,\n                        [key]: getAppendableSuggestion(suggestion, value) ?? suggestion\n                    };\n                }, {})\n        }));\n    };\n\n    function displayNeededSubscriptionSnackbar(projectId: any) {\n        snackbarController.open({\n            type: \"warning\",\n            message: <SubscriptionMessageProp projectId={projectId} context={context}/>,\n            autoHideDuration: 4000\n        })\n    }\n\n    const enhance = async (props: EnhanceParams<any>): Promise<EnhancedDataResult> => {\n\n        if (!authController.user) {\n            snackbarController.open({\n                type: \"warning\",\n                message: \"You need to be logged in to enhance data\"\n            });\n            return Promise.reject(new Error(\"Not logged in\"));\n        }\n\n        const resolvedPath = navigationController.resolveAliasesFrom(path);\n        const firebaseToken = await authController.getAuthToken();\n\n        if (props.propertyKey) {\n            clearSuggestion(props.propertyKey)\n        } else {\n            clearAllSuggestions();\n        }\n\n        setLoadingSuggestions((prev) => [...prev, ...(props.propertyKey ? [props.propertyKey] : Object.keys(properties))]);\n        enhancingInProgress.current = true;\n\n        const currentValues = valuesRef.current ?? {};\n\n        return new Promise((resolve, reject) => {\n            function onError(e: any) {\n                setLoadingSuggestions([]);\n                if (e.code === \"payment-required\") {\n                    const projectId = e.data.projectId;\n                    displayNeededSubscriptionSnackbar(projectId);\n                } else {\n                    console.error(\"Enhance error\", e);\n                }\n                reject(e);\n                enhancingInProgress.current = false;\n            }\n\n            try {\n                enhanceDataAPIStream({\n                    ...props,\n                    host,\n                    apiKey,\n                    properties,\n                    path: resolvedPath,\n                    entityName: collection.singularName ?? collection.name,\n                    entityDescription: collection.description,\n                    dataSource,\n                    firebaseToken,\n                    onUpdate: (suggestions) => {\n                        console.debug(\"de onUpdate\", suggestions);\n                        updateSuggestedValues(currentValues, suggestions, props.replaceValues ?? false);\n                    },\n                    onUpdateDelta: (propertyKey: string, partialValue: string) => {\n                        // console.debug(\"de delta\", propertyKey, partialValue);\n                        appendValueDelta(propertyKey, partialValue);\n                    },\n                    onError,\n                    onEnd: (result) => {\n                        console.debug(\"de onEnd\", result);\n                        if (result.errors) {\n                            result.errors.forEach((error) => {\n                                snackbarController.open({\n                                    type: \"warning\",\n                                    message: error\n                                })\n                            });\n                        }\n                        if (Object.keys(result.suggestions).length === 0) {\n                            snackbarController.open({\n                                type: \"info\",\n                                autoHideDuration: 1800,\n                                message: \"No fields were updated\"\n                            })\n                        }\n                        setLoadingSuggestions([]);\n                        resolve(result);\n                        enhancingInProgress.current = false;\n                    }\n                }).catch(onError);\n            } catch (e: any) {\n                onError(e);\n            }\n        })\n    };\n\n    const clearAllSuggestions = useCallback(() => {\n        setSuggestions({});\n    }, []);\n\n    const getSamplePrompts = useCallback(async (entityName: string, input?: string) => {\n        const firebaseToken = await authController.getAuthToken()\n        return fetchEntityPromptSuggestion({\n            host,\n            entityName,\n            firebaseToken,\n            apiKey,\n            input\n        });\n    }, [apiKey, authController.getAuthToken]);\n\n    const dataEnhancementController: DataEnhancementController = {\n        enabled,\n        suggestions,\n        clearSuggestion,\n        enhance,\n        allowReferenceDataSelection,\n        clearAllSuggestions,\n        getSamplePrompts,\n        loadingSuggestions\n    };\n\n    return (\n        <DataEnhancementControllerContext.Provider\n            value={dataEnhancementController}>\n            {children}\n        </DataEnhancementControllerContext.Provider>\n    );\n}\n\nconst ENTITIES_COUNT = 1;\n\nasync function getOtherEntities(collection: EntityCollection, dataSource: DataSource, path: string, entityId: string): Promise<Entity<any>[]> {\n    const fetchedDocs = await dataSource.fetchCollection({\n        path,\n        collection,\n        filter: { __name__: [\">\", entityId] },\n        orderBy: \"__name__\",\n        order: \"asc\",\n        limit: ENTITIES_COUNT\n    });\n    if (fetchedDocs.length < ENTITIES_COUNT) {\n        fetchedDocs.push(...await dataSource.fetchCollection({\n            path,\n            collection,\n            filter: { __name__: [\"<\", entityId] },\n            orderBy: \"__name__\",\n            order: \"asc\",\n            limit: ENTITIES_COUNT - fetchedDocs.length\n        }))\n    }\n    return fetchedDocs;\n}\n","export const SUPPORTED_FIELDS_ENHANCEMENT: string[] = [\n    \"text_field\",\n    \"number_input\",\n    \"multiline\",\n    \"markdown\",\n    \"email\",\n    \"select\"\n    // \"multi_select\",\n];\n","import React, { useCallback, useEffect, useRef } from \"react\";\n\nimport {\n    cn,\n    fieldBackgroundDisabledMixin,\n    fieldBackgroundHoverMixin,\n    fieldBackgroundMixin,\n    focusedMixin,\n    InputLabel,\n    TextareaAutosize,\n    TextField\n} from \"@firecms/ui\";\n\nexport type InputType<T> = T extends string ? \"text\" : \"number\";\n\nexport function AdvancedTextField<T extends string | number>({\n                                                                 value,\n                                                                 setValue,\n                                                                 label,\n                                                                 inputType,\n                                                                 multiline = false,\n                                                                 highlight,\n                                                                 disabled,\n                                                                 error,\n                                                                 size = \"medium\",\n                                                                 className\n                                                             }: {\n    inputType: InputType<T>,\n    value: T,\n    setValue: (value: T | null) => void,\n    highlight?: string,\n    label: React.ReactNode,\n    multiline?: boolean,\n    disabled: boolean,\n    error: boolean,\n    size?: \"small\" | \"medium\",\n    className?: string,\n}) {\n\n    const inputRef = useRef(null);\n    const ref = useRef<HTMLDivElement>(null);\n\n    const [internalValue, setInternalValue] = React.useState<string>(value ? value.toString() : \"\");\n\n    useEffect(() => {\n        setInternalValue(value ? value.toString() : \"\");\n    }, [value]);\n\n    const onScroll = useCallback((e: any) => {\n        if (!ref.current) return;\n        ref.current.scrollTop = e.target.scrollTop;\n        ref.current.scrollLeft = e.target.scrollLeft;\n    }, []);\n\n    const [focused, setFocused] = React.useState(document.activeElement === inputRef.current);\n\n    const hasValue = internalValue !== undefined && internalValue !== null && internalValue !== \"\";\n\n    const endsWithHighlight = !!highlight && (value === highlight || String(value).endsWith(highlight));\n    const originalValue = endsWithHighlight\n        ? String(value).substring(0, String(value).length - highlight.length)\n        : internalValue;\n\n    const onChange = useCallback((event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        const stringValue = event.target.value;\n        if (inputType === \"number\") {\n            if (stringValue === \"-\" || stringValue.startsWith(\".\") || stringValue.endsWith(\".\")) {\n                setInternalValue(stringValue);\n            } else {\n                const numberValue = stringValue ? parseFloat(stringValue) : undefined;\n                if (numberValue && isNaN(numberValue)) {\n                    setValue(null);\n                    setInternalValue(\"\");\n                } else if (numberValue !== undefined && numberValue !== null) {\n                    setValue(numberValue as T);\n                    setInternalValue(numberValue.toString());\n                } else {\n                    setValue(null);\n                    setInternalValue(\"\");\n                }\n            }\n        } else {\n            setValue(stringValue as T);\n            setInternalValue(stringValue);\n        }\n    }, [inputType, setValue]);\n\n    const numberInputOnWheelPreventChange = useCallback((e: any) => {\n        e.target.blur()\n        e.stopPropagation()\n        setTimeout(() => {\n            e.target.focus()\n        }, 0)\n    }, []);\n\n    if (disabled) {\n        return <TextField label={label}\n                          disabled={true}\n                          value={internalValue}/>\n    }\n\n    const additional: any = {\n        onKeyPress: (e: any) => {\n            // if (e.key === \"Enter\") {\n            //     e.preventDefault();\n            //     e.stopPropagation();\n            // }\n            if (!multiline && e.key === \"Enter\") {\n                e.preventDefault();\n            }\n        }\n    }\n\n    return (\n        <div className={cn(\n            \"rounded-md relative max-w-full\",\n            fieldBackgroundMixin,\n            disabled ? fieldBackgroundDisabledMixin : fieldBackgroundHoverMixin,\n            error ? \"border border-red-500 dark:border-red-600\" : \"\",\n            {\n                \"min-h-[48px]\": size === \"small\",\n                \"min-h-[64px]\": size === \"medium\"\n            },\n            className)}>\n\n            {label && (\n                <InputLabel\n                    className={cn(\"absolute top-1 pointer-events-none\",\n                        !error ? (focused ? \"text-primary\" : \"text-text-secondary dark:text-text-secondary-dark\") : \"text-red-500 dark:text-red-600\",\n                        disabled ? \"opacity-50\" : \"\")}\n                    shrink={hasValue || focused}\n                >\n                    {label}\n                </InputLabel>\n            )}\n\n            <div ref={ref}\n                 className=\"inset-0 whitespace-pre-wrap min-h-16 overflow-x-auto select-none pt-8 pb-2 px-3\">\n\n                {addLineBreaks(originalValue, !endsWithHighlight && multiline)}\n\n                {endsWithHighlight &&\n                    <span className=\"dark:bg-slate-700 bg-slate-300 p-px -m-px rounded-sm\">\n                    {addLineBreaks(highlight, multiline)}\n                </span>}\n\n            </div>\n\n            <TextareaAutosize\n                className={cn(\n                    focusedMixin,\n                    size === \"small\" ? \"min-h-[48px]\" : \"min-h-[64px]\",\n                    \"rounded-md resize-none w-full outline-none p-[32px] text-base bg-transparent px-3 pt-[28px]\",\n                    disabled && \"border border-transparent outline-none opacity-50 text-gray-600 dark:text-gray-500\",\n                    \"absolute top-0 right-0 left-0 max-w-full bg-transparent text-transparent caret-gray-800 dark:caret-gray-200\",\n                    \"pt-8 pb-2 px-3\",\n                )}\n                ignoreBoxSizing={true}\n                ref={inputRef}\n                onFocus={() => setFocused(true)}\n                onBlur={() => setFocused(false)}\n                value={internalValue}\n                sizeRef={ref}\n                onChange={onChange}\n                onScroll={onScroll}\n                {...additional}/>\n\n        </div>\n    );\n}\n\nfunction addLineBreaks(value?: string | number, addLastBreak = false) {\n    if (typeof value === \"number\" || value === undefined)\n        return value;\n    if (typeof value !== \"string\") {\n        console.error(\"addLineBreaks: value is not a string\", value)\n        return \"\";\n    }\n    const lines = value.split(\"\\n\");\n    if (lines.length === 1)\n        return <span className=\"break-words\"\n        >{value ?? \" \"}</span>;\n    // @ts-ignore\n    return lines.map((p, i) => <React.Fragment key={i}>\n        <span className=\"break-words\"\n        >{p ?? \" \"}</span>\n        {(lines.length - 1 !== i || addLastBreak) && <br/>}\n    </React.Fragment>);\n}\n","import React from \"react\";\nimport equal from \"react-fast-compare\"\n\nimport { FieldHelperText, FieldProps, getIconForProperty, LabelWithIcon, useClearRestoreValue } from \"@firecms/core\";\nimport { AdvancedTextField, InputType } from \"./AdvancedTextField\";\n\n/**\n * Generic text field.\n * This is one of the internal components that get mapped natively inside forms\n * and tables to the specified properties.\n * @group Form fields\n */\nexport const EnhanceTextFieldBinding = React.memo(function EnhanceTextFieldBinding<T extends string | number>({\n                                                                                                                  value,\n                                                                                                                  setValue,\n                                                                                                                  error,\n                                                                                                                  showError,\n                                                                                                                  disabled,\n                                                                                                                  autoFocus,\n                                                                                                                  property,\n                                                                                                                  propertyKey,\n                                                                                                                  includeDescription,\n                                                                                                                  highlight\n                                                                                                              }: FieldProps<T> & {\n    highlight?: string\n}) {\n\n    let multiline: boolean | undefined = false;\n    if (property.dataType === \"string\") {\n        multiline = (property.multiline || property.markdown) ?? false;\n    }\n\n    useClearRestoreValue({\n        property,\n        value,\n        setValue\n    });\n\n    const internalValue: T = value ?? (property.dataType === \"string\" ? \"\" : value === 0 ? 0 : \"\");\n\n    return (<>\n            <AdvancedTextField\n                inputType={(property.dataType === \"number\" ? \"number\" : \"text\") as InputType<T>}\n                label={<LabelWithIcon icon={getIconForProperty(property)}\n                                      title={(property.name ?? \"\") + (property.validation?.required ? \" *\" : \"\")}\n                />}\n                value={internalValue}\n                multiline={multiline}\n                highlight={highlight}\n                setValue={setValue}\n                disabled={disabled}\n                error={showError}\n            />\n\n            <FieldHelperText includeDescription={includeDescription}\n                             showError={showError}\n                             error={error}\n                             disabled={disabled}\n                             property={property}/>\n\n        </>\n    );\n\n}, (prevProps, nextProps) => {\n    return prevProps.value === nextProps.value &&\n        prevProps.error === nextProps.error &&\n        prevProps.showError === nextProps.showError &&\n        prevProps.disabled === nextProps.disabled &&\n        equal(prevProps.property, nextProps.property) &&\n        prevProps.highlight === nextProps.highlight;\n});\n","import { EntityValues, ResolvedProperties, ResolvedProperty } from \"@firecms/core\";\n\nexport function countStringCharacters(values: EntityValues<any>, properties: ResolvedProperties<any>) {\n    let count = 0;\n\n    for (const key in values) {\n        const value = values[key];\n        const property: ResolvedProperty = properties[key];\n\n        if (property && !property.disabled) {\n            if (property.dataType === \"string\" || property.dataType === \"number\") {\n                count += String(value).length;\n            } else if (property.dataType === \"array\" && Array.isArray(value) && property.of?.dataType === \"string\") {\n                count += (value as string[]).reduce((acc, curr) => acc + (curr?.length ?? 0), 0);\n            } else if (property.dataType === \"map\" && property.properties && typeof value === \"object\") {\n                count += countStringCharacters(value, property.properties);\n            }\n        }\n    }\n\n    return count;\n}\n","import React, { useState } from \"react\";\nimport equal from \"react-fast-compare\"\n\nimport { CMSType, FieldProps, PluginFieldBuilderParams, } from \"@firecms/core\";\nimport {\n    AutoAwesomeIcon,\n    CircularProgress,\n    IconButton,\n    Menu,\n    MenuItem,\n    SendIcon,\n    TextField,\n    Tooltip,\n    Typography\n} from \"@firecms/ui\";\nimport { useDataEnhancementController } from \"./DataEnhancementControllerProvider\";\nimport { SUPPORTED_FIELDS_ENHANCEMENT } from \"../utils/fields\";\nimport { EnhanceTextFieldBinding } from \"./fields/EnhanceTextField\";\nimport { EnhancedDataResult, EnhanceParams } from \"../types/data_enhancement_controller\";\nimport { countStringCharacters } from \"../utils/strings_counter\";\n\nexport function fieldBuilder<T extends CMSType = CMSType>\n(params: PluginFieldBuilderParams<T>): React.ComponentType<FieldProps<T>> | null {\n\n    const {\n        fieldConfigId,\n        property\n    } = params;\n\n    if (property.disabled || property.readOnly || property.Field) {\n        return null;\n    }\n\n    if (SUPPORTED_FIELDS_ENHANCEMENT.includes(fieldConfigId))\n        return builder(params);\n\n    return null;\n}\n\nfunction builder<T extends CMSType = CMSType, M extends Record<string, any> = any>({\n                                                                                       fieldConfigId,\n                                                                                       Field\n                                                                                   }: PluginFieldBuilderParams<T, M>): React.ComponentType<FieldProps<T>> {\n\n    return function FieldWrapper(props: FieldProps<T, any, M>) {\n\n        const {\n            enabled,\n            suggestions,\n            enhance,\n            loadingSuggestions\n        } = useDataEnhancementController();\n\n        const loading = loadingSuggestions?.includes(props.propertyKey);\n        const suggestedValue = suggestions?.[props.propertyKey];\n\n        const filledCharacters = countStringCharacters(props.context.values, props.context.collection.properties);\n        const enoughData = filledCharacters > 5;\n\n        return <FieldInner\n            loading={loading}\n            props={props as FieldProps}\n            suggestedValue={suggestedValue}\n            enabled={enabled}\n            enoughData={enoughData}\n            Field={Field as React.ComponentType<FieldProps>}\n            enhance={enhance}/>\n\n    };\n}\n\ninterface FieldInnerParams<T extends CMSType = CMSType, M extends Record<string, any> = any> {\n    loading: boolean;\n    props: FieldProps<T, any, M>;\n    suggestedValue: string | number;\n    enabled: boolean;\n    enoughData: boolean;\n    Field: React.ComponentType<FieldProps<T, any, M>>;\n    enhance: (props: EnhanceParams<M>) => Promise<EnhancedDataResult>;\n}\n\nconst FieldInner = React.memo(function FieldInner<T extends CMSType = CMSType, M extends Record<string, any> = any>({\n                                                                                                                        loading,\n                                                                                                                        props,\n                                                                                                                        suggestedValue,\n                                                                                                                        enabled,\n                                                                                                                        enoughData,\n                                                                                                                        Field,\n                                                                                                                        enhance\n                                                                                                                    }: FieldInnerParams<T, M>) {\n\n    const [dataLoading, setDataLoading] = useState(false);\n\n    const [tooltipOpen, setTooltipOpen] = React.useState(false);\n    const [menuOpen, setMenuOpen] = React.useState(false);\n    const [propertyInstructions, setPropertyInstructions] = useState<string>();\n\n    if (!enabled) {\n        // @ts-ignore\n        return <Field {...props} />\n    }\n\n    const showEnhanceIcon = !props.disabled && (!props.value || (props.property.dataType === \"string\" && (props.property.multiline || props.property.markdown)));\n\n    const shouldUseAdvancedField = props.property.dataType === \"string\" && (!props.property.enumValues && !props.property.markdown);\n    const fieldBinding = shouldUseAdvancedField\n        ? <EnhanceTextFieldBinding {...props as FieldProps<any>}\n                                   highlight={suggestedValue as string}/>\n        : <Field {...props} />;\n\n    const enhanceData = (instructions?: string) => {\n        if (!props.context.entityId) return;\n        if (!enoughData) return;\n        setMenuOpen(false);\n        setDataLoading(true);\n        return enhance({\n            entityId: props.context.entityId,\n            propertyKey: props.propertyKey,\n            propertyInstructions: instructions,\n            values: props.context.values,\n            replaceValues: false\n        }).finally(() => setDataLoading(false));\n    };\n\n    const allowInstructions = props.property.dataType === \"string\" && !props.property.enumValues;\n\n    return <div className={\"relative\"}>\n\n        {fieldBinding}\n\n        {showEnhanceIcon && <div className={\"dark:bg-gray-700 bg-gray-100 rounded-full absolute right-2 -top-4\"}>\n            <Tooltip\n                open={tooltipOpen}\n                onOpenChange={setTooltipOpen}\n                side={\"left\"}\n                title={enoughData\n                    ? `Autofill ${props.property.name ?? \"this field\"}`\n                    : `You need to input some data in the form before enhancing ${props.property.name ?? \"this field\"}`}>\n                <Menu\n                    open={menuOpen}\n                    onOpenChange={setMenuOpen}\n                    trigger={\n                        <IconButton\n                            size=\"small\"\n                            aria-label=\"Enhance field\"\n                            disabled={dataLoading || loading}\n                            className={enoughData ? \"text-gray-900 dark:text-white\" : \"text-gray-400 dark:text-gray-600\"}\n                            onClick={() => {\n                                if (!props.context.entityId) return;\n                                if (!enoughData) return;\n                                setTooltipOpen(false);\n                                setDataLoading(true);\n                                return enhance({\n                                    entityId: props.context.entityId,\n                                    propertyKey: props.propertyKey,\n                                    values: props.context.values,\n                                    replaceValues: false\n                                }).finally(() => setDataLoading(false));\n                            }}>\n                            {dataLoading || loading\n                                ? <CircularProgress size={\"small\"}/>\n                                : <AutoAwesomeIcon\n                                    size={\"small\"}/>}\n                        </IconButton>}>\n                    <MenuItem onClick={() => enhanceData()}>\n                        <AutoAwesomeIcon\n                            size=\"small\"/>\n                        <div className={\"flex flex-col\"}>\n                            <Typography\n                                variant={\"body2\"}> {`Autofill ${props.property.name ?? \"this field\"}`}</Typography>\n                            <Typography variant={\"caption\"}>based on the rest of the entity</Typography>\n                        </div>\n                    </MenuItem>\n\n                    {allowInstructions && <div className={\"p-4\"}>\n                        <TextField label={\"Ask AI to write\"}\n                                   size={\"small\"}\n                                   className={\"w-[400px] max-w-full\"}\n                                   value={propertyInstructions ?? \"\"}\n                                   onKeyDown={(e) => {\n                                       if (e.key === \"Enter\") {\n                                           enhanceData(propertyInstructions);\n                                       }\n                                   }}\n                                   placeholder={\"Instructions\"}\n                                   onChange={(e) => setPropertyInstructions(e.target.value)}\n                                   endAdornment={<IconButton\n                                       size={\"small\"}\n                                       onClick={() => enhanceData(propertyInstructions)}\n                                       disabled={!propertyInstructions}>\n                                       <SendIcon size={\"small\"}/>\n                                   </IconButton>}>\n                        </TextField>\n                    </div>}\n\n                </Menu>\n\n            </Tooltip>\n        </div>}\n\n    </div>\n}, (prevProps, nextProps) => {\n    return prevProps.loading === nextProps.loading &&\n        prevProps.suggestedValue === nextProps.suggestedValue &&\n        prevProps.enabled === nextProps.enabled &&\n        prevProps.props.value === nextProps.props.value &&\n        prevProps.props.error === nextProps.props.error &&\n        prevProps.props.showError === nextProps.props.showError &&\n        prevProps.props.disabled === nextProps.props.disabled &&\n        equal(prevProps.props.property, nextProps.props.property) &&\n        prevProps.Field === nextProps.Field &&\n        prevProps.enoughData === nextProps.enoughData;\n});\n","import { EntityValues, ResolvedProperties, ResolvedProperty } from \"@firecms/core\";\n\nexport function countStringCharacters(values: EntityValues<any>, properties: ResolvedProperties<any>) {\n    let count = 0;\n\n    for (const key in values) {\n        const value = values[key];\n        const property: ResolvedProperty = properties[key];\n\n        if (property && !property.disabled) {\n            if (property.dataType === \"string\" || property.dataType === \"number\") {\n                count += value ? String(value).length : 0;\n            } else if (property.dataType === \"array\" && Array.isArray(value) && property.of?.dataType === \"string\") {\n                count += (value as string[]).reduce((acc, curr) => acc + (curr?.length ?? 0), 0);\n            } else if (property.dataType === \"map\" && property.properties && typeof value === \"object\") {\n                count += countStringCharacters(value, property.properties);\n            }\n        }\n    }\n\n    return count;\n}\n","import React, { useCallback, useDeferredValue, useEffect, useMemo, useRef } from \"react\";\n\nimport {\n    AutoAwesomeIcon,\n    Autocomplete,\n    AutocompleteItem,\n    AutoFixHighIcon,\n    Button,\n    CircularProgress,\n    ClearIcon,\n    cn,\n    defaultBorderMixin,\n    IconButton,\n    SendIcon,\n    TextareaAutosize,\n    Tooltip,\n    useAutoComplete\n} from \"@firecms/ui\";\nimport {\n    EntityStatus,\n    isPropertyBuilder,\n    PluginFormActionProps,\n    PropertiesOrBuilders,\n    Property,\n    PropertyOrBuilder,\n    singular,\n    stripCollectionPath,\n} from \"@firecms/core\";\nimport { useDataEnhancementController } from \"./DataEnhancementControllerProvider\";\nimport { SamplePrompt } from \"../types/data_enhancement_controller\";\nimport { countStringCharacters } from \"../utils/countStringCharacters\";\n\nconst DEFAULT_HEIGHT = 52;\n\nexport function FormEnhanceAction({\n                                      entityId,\n                                      path,\n                                      status,\n                                      collection,\n                                      formContext\n                                  }: PluginFormActionProps) {\n\n    const inputRef = React.useRef<HTMLInputElement>(null);\n    // const autocompleteRef = React.useRef<HTMLDivElement>(null);\n\n    const [internalStatus, setInternalStatus] = React.useState<EntityStatus>(status);\n    const storageKey = createLocalStorageKey(path, internalStatus);\n\n    const [loading, setLoading] = React.useState(false);\n    const dataEnhancementController = useDataEnhancementController();\n\n    const [samplePrompts, setSamplePrompts] = React.useState<SamplePrompt[] | undefined>(undefined);\n    const [instructions, setInstructions] = React.useState<string>(\"\");\n    const [height, setHeight] = React.useState<number | undefined>(DEFAULT_HEIGHT);\n\n    const {\n        inputFocused,\n        autoCompleteOpen,\n        setAutoCompleteOpen\n    } = useAutoComplete({\n        ref: inputRef\n    });\n\n    const placeholder = useMemo(() => getPlaceholder(collection.singularName ?? collection.name, samplePrompts), [samplePrompts]);\n\n    const {\n        suggestions,\n        getSamplePrompts\n    } = dataEnhancementController;\n\n    const loadingPrompts = useRef(false);\n    const updateSuggestedPrompts = useCallback(async function updateSuggestedPrompts(instructions?: string) {\n            if (loadingPrompts.current) return;\n            loadingPrompts.current = true;\n            const prompts = internalStatus === \"new\"\n                ? (await getSamplePrompts(collection.singularName ?? collection.name, instructions)).prompts\n                : getPromptsForExistingEntities(collection.properties);\n\n            const recentPromptsFromStorage = getRecentPromptsFromStorage(storageKey);\n            const recentPrompts = recentPromptsFromStorage.map(prompt => prompt.prompt);\n            setSamplePrompts([...recentPromptsFromStorage, ...prompts.filter(p => !recentPrompts.includes(p.prompt))].slice(0, 5));\n            loadingPrompts.current = false;\n        },\n        [collection.name, collection.singularName, getSamplePrompts, internalStatus]);\n\n    const deferredValues = useDeferredValue(formContext?.values);\n    const enoughData = countStringCharacters(deferredValues, collection.properties) > 20;\n\n    useEffect(() => {\n        if (!samplePrompts) {\n            setSamplePrompts(getRecentPromptsFromStorage(storageKey));\n            updateSuggestedPrompts().then();\n        }\n    }, [samplePrompts, storageKey, updateSuggestedPrompts, instructions, internalStatus]);\n\n    useEffect(() => {\n        updateSuggestedPrompts().then();\n    }, [internalStatus]);\n\n    const enhance = (prompt?: string) => {\n        if (!entityId || !formContext?.values) return;\n        setLoading(true);\n        setAutoCompleteOpen(false);\n        if (prompt) {\n            addRecentPrompt(storageKey, prompt);\n            setSamplePrompts([{\n                prompt,\n                type: \"recent\"\n            }, ...(samplePrompts ?? []).slice(0, 5)]);\n        }\n        return dataEnhancementController.enhance({\n            entityId,\n            values: formContext!.values,\n            instructions: prompt,\n            replaceValues: true\n        }).finally(() => {\n            setLoading(false);\n        });\n    };\n\n    if (!dataEnhancementController?.enabled)\n        return null;\n\n    const hasSuggestions = Object.values(suggestions).filter(Boolean).length > 0;\n\n    const disabledSuggestionActions = !hasSuggestions;\n    const promptSuggestionsEnabled = (samplePrompts ?? []).length > 0 && instructions.length === 0;\n\n    const noIdSet = !formContext?.entityId;\n\n    return (\n        <div className={\"relative w-full\"}\n             style={{ height }}>\n            <div className=\"absolute flex flex-col items-center w-full font-medium text-sm\">\n\n                <form\n                    className={cn(\n                        defaultBorderMixin,\n                        \"border-b\",\n                        \"flex w-full items-center gap-2 pr-4 pl-6\",\n                        inputFocused ? \"text-primary\" : \"text-gray-700 dark:text-gray-200\"\n                    )}\n                    onSubmit={(e) => {\n                        setAutoCompleteOpen(false);\n                        e.preventDefault();\n                        enhance(instructions);\n                    }}>\n\n                    <AutoFixHighIcon/>\n                    <TextareaAutosize\n                        className={\"flex-grow w-full resize-none w-full outline-none py-5 mx-2 bg-transparent\"}\n                        ref={inputRef}\n                        value={instructions}\n                        autoFocus={status === \"new\"}\n                        disabled={loading || noIdSet}\n                        // onFocus={onFocus}\n                        // onBlur={onBlur}\n                        onResize={(state) => {\n                            setHeight(state.outerHeightStyle);\n                        }}\n                        placeholder={noIdSet ? \"Please set an ID first\" : placeholder?.prompt}\n                        onClick={() => {\n                            if (!autoCompleteOpen)\n                                setAutoCompleteOpen(true);\n                        }}\n                        onKeyDown={(e) => {\n                            if (e.key === \"Enter\" && !e.shiftKey) {\n                                e.preventDefault();\n                                enhance(instructions);\n                            }\n                            if (e.key === \"Escape\" && autoCompleteOpen) {\n                                setAutoCompleteOpen(false);\n                                e.preventDefault();\n                            }\n                        }}\n                        onChange={(e) => {\n                            if (noIdSet) return;\n                            setInstructions(e.target.value);\n                        }}\n                    />\n                    <Autocomplete\n                        open={autoCompleteOpen}\n                        setOpen={setAutoCompleteOpen}>\n                        {samplePrompts?.map((samplePrompt, index) => {\n                            return <AutocompleteItem\n                                key={index + \"_\" + samplePrompt.prompt}\n                                onClick={() => {\n                                    setInstructions(samplePrompt.prompt);\n                                    enhance(samplePrompt.prompt);\n                                }}\n                            >\n                                <div className={\"flex-grow\"}>\n                                    {samplePrompt.prompt}\n                                </div>\n\n                                {samplePrompt.type === \"recent\" && <IconButton\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        e.stopPropagation();\n                                        removeRecentPrompt(storageKey, samplePrompt.prompt);\n                                        setSamplePrompts((samplePrompts ?? []).filter(p => p.prompt !== samplePrompt.prompt));\n                                    }}\n                                    size={\"small\"}\n                                >\n                                    <ClearIcon size=\"small\"/>\n                                </IconButton>\n                                }\n                            </AutocompleteItem>;\n                        })}\n\n                    </Autocomplete>\n\n                    {!loading && instructions && <IconButton\n                        size={\"small\"}\n                        onClick={() => {\n                            setInstructions(\"\");\n                            inputRef.current?.focus();\n                        }}\n                        color={inputFocused || !instructions ? \"primary\" : undefined}\n                        disabled={loading}>\n                        <ClearIcon size={\"small\"}/>\n                    </IconButton>}\n\n                    {(loading || instructions) && <IconButton\n                        onClick={() => enhance(instructions)}\n                        size={\"large\"}\n                        color={inputFocused || !instructions ? \"primary\" : undefined}\n                        className={cn(!instructions ? \"!bg-slate-50 dark:!bg-slate-800\" : \"\")}\n                        disabled={loading}>\n                        {loading &&\n                            <CircularProgress size={\"small\"}/>}\n                        {!loading && instructions &&\n                            <SendIcon color={\"primary\"}/>}\n                    </IconButton>}\n\n                    {!loading && !instructions && <Tooltip\n                        title={!enoughData\n                            ? \"You need to input some data in the form before enhancing this entity, or use the prompt to give specific instructions\"\n                            : \"Try to fill the missing fields. You can use the prompt to give specific instructions\"}>\n                        <Button variant={\"outlined\"}\n                                size={\"small\"}\n                                onClick={() => enhance()}\n                                disabled={!enoughData || loading}>\n                            <AutoAwesomeIcon color={\"primary\"}/>\n                            Autofill\n                        </Button>\n                    </Tooltip>}\n\n                </form>\n\n                {/*{samplePrompts &&*/}\n                {/*    <Collapse*/}\n                {/*        in={autocompleteOpen}*/}\n                {/*        duration={100}*/}\n                {/*        className={cn(*/}\n                {/*            defaultBorderMixin,*/}\n                {/*            autocompleteOpen ? \"border-b shadow \" : \"\",*/}\n                {/*            \"bg-gray-100 dark:bg-gray-900\",*/}\n                {/*            \"z-20\",*/}\n                {/*            \"w-full\")}>*/}\n                {/*        <div ref={autocompleteRef}>*/}\n                {/*            {samplePrompts?.map((samplePrompt, index) => {*/}\n                {/*                return <div*/}\n                {/*                    key={index}*/}\n                {/*                    className={\"flex w-full items-center pr-6 pl-16 h-[48px] cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800\"}*/}\n                {/*                    onClick={() => {*/}\n                {/*                        setInstructions(samplePrompt.prompt);*/}\n                {/*                        enhance(samplePrompt.prompt);*/}\n                {/*                    }}*/}\n                {/*                >*/}\n                {/*                    <div className={\"flex-grow\"}>*/}\n                {/*                        {samplePrompt.prompt}*/}\n                {/*                    </div>*/}\n\n                {/*                    {samplePrompt.type === \"recent\" && <IconButton*/}\n                {/*                        onClick={(e) => {*/}\n                {/*                            e.preventDefault();*/}\n                {/*                            e.stopPropagation();*/}\n                {/*                            removeRecentPrompt(storageKey, samplePrompt.prompt);*/}\n                {/*                            setSamplePrompts((samplePrompts ?? []).filter(p => p.prompt !== samplePrompt.prompt));*/}\n                {/*                        }}*/}\n                {/*                        size={\"small\"}*/}\n                {/*                    >*/}\n                {/*                        <ClearIcon size=\"small\"/>*/}\n                {/*                    </IconButton>*/}\n                {/*                    }*/}\n                {/*                </div>;*/}\n                {/*            })}*/}\n                {/*        </div>*/}\n                {/*    </Collapse>}*/}\n\n            </div>\n        </div>\n    );\n}\n\nexport interface EnhanceDialogProps {\n    open: boolean;\n    onClose: () => void;\n    selectReferences: () => void;\n    loading: boolean;\n    enhance: (instructions: string) => void;\n    samplePrompts?: string[];\n}\n\nfunction getPromptsForExistingEntities(properties: PropertiesOrBuilders): SamplePrompt[] {\n\n    const multilineProperties = Object.values(properties).filter((p: PropertyOrBuilder) => {\n        if (isPropertyBuilder(p)) {\n            return false;\n        }\n        return p.dataType === \"string\" && (p.markdown || p.multiline);\n    });\n\n    const multilinePrompt: Property | undefined = multilineProperties.length > 0\n        ? multilineProperties[Math.floor(Math.random() * multilineProperties.length)] as Property\n        : undefined;\n\n    const prompts = [\n        \"Fill the missing fields\",\n        \"Translate the missing content\"\n    ];\n    if (multilinePrompt) {\n        prompts.push(`Add 2 paragraphs to '${multilinePrompt.name}'`);\n    }\n    return prompts.map(p => ({\n        prompt: p,\n        type: \"sample\"\n    }));\n}\n\nfunction getPlaceholder(name: string, prompts?: SamplePrompt[]) {\n    const samplePrompts: SamplePrompt[] = (prompts ?? []).length > 0\n        ? (prompts as SamplePrompt[])\n        : [\n            \"e.g. I want to generate a new document about...\",\n            \"e.g. Add a paragraph to the description\",\n            `e.g. Generate a new ${singular(name)} related to...`\n        ].map(p => ({\n            prompt: p,\n            type: \"sample\"\n        }));\n    return samplePrompts[Math.floor(Math.random() * samplePrompts.length)];\n}\n\nconst createLocalStorageKey = (path: string, status: EntityStatus,) => {\n    const statusString = status === \"new\" ? \"new\" : \"existing\";\n    return `data_enhancement::${statusString}::${stripCollectionPath(path)}`;\n};\n\nconst getRecentPromptsFromStorage = (storageKey: string): SamplePrompt[] => {\n    const item = localStorage.getItem(storageKey);\n    return item ? JSON.parse(item).map((e: string) => ({\n        prompt: e,\n        type: \"recent\"\n    })) : [];\n};\n\nconst addRecentPrompt = (storageKey: string, prompt: string) => {\n    if (!prompt || prompt.trim().length === 0) {\n        return;\n    }\n    const recentPrompts = getRecentPromptsFromStorage(storageKey);\n    localStorage.setItem(storageKey, JSON.stringify([prompt, ...recentPrompts\n        .map(e => e.prompt)\n        .filter(e => e !== prompt)\n        .slice(0, 5)]));\n};\n\nconst removeRecentPrompt = (storageKey: string, prompt: string) => {\n    localStorage.setItem(storageKey, JSON.stringify(getRecentPromptsFromStorage(storageKey)\n        .map(e => e.prompt)\n        .filter(e => e !== prompt)));\n};\n","import React, { useCallback } from \"react\";\n\nimport { EntityCollection, FireCMSPlugin, PluginFieldBuilderParams, useAuthController, User } from \"@firecms/core\";\nimport { DataEnhancementControllerProvider } from \"./components/DataEnhancementControllerProvider\";\nimport { fieldBuilder } from \"./components/field_builder\";\nimport { FormEnhanceAction } from \"./components/FormEnhanceAction\";\nimport { SubscriptionMessageProps } from \"./types/subscriptions_message_props\";\n\nconst DEFAULT_API_KEY = \"fcms-U9jdDii0xXWSDC34asfrf54lbkFJBfKfRWcEDEwdc4V5wDWEDF\";\n\nexport interface DataEnhancementPluginProps {\n\n    apiKey?: string;\n\n    /**\n     * Use this function to determine if the data enhancement plugin should be enabled for a given path.\n     * If this function is not provided, the plugin will be enabled for all paths.\n     * If the function returns false, the plugin will be disabled for the given path.\n     * You can also return a configuration object to override the default configuration.\n     *\n     * @param path\n     * @param collection\n     */\n    getConfigForPath?: (props: {\n        path: string,\n        collection: EntityCollection,\n        user: User | null\n    }) => boolean;\n\n    /**\n     * Component to render when the user has finished their free usage quota.\n     */\n    SubscriptionMessage?: React.ComponentType<SubscriptionMessageProps>;\n\n    /**\n     * Host to use for the data enhancement API.\n     * This prop is only use in development mode.\n     */\n    host?: string;\n}\n\n/**\n * Use this hook to initialise the data enhancement plugin.\n * This is likely the only hook you will need to use.\n * @param props\n */\nexport function useDataEnhancementPlugin(props?: DataEnhancementPluginProps): FireCMSPlugin {\n\n    const apiKey = props?.apiKey ?? DEFAULT_API_KEY;\n    const getConfigForPath = props?.getConfigForPath;\n    const authController = useAuthController();\n\n    const fieldBuilderEnabled = useCallback((params: PluginFieldBuilderParams<any>) => {\n        if (!getConfigForPath) return true;\n        return getConfigForPath({\n            path: params.path,\n            collection: params.collection,\n            user: authController.user\n        })\n    }, [getConfigForPath, authController.user]);\n\n    return {\n        key: \"data_enhancement\",\n        form: {\n            Actions: FormEnhanceAction,\n            provider: {\n                Component: DataEnhancementControllerProvider,\n                props: {\n                    apiKey,\n                    getConfigForPath,\n                    SubscriptionMessage: props?.SubscriptionMessage,\n                    host: props?.host\n                }\n            },\n            fieldBuilder,\n            fieldBuilderEnabled\n        },\n        homePage: {\n            // CollectionActions: EnhanceCollectionIcon,\n            extraProps: {\n                getConfigForPath\n            }\n        }\n        // loading: configController.loading,\n    };\n}\n"],"names":["flatMapEntityValues","values","path","key","value","currentPath","acc","curr","DEFAULT_SERVER","enhanceDataAPIStream","props","flatValues","properties","request","res","reader","chunk","readChunks","str","s","data","e","readResult","fetchEntityPromptSuggestion","getAppendableSuggestion","suggestion","suggestionIncludesValue","getSimplifiedProperties","property","isPropertyBuilder","fullKey","valueInPath","getValueInPath","getSimplifiedProperty","b","getSimpleProperty","fieldId","getFieldId","getSimpleEnumValues","arrayParentProperty","prop","a","v","i","typeKey","oneOfType","valueKey","oneOfValue","childProperty","simplifiedProperty","mapProperties","childValue","o","attachPathToKeys","mapParentProperty","obj","enumValues","DefaultSubscriptionMessage","projectId","jsxs","jsx","Typography","Button","DataEnhancementControllerContext","React","useDataEnhancementController","useContext","getPropertyFromKey","propertyKey","split","parentKey","DataEnhancementControllerProvider","apiKey","getConfigForPath","children","host","collection","formContext","SubscriptionMessageProp","enabled","setEnabled","useState","suggestions","setSuggestions","loadingSuggestions","setLoadingSuggestions","context","useFireCMSContext","customizationController","useCustomizationController","enhancingInProgress","useRef","authController","useAuthController","snackbarController","useSnackbarController","resolvedCollection","resolveCollection","useMemo","valuesRef","useEffect","allowReferenceDataSelection","updateConfig","useCallback","dataSource","useDataSource","navigationController","useNavigationController","clearSuggestion","prev","_","rest","appendValueDelta","delta","updatedValue","updateSuggestedValues","currentValues","updatedValues","replaceValues","p","appendableValue","currentValue","multiline","trimmedValue","displayNeededSubscriptionSnackbar","enhance","resolvedPath","firebaseToken","clearAllSuggestions","resolve","reject","onError","partialValue","result","error","getSamplePrompts","entityName","input","dataEnhancementController","SUPPORTED_FIELDS_ENHANCEMENT","AdvancedTextField","setValue","label","inputType","highlight","disabled","size","className","inputRef","ref","internalValue","setInternalValue","onScroll","focused","setFocused","hasValue","endsWithHighlight","originalValue","onChange","event","stringValue","numberValue","TextField","additional","cn","fieldBackgroundMixin","fieldBackgroundDisabledMixin","fieldBackgroundHoverMixin","InputLabel","addLineBreaks","TextareaAutosize","focusedMixin","addLastBreak","lines","EnhanceTextFieldBinding","showError","autoFocus","includeDescription","useClearRestoreValue","Fragment","LabelWithIcon","getIconForProperty","FieldHelperText","prevProps","nextProps","equal","countStringCharacters","count","fieldBuilder","params","fieldConfigId","builder","Field","loading","suggestedValue","enoughData","FieldInner","dataLoading","setDataLoading","tooltipOpen","setTooltipOpen","menuOpen","setMenuOpen","propertyInstructions","setPropertyInstructions","showEnhanceIcon","fieldBinding","enhanceData","instructions","allowInstructions","Tooltip","Menu","IconButton","CircularProgress","AutoAwesomeIcon","MenuItem","SendIcon","DEFAULT_HEIGHT","FormEnhanceAction","entityId","status","internalStatus","setInternalStatus","storageKey","createLocalStorageKey","setLoading","samplePrompts","setSamplePrompts","setInstructions","height","setHeight","inputFocused","autoCompleteOpen","setAutoCompleteOpen","useAutoComplete","placeholder","getPlaceholder","loadingPrompts","updateSuggestedPrompts","prompts","getPromptsForExistingEntities","recentPromptsFromStorage","getRecentPromptsFromStorage","recentPrompts","prompt","deferredValues","useDeferredValue","addRecentPrompt","noIdSet","defaultBorderMixin","AutoFixHighIcon","state","Autocomplete","samplePrompt","index","AutocompleteItem","removeRecentPrompt","ClearIcon","multilineProperties","multilinePrompt","name","singular","stripCollectionPath","item","DEFAULT_API_KEY","useDataEnhancementPlugin","fieldBuilderEnabled"],"mappings":"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"}