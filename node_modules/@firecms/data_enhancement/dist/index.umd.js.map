{"version":3,"file":"index.umd.js","sources":["../src/utils/values.ts","../src/api.ts","../src/utils/suggestions.ts","../src/utils/properties.ts","../src/components/DefaultSubscriptionMessage.tsx","../src/components/DataEnhancementControllerProvider.tsx","../src/utils/fields.ts","../src/components/fields/AdvancedTextField.tsx","../src/components/fields/EnhanceTextField.tsx","../src/utils/strings_counter.ts","../src/components/field_builder.tsx","../src/utils/countStringCharacters.ts","../src/components/FormEnhanceAction.tsx","../src/useDataEnhancementPlugin.tsx"],"sourcesContent":["export function flatMapEntityValues<M extends object>(values: M, path = \"\"): object {\n    if (!values) return {};\n    return Object.entries(values).flatMap(([key, value]) => {\n        const currentPath = path ? `${path}.${key}` : key;\n        if (typeof value === \"object\") {\n            return flatMapEntityValues(value, currentPath);\n        } else {\n            return { [currentPath]: value };\n        }\n    }).reduce((acc, curr) => ({ ...acc, ...curr }), {})\n}\n","import {\n    DataEnhancementRequest,\n    EnhancedDataResult,\n    InputEntity,\n    InputProperty,\n    SamplePromptsResult\n} from \"./types/data_enhancement_controller\";\nimport { DataSource, EntityValues } from \"@firecms/core\";\nimport { flatMapEntityValues } from \"./utils/values\";\n\n// const DEFAULT_SERVER = \"http://localhost:5001/firecms-dev-2da42/europe-west3/api\"; // Local\n\nconst DEFAULT_SERVER = \"https://api-drplyi3b6q-ey.a.run.app\";\n\nexport async function enhanceDataAPIStream<M extends object>(props: {\n    apiKey: string,\n    entityId: string,\n    entityName: string,\n    entityDescription?: string,\n    propertyKey?: string,\n    propertyInstructions?: string;\n    values: EntityValues<M>,\n    path: string,\n    properties: Record<string, InputProperty>,\n    dataSource: DataSource,\n    instructions?: string,\n    firebaseToken: string,\n    onUpdate: (suggestions: Record<string, any>) => void;\n    onUpdateDelta: (propertyKey: string, partialValue: any) => void;\n    onError: (error: Error) => void;\n    onEnd: (result: EnhancedDataResult) => void;\n    host?: string;\n}) {\n\n    const flatValues = flatMapEntityValues(props.values);\n\n    const properties = props.properties;\n\n    const inputEntity: InputEntity = {\n        entityId: props.entityId,\n        values: flatValues\n    }\n\n    const request: DataEnhancementRequest = {\n        inputEntity,\n        properties,\n        entityName: props.entityName,\n        entityDescription: props.entityDescription,\n        propertyKey: props.propertyKey,\n        propertyInstructions: props.propertyInstructions,\n        instructions: props.instructions\n    };\n\n    console.debug(\"enhanceDataAPIStream\", request);\n\n    return fetch((props.host ?? DEFAULT_SERVER) + \"/data/enhance_stream/\",\n        {\n            // mode: \"no-cors\",\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Basic ${props.firebaseToken}`,\n                \"x-de-api-key\": `Basic ${props.apiKey}`,\n                // \"x-de-version\": version\n            },\n            body: JSON.stringify(request)\n        })\n        .then(async (res) => {\n            if (!res.ok) {\n                console.error(\"enhanceDataAPIStream error\", res)\n                throw await res.json();\n            }\n            const reader = res.body?.getReader();\n            if (!reader) {\n                throw new Error(\"No reader\");\n            }\n\n            for await (const chunk of readChunks(reader)) {\n                const str = new TextDecoder().decode(chunk);\n                try {\n                    str.split(\"&$# \").forEach((s) => {\n                        if (s && s.length > 0) {\n                            const data = JSON.parse(s.trim());\n                            if (data.type === \"suggestion_delta\")\n                                props.onUpdateDelta(data.data.propertyKey, data.data.partialValue);\n                            if (data.type === \"suggestion\")\n                                props.onUpdate(data.data);\n                            if (data.type === \"result\")\n                                props.onEnd(data.data);\n                        }\n                    });\n                } catch (e: any) {\n                    console.error(\"str\", str);\n                    console.error(\"Error parsing stream\", e);\n                    props.onError(e);\n                }\n            }\n\n        });\n\n}\n\nfunction readChunks(reader: ReadableStreamDefaultReader) {\n    return {\n        async * [Symbol.asyncIterator]() {\n            let readResult = await reader.read();\n            while (!readResult.done) {\n                yield readResult.value;\n                readResult = await reader.read();\n            }\n        }\n    };\n}\n\nexport async function fetchEntityPromptSuggestion<M extends object>(props: {\n    input?: string,\n    entityName: string,\n    firebaseToken: string,\n    apiKey: string,\n    host?: string\n}): Promise<SamplePromptsResult> {\n\n    console.debug(\"fetchEntityPromptSuggestion\", props);\n    return fetch((props.host ?? DEFAULT_SERVER) + \"/data/prompt_autocomplete/\",\n        {\n            // mode: \"no-cors\",\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Basic ${props.firebaseToken}`,\n                \"x-de-api-key\": `Basic ${props.apiKey}`\n            },\n            body: JSON.stringify({\n                entityName: props.entityName,\n                input: props.input ?? null\n            })\n        })\n        .then(async (res) => {\n            const data = await res.json();\n            console.debug(\"fetchEntityPromptSuggestion data\", data);\n            if (!res.ok) {\n                console.error(\"fetchEntityPromptSuggestion\", data);\n                throw Error(data.message);\n            }\n            return {\n                prompts: data.data.prompts.map((e: string) => ({\n                    prompt: e,\n                    type: \"sample\"\n                }))\n            };\n        });\n\n}\n","export function getAppendableSuggestion(suggestion: string | number | undefined, value: any): string | undefined {\n    const suggestionIncludesValue = typeof suggestion === \"string\" && typeof value === \"string\" && suggestion.toLowerCase().trim().startsWith(value.toLowerCase().trim());\n    return (typeof value === \"string\" && suggestionIncludesValue)\n        ? suggestion.substr(suggestion.toLowerCase().trim().indexOf(value.toLowerCase().trim()) + value.trim().length)\n        : undefined;\n}\n","import {\n    EnumValues,\n    getFieldId,\n    getValueInPath,\n    isPropertyBuilder,\n    PropertiesOrBuilders,\n    Property,\n    PropertyOrBuilder\n} from \"@firecms/core\";\nimport { InputProperty } from \"../types/data_enhancement_controller\";\n\nexport function getSimplifiedProperties<M extends Record<string, any>>(properties: PropertiesOrBuilders<M>, values: M, path = \"\"): Record<string, InputProperty> {\n    if (!properties) return {};\n    return Object.entries(properties)\n        .map(([key, property]) => {\n            if (isPropertyBuilder(property)) return {};\n            const fullKey = path ? `${path}.${key}` : key;\n            const valueInPath = getValueInPath(values, fullKey);\n            return getSimplifiedProperty(property, fullKey, valueInPath)\n        })\n        .reduce((a, b) => ({ ...a, ...b }), {});\n}\n\nfunction getSimpleProperty(property: Property): InputProperty {\n    const fieldId = getFieldId(property);\n    if (!fieldId) {\n        console.error(\"No fieldId found for property\", property);\n        throw new Error(\"Field id not found\");\n    }\n    return {\n        name: property.name,\n        description: property.description,\n        dataType: property.dataType,\n        fieldConfigId: fieldId,\n        enumValues: \"enumValues\" in property && property.enumValues\n            ? getSimpleEnumValues(property.enumValues)\n            : undefined,\n        disabled: Boolean(property.disabled || property.readOnly)\n    };\n}\n\nfunction getSimplifiedProperty(property: PropertyOrBuilder, path: string, value?: any): Record<string, InputProperty> {\n    if (isPropertyBuilder(property)) return {};\n    if (property.dataType === \"array\") {\n\n        if (property.of && !isPropertyBuilder(property.of as PropertyOrBuilder)) {\n            const arrayParentProperty: InputProperty = {\n                name: property.name,\n                description: property.description,\n                dataType: property.dataType,\n                fieldConfigId: \"repeat\",\n                disabled: Boolean(property.disabled || property.readOnly),\n                of: getSimpleProperty(property.of as Property)\n            };\n\n            const result = { [path]: arrayParentProperty };\n            // if (Array.isArray(value)) {\n            //     result = {\n            //         ...result,\n            //         ...value\n            //             .map((v, i) => getSimplifiedProperty(property.of as PropertyOrBuilder, `${path}.${i}`, v))\n            //             .reduce((a, b) => ({ ...a, ...b }), {})\n            //     };\n            // }\n            //\n            // const existingValuesCount = Array.isArray(value) ? value.length : 0;\n            //\n            // const newValuesCount = property.of && !isPropertyBuilder<any, any>(property.of) && (property.of as Property).dataType === \"map\" ? 1 : 3;\n            // result = {\n            //     ...result,\n            //     // ...Array.from(Array(newValuesCount))\n            //     //     .map((v, i) => getSimplifiedProperty(property.of as PropertyOrBuilder, `${path}.${i + existingValuesCount}`, v))\n            //     //     .reduce((a, b) => ({ ...a, ...b }), {})\n            // }\n\n            return result;\n        } else if (property.oneOf) {\n\n            const arrayParentProperty: InputProperty = {\n                name: property.name,\n                description: property.description,\n                dataType: property.dataType,\n                fieldConfigId: \"block\",\n                disabled: Boolean(property.disabled || property.readOnly),\n                oneOf: {\n                    typeField: property.oneOf.typeField,\n                    valueField: property.oneOf.valueField,\n                    properties: Object.entries(property.oneOf.properties)\n                        .map(([key, prop]) => ({ [key]: getSimpleProperty(prop) }))\n                        .reduce((a, b) => ({ ...a, ...b }), {})\n                }\n            };\n\n            if (!Array.isArray(value)) {\n                return { [path]: arrayParentProperty };\n            }\n\n            return value.map((v, i) => {\n                const typeKey = property.oneOf!.typeField ?? \"type\";\n                const oneOfType = v[typeKey];\n                const valueKey = property.oneOf!.valueField ?? \"value\";\n                const oneOfValue = v[valueKey];\n                const childProperty = property.oneOf!.properties[oneOfType];\n                if (childProperty === undefined) {\n                    console.error(`No property found for type ${oneOfType}`, property.oneOf!.properties);\n                    return {};\n                }\n                const simplifiedProperty = getSimplifiedProperty(childProperty, `${path}.${i}.${valueKey}`, oneOfValue);\n                return {\n                    [`${path}.${i}.${typeKey}`]: oneOfType,\n                    ...simplifiedProperty\n                };\n            }).reduce((a, b) => ({ ...a, ...b }), { [path]: arrayParentProperty });\n        }\n    } else if (property.dataType === \"map\") {\n        if (property.properties) {\n            const mapProperties: Record<string, InputProperty> = Object.entries(property.properties)\n                .map(([key, childProperty]) => {\n                    const childValue = value?.[key];\n                    return getSimplifiedProperty(childProperty, key, childValue);\n                })\n                .map(o => attachPathToKeys(o, path))\n                .reduce((a, b) => ({ ...a, ...b }), {});\n\n            if (Object.keys(mapProperties).length === 0) return {};\n            const mapParentProperty: InputProperty = {\n                name: property.name,\n                description: property.description,\n                dataType: property.dataType,\n                fieldConfigId: \"group\",\n                disabled: Boolean(property.disabled || property.readOnly)\n            };\n            return {\n                [path]: mapParentProperty,\n                ...mapProperties\n            } as Record<string, InputProperty>;\n        }\n    } else {\n        const fieldId = getFieldId(property);\n        if (!fieldId) {\n            console.warn(`No fieldId found for property ${path} with dataType ${property.dataType}`);\n            return {};\n        }\n        return {\n            [path]: getSimpleProperty(property)\n        };\n    }\n    return {};\n}\n\n// attach a path to every key in an object\nfunction attachPathToKeys(obj: Record<string, any>, path = \"\"): Record<string, any> {\n    return Object.entries(obj)\n        .map(([key, value]) => {\n            const fullKey = path ? `${path}.${key}` : key;\n            return { [fullKey]: value };\n        })\n        .reduce((a, b) => ({ ...a, ...b }), {});\n}\n\nfunction getSimpleEnumValues(enumValues: EnumValues): string[] {\n    if (Array.isArray(enumValues))\n        return enumValues.map(v => String(v.id));\n    if (typeof enumValues === \"object\")\n        return Object.keys(enumValues);\n    throw Error(\"getSimpleEnumValues: Invalid enumValues\");\n}\n","import React from \"react\";\nimport { Button, Typography } from \"@firecms/ui\";\nimport { SubscriptionMessageProps } from \"../types/subscriptions_message_props\";\n\nexport function DefaultSubscriptionMessage({ projectId }: SubscriptionMessageProps) {\n    return (\n        <div className=\"flex flex-col space-y-1 p-1\">\n            <Typography variant={\"h6\"}>Subscription required</Typography>\n            <Typography>You have finished your free usage quota.</Typography>\n            <Typography>You need an active subscription in order to continue using\n                the plugin</Typography>\n            <Button\n                href={`https://app.firecms.co/subscriptions?projectId=${projectId}`}\n                color={\"primary\"}\n                component={\"a\"}\n                rel=\"noopener noreferrer\"\n                target=\"_blank\">\n                Create a subscription\n            </Button>\n        </div>\n    )\n}\n","import React, { PropsWithChildren, useCallback, useContext, useEffect, useMemo, useRef, useState } from \"react\";\n\nimport {\n    DataEnhancementController,\n    EnhancedDataResult,\n    EnhanceParams,\n    InputProperty\n} from \"../types/data_enhancement_controller\";\nimport {\n    DataSource,\n    Entity,\n    EntityCollection,\n    getValueInPath,\n    PluginFormActionProps,\n    resolveCollection,\n    useAuthController,\n    useCustomizationController,\n    useDataSource,\n    useFireCMSContext,\n    useNavigationController,\n    useSnackbarController\n} from \"@firecms/core\";\n\nimport { enhanceDataAPIStream, fetchEntityPromptSuggestion } from \"../api\";\nimport { getAppendableSuggestion } from \"../utils/suggestions\";\nimport { getSimplifiedProperties } from \"../utils/properties\";\nimport { DefaultSubscriptionMessage } from \"./DefaultSubscriptionMessage\";\nimport { SubscriptionMessageProps } from \"../types/subscriptions_message_props\";\n\nexport const DataEnhancementControllerContext = React.createContext<DataEnhancementController>({} as any);\n\nexport type DataEnhancementControllerProviderProps = {\n\n    apiKey: string;\n\n    getConfigForPath?: (props: {\n        path: string,\n        collection: EntityCollection\n    }) => boolean;\n\n    SubscriptionMessage?: React.ComponentType<SubscriptionMessageProps>;\n\n    host?: string;\n}\n\nexport const useDataEnhancementController = (): DataEnhancementController => useContext(DataEnhancementControllerContext);\n\nfunction getPropertyFromKey(properties: Record<string, InputProperty>, propertyKey: string) {\n    if (propertyKey in properties) {\n        return properties[propertyKey];\n    } else {\n        //split the property key\n        const split = propertyKey.split(\".\");\n        if (split.length === 1) {\n            return undefined;\n        }\n        const parentKey = split.slice(0, split.length - 1).join(\".\");\n        return getPropertyFromKey(properties, parentKey);\n\n    }\n}\n\nexport function DataEnhancementControllerProvider({\n                                                      apiKey,\n                                                      getConfigForPath,\n                                                      children,\n                                                      host,\n                                                      path,\n                                                      collection,\n                                                      formContext,\n                                                      SubscriptionMessage: SubscriptionMessageProp = DefaultSubscriptionMessage\n                                                  }: PropsWithChildren<DataEnhancementControllerProviderProps & PluginFormActionProps<any>>) {\n\n    const [enabled, setEnabled] = useState(false);\n    const [suggestions, setSuggestions] = useState<Record<string, string | number>>({});\n    const [loadingSuggestions, setLoadingSuggestions] = useState<string[]>([]);\n\n    const context = useFireCMSContext();\n    const customizationController = useCustomizationController();\n    const enhancingInProgress = useRef(false);\n\n    const authController = useAuthController();\n    const snackbarController = useSnackbarController();\n\n    const resolvedCollection = resolveCollection({\n        collection,\n        path,\n        entityId: formContext?.entityId,\n        values: formContext?.values,\n        fields: customizationController.propertyConfigs\n    });\n\n    const properties = useMemo(() => getSimplifiedProperties(resolvedCollection.properties, formContext?.values), [formContext?.values]);\n    // const preEnhanceValuesRef = React.useRef(formContext?.values ?? {});\n    const valuesRef = React.useRef(formContext?.values ?? {});\n    useEffect(() => {\n        if (!enhancingInProgress.current)\n            valuesRef.current = formContext?.values ?? {};\n    }, [formContext?.values]);\n\n    const allowReferenceDataSelection = false;\n\n    const updateConfig = useCallback(async () => {\n        if (!getConfigForPath) return;\n        const config = getConfigForPath({\n            path,\n            collection\n        });\n        if (config) {\n            setEnabled(true);\n        }\n    }, [collection, getConfigForPath, path]);\n\n    useEffect(() => {\n        if (!getConfigForPath) {\n            setEnabled(true);\n        } else {\n            updateConfig();\n        }\n\n    }, [getConfigForPath, updateConfig]);\n\n    const dataSource = useDataSource(collection);\n    const navigationController = useNavigationController();\n\n    const clearSuggestion = useCallback((propertyKey: string) => {\n        setSuggestions((prev) => {\n            //remove propertyKey from prev\n            const {\n                [propertyKey]: _,\n                ...rest\n            } = prev;\n            return rest;\n        });\n    }, []);\n\n    const appendValueDelta = (propertyKey: string, delta: string) => {\n\n        const property = getPropertyFromKey(properties, propertyKey);\n        if (delta === null || property?.disabled) {\n            return;\n        }\n\n        // clearSuggestion(propertyKey);\n        const value = getValueInPath(valuesRef.current, propertyKey);\n\n        const currentValue = value ? (value as string) + \"\" : \"\";\n        const updatedValue = currentValue + delta;\n        // if (currentValue.length === 0) updatedValue = updatedValue.trimStart();\n        valuesRef.current = {\n            ...valuesRef.current,\n            [propertyKey]: updatedValue\n        };\n        formContext?.setFieldValue(propertyKey, updatedValue, false);\n        setSuggestions(prev => ({\n            ...prev,\n            [propertyKey]: (prev[propertyKey] ?? \"\") + delta\n        }));\n    };\n\n    const updateSuggestedValues = (currentValues: object, updatedValues: Record<string, string | number>, replaceValues: boolean) => {\n\n        setLoadingSuggestions((prev) => {\n            return prev.filter(p => !Object.keys(updatedValues).includes(p));\n        });\n\n        Object.entries(updatedValues).forEach(([propertyKey, suggestion]) => {\n\n            const value = getValueInPath(currentValues, propertyKey);\n            const property = getPropertyFromKey(properties, propertyKey);\n\n            if (!property || suggestion === null || property.disabled) {\n                return;\n            }\n\n            if (typeof suggestion === \"number\") {\n                formContext?.setFieldValue(propertyKey, suggestion);\n                return;\n            }\n\n            if (replaceValues) {\n                formContext?.setFieldValue(propertyKey, suggestion);\n                return;\n            }\n\n            const appendableValue = getAppendableSuggestion(suggestion, value);\n\n            const currentValue = value ? (value as string) + \"\" : \"\";\n            if (appendableValue) {\n                formContext?.setFieldValue(propertyKey, suggestion);\n            } else {\n                const multiline = property?.fieldConfigId === \"multiline\" || property?.fieldConfigId === \"markdown\";\n                const trimmedValue = currentValue.trimEnd();\n                if (multiline && (trimmedValue.endsWith(\".\") || trimmedValue.endsWith(\"?\") || trimmedValue.endsWith(\"!\") || trimmedValue.endsWith(\":\"))) {\n                    formContext?.setFieldValue(propertyKey, trimmedValue + \"\\n\\n\" + (suggestion as string).trimStart());\n                } else {\n                    formContext?.setFieldValue(propertyKey, trimmedValue + (trimmedValue.length > 0 ? \" \" : \"\") + (suggestion as string));\n                }\n            }\n        });\n\n        setSuggestions(prev => ({\n            ...prev,\n            ...Object.keys(updatedValues)\n                .reduce((acc, key) => {\n                    const value = getValueInPath(formContext?.values, key);\n                    const suggestion = updatedValues[key];\n                    return {\n                        ...acc,\n                        [key]: getAppendableSuggestion(suggestion, value) ?? suggestion\n                    };\n                }, {})\n        }));\n    };\n\n    function displayNeededSubscriptionSnackbar(projectId: any) {\n        snackbarController.open({\n            type: \"warning\",\n            message: <SubscriptionMessageProp projectId={projectId} context={context}/>,\n            autoHideDuration: 4000\n        })\n    }\n\n    const enhance = async (props: EnhanceParams<any>): Promise<EnhancedDataResult> => {\n\n        if (!authController.user) {\n            snackbarController.open({\n                type: \"warning\",\n                message: \"You need to be logged in to enhance data\"\n            });\n            return Promise.reject(new Error(\"Not logged in\"));\n        }\n\n        const resolvedPath = navigationController.resolveAliasesFrom(path);\n        const firebaseToken = await authController.getAuthToken();\n\n        if (props.propertyKey) {\n            clearSuggestion(props.propertyKey)\n        } else {\n            clearAllSuggestions();\n        }\n\n        setLoadingSuggestions((prev) => [...prev, ...(props.propertyKey ? [props.propertyKey] : Object.keys(properties))]);\n        enhancingInProgress.current = true;\n\n        const currentValues = valuesRef.current ?? {};\n\n        return new Promise((resolve, reject) => {\n            function onError(e: any) {\n                setLoadingSuggestions([]);\n                if (e.code === \"payment-required\") {\n                    const projectId = e.data.projectId;\n                    displayNeededSubscriptionSnackbar(projectId);\n                } else {\n                    console.error(\"Enhance error\", e);\n                }\n                reject(e);\n                enhancingInProgress.current = false;\n            }\n\n            try {\n                enhanceDataAPIStream({\n                    ...props,\n                    host,\n                    apiKey,\n                    properties,\n                    path: resolvedPath,\n                    entityName: collection.singularName ?? collection.name,\n                    entityDescription: collection.description,\n                    dataSource,\n                    firebaseToken,\n                    onUpdate: (suggestions) => {\n                        console.debug(\"de onUpdate\", suggestions);\n                        updateSuggestedValues(currentValues, suggestions, props.replaceValues ?? false);\n                    },\n                    onUpdateDelta: (propertyKey: string, partialValue: string) => {\n                        // console.debug(\"de delta\", propertyKey, partialValue);\n                        appendValueDelta(propertyKey, partialValue);\n                    },\n                    onError,\n                    onEnd: (result) => {\n                        console.debug(\"de onEnd\", result);\n                        if (result.errors) {\n                            result.errors.forEach((error) => {\n                                snackbarController.open({\n                                    type: \"warning\",\n                                    message: error\n                                })\n                            });\n                        }\n                        if (Object.keys(result.suggestions).length === 0) {\n                            snackbarController.open({\n                                type: \"info\",\n                                autoHideDuration: 1800,\n                                message: \"No fields were updated\"\n                            })\n                        }\n                        setLoadingSuggestions([]);\n                        resolve(result);\n                        enhancingInProgress.current = false;\n                    }\n                }).catch(onError);\n            } catch (e: any) {\n                onError(e);\n            }\n        })\n    };\n\n    const clearAllSuggestions = useCallback(() => {\n        setSuggestions({});\n    }, []);\n\n    const getSamplePrompts = useCallback(async (entityName: string, input?: string) => {\n        const firebaseToken = await authController.getAuthToken()\n        return fetchEntityPromptSuggestion({\n            host,\n            entityName,\n            firebaseToken,\n            apiKey,\n            input\n        });\n    }, [apiKey, authController.getAuthToken]);\n\n    const dataEnhancementController: DataEnhancementController = {\n        enabled,\n        suggestions,\n        clearSuggestion,\n        enhance,\n        allowReferenceDataSelection,\n        clearAllSuggestions,\n        getSamplePrompts,\n        loadingSuggestions\n    };\n\n    return (\n        <DataEnhancementControllerContext.Provider\n            value={dataEnhancementController}>\n            {children}\n        </DataEnhancementControllerContext.Provider>\n    );\n}\n\nconst ENTITIES_COUNT = 1;\n\nasync function getOtherEntities(collection: EntityCollection, dataSource: DataSource, path: string, entityId: string): Promise<Entity<any>[]> {\n    const fetchedDocs = await dataSource.fetchCollection({\n        path,\n        collection,\n        filter: { __name__: [\">\", entityId] },\n        orderBy: \"__name__\",\n        order: \"asc\",\n        limit: ENTITIES_COUNT\n    });\n    if (fetchedDocs.length < ENTITIES_COUNT) {\n        fetchedDocs.push(...await dataSource.fetchCollection({\n            path,\n            collection,\n            filter: { __name__: [\"<\", entityId] },\n            orderBy: \"__name__\",\n            order: \"asc\",\n            limit: ENTITIES_COUNT - fetchedDocs.length\n        }))\n    }\n    return fetchedDocs;\n}\n","export const SUPPORTED_FIELDS_ENHANCEMENT: string[] = [\n    \"text_field\",\n    \"number_input\",\n    \"multiline\",\n    \"markdown\",\n    \"email\",\n    \"select\"\n    // \"multi_select\",\n];\n","import React, { useCallback, useEffect, useRef } from \"react\";\n\nimport {\n    cn,\n    fieldBackgroundDisabledMixin,\n    fieldBackgroundHoverMixin,\n    fieldBackgroundMixin,\n    focusedMixin,\n    InputLabel,\n    TextareaAutosize,\n    TextField\n} from \"@firecms/ui\";\n\nexport type InputType<T> = T extends string ? \"text\" : \"number\";\n\nexport function AdvancedTextField<T extends string | number>({\n                                                                 value,\n                                                                 setValue,\n                                                                 label,\n                                                                 inputType,\n                                                                 multiline = false,\n                                                                 highlight,\n                                                                 disabled,\n                                                                 error,\n                                                                 size = \"medium\",\n                                                                 className\n                                                             }: {\n    inputType: InputType<T>,\n    value: T,\n    setValue: (value: T | null) => void,\n    highlight?: string,\n    label: React.ReactNode,\n    multiline?: boolean,\n    disabled: boolean,\n    error: boolean,\n    size?: \"small\" | \"medium\",\n    className?: string,\n}) {\n\n    const inputRef = useRef(null);\n    const ref = useRef<HTMLDivElement>(null);\n\n    const [internalValue, setInternalValue] = React.useState<string>(value ? value.toString() : \"\");\n\n    useEffect(() => {\n        setInternalValue(value ? value.toString() : \"\");\n    }, [value]);\n\n    const onScroll = useCallback((e: any) => {\n        if (!ref.current) return;\n        ref.current.scrollTop = e.target.scrollTop;\n        ref.current.scrollLeft = e.target.scrollLeft;\n    }, []);\n\n    const [focused, setFocused] = React.useState(document.activeElement === inputRef.current);\n\n    const hasValue = internalValue !== undefined && internalValue !== null && internalValue !== \"\";\n\n    const endsWithHighlight = !!highlight && (value === highlight || String(value).endsWith(highlight));\n    const originalValue = endsWithHighlight\n        ? String(value).substring(0, String(value).length - highlight.length)\n        : internalValue;\n\n    const onChange = useCallback((event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        const stringValue = event.target.value;\n        if (inputType === \"number\") {\n            if (stringValue === \"-\" || stringValue.startsWith(\".\") || stringValue.endsWith(\".\")) {\n                setInternalValue(stringValue);\n            } else {\n                const numberValue = stringValue ? parseFloat(stringValue) : undefined;\n                if (numberValue && isNaN(numberValue)) {\n                    setValue(null);\n                    setInternalValue(\"\");\n                } else if (numberValue !== undefined && numberValue !== null) {\n                    setValue(numberValue as T);\n                    setInternalValue(numberValue.toString());\n                } else {\n                    setValue(null);\n                    setInternalValue(\"\");\n                }\n            }\n        } else {\n            setValue(stringValue as T);\n            setInternalValue(stringValue);\n        }\n    }, [inputType, setValue]);\n\n    const numberInputOnWheelPreventChange = useCallback((e: any) => {\n        e.target.blur()\n        e.stopPropagation()\n        setTimeout(() => {\n            e.target.focus()\n        }, 0)\n    }, []);\n\n    if (disabled) {\n        return <TextField label={label}\n                          disabled={true}\n                          value={internalValue}/>\n    }\n\n    const additional: any = {\n        onKeyPress: (e: any) => {\n            // if (e.key === \"Enter\") {\n            //     e.preventDefault();\n            //     e.stopPropagation();\n            // }\n            if (!multiline && e.key === \"Enter\") {\n                e.preventDefault();\n            }\n        }\n    }\n\n    return (\n        <div className={cn(\n            \"rounded-md relative max-w-full\",\n            fieldBackgroundMixin,\n            disabled ? fieldBackgroundDisabledMixin : fieldBackgroundHoverMixin,\n            error ? \"border border-red-500 dark:border-red-600\" : \"\",\n            {\n                \"min-h-[48px]\": size === \"small\",\n                \"min-h-[64px]\": size === \"medium\"\n            },\n            className)}>\n\n            {label && (\n                <InputLabel\n                    className={cn(\"absolute top-1 pointer-events-none\",\n                        !error ? (focused ? \"text-primary\" : \"text-text-secondary dark:text-text-secondary-dark\") : \"text-red-500 dark:text-red-600\",\n                        disabled ? \"opacity-50\" : \"\")}\n                    shrink={hasValue || focused}\n                >\n                    {label}\n                </InputLabel>\n            )}\n\n            <div ref={ref}\n                 className=\"inset-0 whitespace-pre-wrap min-h-16 overflow-x-auto select-none pt-8 pb-2 px-3\">\n\n                {addLineBreaks(originalValue, !endsWithHighlight && multiline)}\n\n                {endsWithHighlight &&\n                    <span className=\"dark:bg-slate-700 bg-slate-300 p-px -m-px rounded-sm\">\n                    {addLineBreaks(highlight, multiline)}\n                </span>}\n\n            </div>\n\n            <TextareaAutosize\n                className={cn(\n                    focusedMixin,\n                    size === \"small\" ? \"min-h-[48px]\" : \"min-h-[64px]\",\n                    \"rounded-md resize-none w-full outline-none p-[32px] text-base bg-transparent px-3 pt-[28px]\",\n                    disabled && \"border border-transparent outline-none opacity-50 text-gray-600 dark:text-gray-500\",\n                    \"absolute top-0 right-0 left-0 max-w-full bg-transparent text-transparent caret-gray-800 dark:caret-gray-200\",\n                    \"pt-8 pb-2 px-3\",\n                )}\n                ignoreBoxSizing={true}\n                ref={inputRef}\n                onFocus={() => setFocused(true)}\n                onBlur={() => setFocused(false)}\n                value={internalValue}\n                sizeRef={ref}\n                onChange={onChange}\n                onScroll={onScroll}\n                {...additional}/>\n\n        </div>\n    );\n}\n\nfunction addLineBreaks(value?: string | number, addLastBreak = false) {\n    if (typeof value === \"number\" || value === undefined)\n        return value;\n    if (typeof value !== \"string\") {\n        console.error(\"addLineBreaks: value is not a string\", value)\n        return \"\";\n    }\n    const lines = value.split(\"\\n\");\n    if (lines.length === 1)\n        return <span className=\"break-words\"\n        >{value ?? \" \"}</span>;\n    // @ts-ignore\n    return lines.map((p, i) => <React.Fragment key={i}>\n        <span className=\"break-words\"\n        >{p ?? \" \"}</span>\n        {(lines.length - 1 !== i || addLastBreak) && <br/>}\n    </React.Fragment>);\n}\n","import React from \"react\";\nimport equal from \"react-fast-compare\"\n\nimport { FieldHelperText, FieldProps, getIconForProperty, LabelWithIcon, useClearRestoreValue } from \"@firecms/core\";\nimport { AdvancedTextField, InputType } from \"./AdvancedTextField\";\n\n/**\n * Generic text field.\n * This is one of the internal components that get mapped natively inside forms\n * and tables to the specified properties.\n * @group Form fields\n */\nexport const EnhanceTextFieldBinding = React.memo(function EnhanceTextFieldBinding<T extends string | number>({\n                                                                                                                  value,\n                                                                                                                  setValue,\n                                                                                                                  error,\n                                                                                                                  showError,\n                                                                                                                  disabled,\n                                                                                                                  autoFocus,\n                                                                                                                  property,\n                                                                                                                  propertyKey,\n                                                                                                                  includeDescription,\n                                                                                                                  highlight\n                                                                                                              }: FieldProps<T> & {\n    highlight?: string\n}) {\n\n    let multiline: boolean | undefined = false;\n    if (property.dataType === \"string\") {\n        multiline = (property.multiline || property.markdown) ?? false;\n    }\n\n    useClearRestoreValue({\n        property,\n        value,\n        setValue\n    });\n\n    const internalValue: T = value ?? (property.dataType === \"string\" ? \"\" : value === 0 ? 0 : \"\");\n\n    return (<>\n            <AdvancedTextField\n                inputType={(property.dataType === \"number\" ? \"number\" : \"text\") as InputType<T>}\n                label={<LabelWithIcon icon={getIconForProperty(property)}\n                                      title={(property.name ?? \"\") + (property.validation?.required ? \" *\" : \"\")}\n                />}\n                value={internalValue}\n                multiline={multiline}\n                highlight={highlight}\n                setValue={setValue}\n                disabled={disabled}\n                error={showError}\n            />\n\n            <FieldHelperText includeDescription={includeDescription}\n                             showError={showError}\n                             error={error}\n                             disabled={disabled}\n                             property={property}/>\n\n        </>\n    );\n\n}, (prevProps, nextProps) => {\n    return prevProps.value === nextProps.value &&\n        prevProps.error === nextProps.error &&\n        prevProps.showError === nextProps.showError &&\n        prevProps.disabled === nextProps.disabled &&\n        equal(prevProps.property, nextProps.property) &&\n        prevProps.highlight === nextProps.highlight;\n});\n","import { EntityValues, ResolvedProperties, ResolvedProperty } from \"@firecms/core\";\n\nexport function countStringCharacters(values: EntityValues<any>, properties: ResolvedProperties<any>) {\n    let count = 0;\n\n    for (const key in values) {\n        const value = values[key];\n        const property: ResolvedProperty = properties[key];\n\n        if (property && !property.disabled) {\n            if (property.dataType === \"string\" || property.dataType === \"number\") {\n                count += String(value).length;\n            } else if (property.dataType === \"array\" && Array.isArray(value) && property.of?.dataType === \"string\") {\n                count += (value as string[]).reduce((acc, curr) => acc + (curr?.length ?? 0), 0);\n            } else if (property.dataType === \"map\" && property.properties && typeof value === \"object\") {\n                count += countStringCharacters(value, property.properties);\n            }\n        }\n    }\n\n    return count;\n}\n","import React, { useState } from \"react\";\nimport equal from \"react-fast-compare\"\n\nimport { CMSType, FieldProps, PluginFieldBuilderParams, } from \"@firecms/core\";\nimport {\n    AutoAwesomeIcon,\n    CircularProgress,\n    IconButton,\n    Menu,\n    MenuItem,\n    SendIcon,\n    TextField,\n    Tooltip,\n    Typography\n} from \"@firecms/ui\";\nimport { useDataEnhancementController } from \"./DataEnhancementControllerProvider\";\nimport { SUPPORTED_FIELDS_ENHANCEMENT } from \"../utils/fields\";\nimport { EnhanceTextFieldBinding } from \"./fields/EnhanceTextField\";\nimport { EnhancedDataResult, EnhanceParams } from \"../types/data_enhancement_controller\";\nimport { countStringCharacters } from \"../utils/strings_counter\";\n\nexport function fieldBuilder<T extends CMSType = CMSType>\n(params: PluginFieldBuilderParams<T>): React.ComponentType<FieldProps<T>> | null {\n\n    const {\n        fieldConfigId,\n        property\n    } = params;\n\n    if (property.disabled || property.readOnly || property.Field) {\n        return null;\n    }\n\n    if (SUPPORTED_FIELDS_ENHANCEMENT.includes(fieldConfigId))\n        return builder(params);\n\n    return null;\n}\n\nfunction builder<T extends CMSType = CMSType, M extends Record<string, any> = any>({\n                                                                                       fieldConfigId,\n                                                                                       Field\n                                                                                   }: PluginFieldBuilderParams<T, M>): React.ComponentType<FieldProps<T>> {\n\n    return function FieldWrapper(props: FieldProps<T, any, M>) {\n\n        const {\n            enabled,\n            suggestions,\n            enhance,\n            loadingSuggestions\n        } = useDataEnhancementController();\n\n        const loading = loadingSuggestions?.includes(props.propertyKey);\n        const suggestedValue = suggestions?.[props.propertyKey];\n\n        const filledCharacters = countStringCharacters(props.context.values, props.context.collection.properties);\n        const enoughData = filledCharacters > 5;\n\n        return <FieldInner\n            loading={loading}\n            props={props as FieldProps}\n            suggestedValue={suggestedValue}\n            enabled={enabled}\n            enoughData={enoughData}\n            Field={Field as React.ComponentType<FieldProps>}\n            enhance={enhance}/>\n\n    };\n}\n\ninterface FieldInnerParams<T extends CMSType = CMSType, M extends Record<string, any> = any> {\n    loading: boolean;\n    props: FieldProps<T, any, M>;\n    suggestedValue: string | number;\n    enabled: boolean;\n    enoughData: boolean;\n    Field: React.ComponentType<FieldProps<T, any, M>>;\n    enhance: (props: EnhanceParams<M>) => Promise<EnhancedDataResult>;\n}\n\nconst FieldInner = React.memo(function FieldInner<T extends CMSType = CMSType, M extends Record<string, any> = any>({\n                                                                                                                        loading,\n                                                                                                                        props,\n                                                                                                                        suggestedValue,\n                                                                                                                        enabled,\n                                                                                                                        enoughData,\n                                                                                                                        Field,\n                                                                                                                        enhance\n                                                                                                                    }: FieldInnerParams<T, M>) {\n\n    const [dataLoading, setDataLoading] = useState(false);\n\n    const [tooltipOpen, setTooltipOpen] = React.useState(false);\n    const [menuOpen, setMenuOpen] = React.useState(false);\n    const [propertyInstructions, setPropertyInstructions] = useState<string>();\n\n    if (!enabled) {\n        // @ts-ignore\n        return <Field {...props} />\n    }\n\n    const showEnhanceIcon = !props.disabled && (!props.value || (props.property.dataType === \"string\" && (props.property.multiline || props.property.markdown)));\n\n    const shouldUseAdvancedField = props.property.dataType === \"string\" && (!props.property.enumValues && !props.property.markdown);\n    const fieldBinding = shouldUseAdvancedField\n        ? <EnhanceTextFieldBinding {...props as FieldProps<any>}\n                                   highlight={suggestedValue as string}/>\n        : <Field {...props} />;\n\n    const enhanceData = (instructions?: string) => {\n        if (!props.context.entityId) return;\n        if (!enoughData) return;\n        setMenuOpen(false);\n        setDataLoading(true);\n        return enhance({\n            entityId: props.context.entityId,\n            propertyKey: props.propertyKey,\n            propertyInstructions: instructions,\n            values: props.context.values,\n            replaceValues: false\n        }).finally(() => setDataLoading(false));\n    };\n\n    const allowInstructions = props.property.dataType === \"string\" && !props.property.enumValues;\n\n    return <div className={\"relative\"}>\n\n        {fieldBinding}\n\n        {showEnhanceIcon && <div className={\"dark:bg-gray-700 bg-gray-100 rounded-full absolute right-2 -top-4\"}>\n            <Tooltip\n                open={tooltipOpen}\n                onOpenChange={setTooltipOpen}\n                side={\"left\"}\n                title={enoughData\n                    ? `Autofill ${props.property.name ?? \"this field\"}`\n                    : `You need to input some data in the form before enhancing ${props.property.name ?? \"this field\"}`}>\n                <Menu\n                    open={menuOpen}\n                    onOpenChange={setMenuOpen}\n                    trigger={\n                        <IconButton\n                            size=\"small\"\n                            aria-label=\"Enhance field\"\n                            disabled={dataLoading || loading}\n                            className={enoughData ? \"text-gray-900 dark:text-white\" : \"text-gray-400 dark:text-gray-600\"}\n                            onClick={() => {\n                                if (!props.context.entityId) return;\n                                if (!enoughData) return;\n                                setTooltipOpen(false);\n                                setDataLoading(true);\n                                return enhance({\n                                    entityId: props.context.entityId,\n                                    propertyKey: props.propertyKey,\n                                    values: props.context.values,\n                                    replaceValues: false\n                                }).finally(() => setDataLoading(false));\n                            }}>\n                            {dataLoading || loading\n                                ? <CircularProgress size={\"small\"}/>\n                                : <AutoAwesomeIcon\n                                    size={\"small\"}/>}\n                        </IconButton>}>\n                    <MenuItem onClick={() => enhanceData()}>\n                        <AutoAwesomeIcon\n                            size=\"small\"/>\n                        <div className={\"flex flex-col\"}>\n                            <Typography\n                                variant={\"body2\"}> {`Autofill ${props.property.name ?? \"this field\"}`}</Typography>\n                            <Typography variant={\"caption\"}>based on the rest of the entity</Typography>\n                        </div>\n                    </MenuItem>\n\n                    {allowInstructions && <div className={\"p-4\"}>\n                        <TextField label={\"Ask AI to write\"}\n                                   size={\"small\"}\n                                   className={\"w-[400px] max-w-full\"}\n                                   value={propertyInstructions ?? \"\"}\n                                   onKeyDown={(e) => {\n                                       if (e.key === \"Enter\") {\n                                           enhanceData(propertyInstructions);\n                                       }\n                                   }}\n                                   placeholder={\"Instructions\"}\n                                   onChange={(e) => setPropertyInstructions(e.target.value)}\n                                   endAdornment={<IconButton\n                                       size={\"small\"}\n                                       onClick={() => enhanceData(propertyInstructions)}\n                                       disabled={!propertyInstructions}>\n                                       <SendIcon size={\"small\"}/>\n                                   </IconButton>}>\n                        </TextField>\n                    </div>}\n\n                </Menu>\n\n            </Tooltip>\n        </div>}\n\n    </div>\n}, (prevProps, nextProps) => {\n    return prevProps.loading === nextProps.loading &&\n        prevProps.suggestedValue === nextProps.suggestedValue &&\n        prevProps.enabled === nextProps.enabled &&\n        prevProps.props.value === nextProps.props.value &&\n        prevProps.props.error === nextProps.props.error &&\n        prevProps.props.showError === nextProps.props.showError &&\n        prevProps.props.disabled === nextProps.props.disabled &&\n        equal(prevProps.props.property, nextProps.props.property) &&\n        prevProps.Field === nextProps.Field &&\n        prevProps.enoughData === nextProps.enoughData;\n});\n","import { EntityValues, ResolvedProperties, ResolvedProperty } from \"@firecms/core\";\n\nexport function countStringCharacters(values: EntityValues<any>, properties: ResolvedProperties<any>) {\n    let count = 0;\n\n    for (const key in values) {\n        const value = values[key];\n        const property: ResolvedProperty = properties[key];\n\n        if (property && !property.disabled) {\n            if (property.dataType === \"string\" || property.dataType === \"number\") {\n                count += value ? String(value).length : 0;\n            } else if (property.dataType === \"array\" && Array.isArray(value) && property.of?.dataType === \"string\") {\n                count += (value as string[]).reduce((acc, curr) => acc + (curr?.length ?? 0), 0);\n            } else if (property.dataType === \"map\" && property.properties && typeof value === \"object\") {\n                count += countStringCharacters(value, property.properties);\n            }\n        }\n    }\n\n    return count;\n}\n","import React, { useCallback, useDeferredValue, useEffect, useMemo, useRef } from \"react\";\n\nimport {\n    AutoAwesomeIcon,\n    Autocomplete,\n    AutocompleteItem,\n    AutoFixHighIcon,\n    Button,\n    CircularProgress,\n    ClearIcon,\n    cn,\n    defaultBorderMixin,\n    IconButton,\n    SendIcon,\n    TextareaAutosize,\n    Tooltip,\n    useAutoComplete\n} from \"@firecms/ui\";\nimport {\n    EntityStatus,\n    isPropertyBuilder,\n    PluginFormActionProps,\n    PropertiesOrBuilders,\n    Property,\n    PropertyOrBuilder,\n    singular,\n    stripCollectionPath,\n} from \"@firecms/core\";\nimport { useDataEnhancementController } from \"./DataEnhancementControllerProvider\";\nimport { SamplePrompt } from \"../types/data_enhancement_controller\";\nimport { countStringCharacters } from \"../utils/countStringCharacters\";\n\nconst DEFAULT_HEIGHT = 52;\n\nexport function FormEnhanceAction({\n                                      entityId,\n                                      path,\n                                      status,\n                                      collection,\n                                      formContext\n                                  }: PluginFormActionProps) {\n\n    const inputRef = React.useRef<HTMLInputElement>(null);\n    // const autocompleteRef = React.useRef<HTMLDivElement>(null);\n\n    const [internalStatus, setInternalStatus] = React.useState<EntityStatus>(status);\n    const storageKey = createLocalStorageKey(path, internalStatus);\n\n    const [loading, setLoading] = React.useState(false);\n    const dataEnhancementController = useDataEnhancementController();\n\n    const [samplePrompts, setSamplePrompts] = React.useState<SamplePrompt[] | undefined>(undefined);\n    const [instructions, setInstructions] = React.useState<string>(\"\");\n    const [height, setHeight] = React.useState<number | undefined>(DEFAULT_HEIGHT);\n\n    const {\n        inputFocused,\n        autoCompleteOpen,\n        setAutoCompleteOpen\n    } = useAutoComplete({\n        ref: inputRef\n    });\n\n    const placeholder = useMemo(() => getPlaceholder(collection.singularName ?? collection.name, samplePrompts), [samplePrompts]);\n\n    const {\n        suggestions,\n        getSamplePrompts\n    } = dataEnhancementController;\n\n    const loadingPrompts = useRef(false);\n    const updateSuggestedPrompts = useCallback(async function updateSuggestedPrompts(instructions?: string) {\n            if (loadingPrompts.current) return;\n            loadingPrompts.current = true;\n            const prompts = internalStatus === \"new\"\n                ? (await getSamplePrompts(collection.singularName ?? collection.name, instructions)).prompts\n                : getPromptsForExistingEntities(collection.properties);\n\n            const recentPromptsFromStorage = getRecentPromptsFromStorage(storageKey);\n            const recentPrompts = recentPromptsFromStorage.map(prompt => prompt.prompt);\n            setSamplePrompts([...recentPromptsFromStorage, ...prompts.filter(p => !recentPrompts.includes(p.prompt))].slice(0, 5));\n            loadingPrompts.current = false;\n        },\n        [collection.name, collection.singularName, getSamplePrompts, internalStatus]);\n\n    const deferredValues = useDeferredValue(formContext?.values);\n    const enoughData = countStringCharacters(deferredValues, collection.properties) > 20;\n\n    useEffect(() => {\n        if (!samplePrompts) {\n            setSamplePrompts(getRecentPromptsFromStorage(storageKey));\n            updateSuggestedPrompts().then();\n        }\n    }, [samplePrompts, storageKey, updateSuggestedPrompts, instructions, internalStatus]);\n\n    useEffect(() => {\n        updateSuggestedPrompts().then();\n    }, [internalStatus]);\n\n    const enhance = (prompt?: string) => {\n        if (!entityId || !formContext?.values) return;\n        setLoading(true);\n        setAutoCompleteOpen(false);\n        if (prompt) {\n            addRecentPrompt(storageKey, prompt);\n            setSamplePrompts([{\n                prompt,\n                type: \"recent\"\n            }, ...(samplePrompts ?? []).slice(0, 5)]);\n        }\n        return dataEnhancementController.enhance({\n            entityId,\n            values: formContext!.values,\n            instructions: prompt,\n            replaceValues: true\n        }).finally(() => {\n            setLoading(false);\n        });\n    };\n\n    if (!dataEnhancementController?.enabled)\n        return null;\n\n    const hasSuggestions = Object.values(suggestions).filter(Boolean).length > 0;\n\n    const disabledSuggestionActions = !hasSuggestions;\n    const promptSuggestionsEnabled = (samplePrompts ?? []).length > 0 && instructions.length === 0;\n\n    const noIdSet = !formContext?.entityId;\n\n    return (\n        <div className={\"relative w-full\"}\n             style={{ height }}>\n            <div className=\"absolute flex flex-col items-center w-full font-medium text-sm\">\n\n                <form\n                    className={cn(\n                        defaultBorderMixin,\n                        \"border-b\",\n                        \"flex w-full items-center gap-2 pr-4 pl-6\",\n                        inputFocused ? \"text-primary\" : \"text-gray-700 dark:text-gray-200\"\n                    )}\n                    onSubmit={(e) => {\n                        setAutoCompleteOpen(false);\n                        e.preventDefault();\n                        enhance(instructions);\n                    }}>\n\n                    <AutoFixHighIcon/>\n                    <TextareaAutosize\n                        className={\"flex-grow w-full resize-none w-full outline-none py-5 mx-2 bg-transparent\"}\n                        ref={inputRef}\n                        value={instructions}\n                        autoFocus={status === \"new\"}\n                        disabled={loading || noIdSet}\n                        // onFocus={onFocus}\n                        // onBlur={onBlur}\n                        onResize={(state) => {\n                            setHeight(state.outerHeightStyle);\n                        }}\n                        placeholder={noIdSet ? \"Please set an ID first\" : placeholder?.prompt}\n                        onClick={() => {\n                            if (!autoCompleteOpen)\n                                setAutoCompleteOpen(true);\n                        }}\n                        onKeyDown={(e) => {\n                            if (e.key === \"Enter\" && !e.shiftKey) {\n                                e.preventDefault();\n                                enhance(instructions);\n                            }\n                            if (e.key === \"Escape\" && autoCompleteOpen) {\n                                setAutoCompleteOpen(false);\n                                e.preventDefault();\n                            }\n                        }}\n                        onChange={(e) => {\n                            if (noIdSet) return;\n                            setInstructions(e.target.value);\n                        }}\n                    />\n                    <Autocomplete\n                        open={autoCompleteOpen}\n                        setOpen={setAutoCompleteOpen}>\n                        {samplePrompts?.map((samplePrompt, index) => {\n                            return <AutocompleteItem\n                                key={index + \"_\" + samplePrompt.prompt}\n                                onClick={() => {\n                                    setInstructions(samplePrompt.prompt);\n                                    enhance(samplePrompt.prompt);\n                                }}\n                            >\n                                <div className={\"flex-grow\"}>\n                                    {samplePrompt.prompt}\n                                </div>\n\n                                {samplePrompt.type === \"recent\" && <IconButton\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        e.stopPropagation();\n                                        removeRecentPrompt(storageKey, samplePrompt.prompt);\n                                        setSamplePrompts((samplePrompts ?? []).filter(p => p.prompt !== samplePrompt.prompt));\n                                    }}\n                                    size={\"small\"}\n                                >\n                                    <ClearIcon size=\"small\"/>\n                                </IconButton>\n                                }\n                            </AutocompleteItem>;\n                        })}\n\n                    </Autocomplete>\n\n                    {!loading && instructions && <IconButton\n                        size={\"small\"}\n                        onClick={() => {\n                            setInstructions(\"\");\n                            inputRef.current?.focus();\n                        }}\n                        color={inputFocused || !instructions ? \"primary\" : undefined}\n                        disabled={loading}>\n                        <ClearIcon size={\"small\"}/>\n                    </IconButton>}\n\n                    {(loading || instructions) && <IconButton\n                        onClick={() => enhance(instructions)}\n                        size={\"large\"}\n                        color={inputFocused || !instructions ? \"primary\" : undefined}\n                        className={cn(!instructions ? \"!bg-slate-50 dark:!bg-slate-800\" : \"\")}\n                        disabled={loading}>\n                        {loading &&\n                            <CircularProgress size={\"small\"}/>}\n                        {!loading && instructions &&\n                            <SendIcon color={\"primary\"}/>}\n                    </IconButton>}\n\n                    {!loading && !instructions && <Tooltip\n                        title={!enoughData\n                            ? \"You need to input some data in the form before enhancing this entity, or use the prompt to give specific instructions\"\n                            : \"Try to fill the missing fields. You can use the prompt to give specific instructions\"}>\n                        <Button variant={\"outlined\"}\n                                size={\"small\"}\n                                onClick={() => enhance()}\n                                disabled={!enoughData || loading}>\n                            <AutoAwesomeIcon color={\"primary\"}/>\n                            Autofill\n                        </Button>\n                    </Tooltip>}\n\n                </form>\n\n                {/*{samplePrompts &&*/}\n                {/*    <Collapse*/}\n                {/*        in={autocompleteOpen}*/}\n                {/*        duration={100}*/}\n                {/*        className={cn(*/}\n                {/*            defaultBorderMixin,*/}\n                {/*            autocompleteOpen ? \"border-b shadow \" : \"\",*/}\n                {/*            \"bg-gray-100 dark:bg-gray-900\",*/}\n                {/*            \"z-20\",*/}\n                {/*            \"w-full\")}>*/}\n                {/*        <div ref={autocompleteRef}>*/}\n                {/*            {samplePrompts?.map((samplePrompt, index) => {*/}\n                {/*                return <div*/}\n                {/*                    key={index}*/}\n                {/*                    className={\"flex w-full items-center pr-6 pl-16 h-[48px] cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800\"}*/}\n                {/*                    onClick={() => {*/}\n                {/*                        setInstructions(samplePrompt.prompt);*/}\n                {/*                        enhance(samplePrompt.prompt);*/}\n                {/*                    }}*/}\n                {/*                >*/}\n                {/*                    <div className={\"flex-grow\"}>*/}\n                {/*                        {samplePrompt.prompt}*/}\n                {/*                    </div>*/}\n\n                {/*                    {samplePrompt.type === \"recent\" && <IconButton*/}\n                {/*                        onClick={(e) => {*/}\n                {/*                            e.preventDefault();*/}\n                {/*                            e.stopPropagation();*/}\n                {/*                            removeRecentPrompt(storageKey, samplePrompt.prompt);*/}\n                {/*                            setSamplePrompts((samplePrompts ?? []).filter(p => p.prompt !== samplePrompt.prompt));*/}\n                {/*                        }}*/}\n                {/*                        size={\"small\"}*/}\n                {/*                    >*/}\n                {/*                        <ClearIcon size=\"small\"/>*/}\n                {/*                    </IconButton>*/}\n                {/*                    }*/}\n                {/*                </div>;*/}\n                {/*            })}*/}\n                {/*        </div>*/}\n                {/*    </Collapse>}*/}\n\n            </div>\n        </div>\n    );\n}\n\nexport interface EnhanceDialogProps {\n    open: boolean;\n    onClose: () => void;\n    selectReferences: () => void;\n    loading: boolean;\n    enhance: (instructions: string) => void;\n    samplePrompts?: string[];\n}\n\nfunction getPromptsForExistingEntities(properties: PropertiesOrBuilders): SamplePrompt[] {\n\n    const multilineProperties = Object.values(properties).filter((p: PropertyOrBuilder) => {\n        if (isPropertyBuilder(p)) {\n            return false;\n        }\n        return p.dataType === \"string\" && (p.markdown || p.multiline);\n    });\n\n    const multilinePrompt: Property | undefined = multilineProperties.length > 0\n        ? multilineProperties[Math.floor(Math.random() * multilineProperties.length)] as Property\n        : undefined;\n\n    const prompts = [\n        \"Fill the missing fields\",\n        \"Translate the missing content\"\n    ];\n    if (multilinePrompt) {\n        prompts.push(`Add 2 paragraphs to '${multilinePrompt.name}'`);\n    }\n    return prompts.map(p => ({\n        prompt: p,\n        type: \"sample\"\n    }));\n}\n\nfunction getPlaceholder(name: string, prompts?: SamplePrompt[]) {\n    const samplePrompts: SamplePrompt[] = (prompts ?? []).length > 0\n        ? (prompts as SamplePrompt[])\n        : [\n            \"e.g. I want to generate a new document about...\",\n            \"e.g. Add a paragraph to the description\",\n            `e.g. Generate a new ${singular(name)} related to...`\n        ].map(p => ({\n            prompt: p,\n            type: \"sample\"\n        }));\n    return samplePrompts[Math.floor(Math.random() * samplePrompts.length)];\n}\n\nconst createLocalStorageKey = (path: string, status: EntityStatus,) => {\n    const statusString = status === \"new\" ? \"new\" : \"existing\";\n    return `data_enhancement::${statusString}::${stripCollectionPath(path)}`;\n};\n\nconst getRecentPromptsFromStorage = (storageKey: string): SamplePrompt[] => {\n    const item = localStorage.getItem(storageKey);\n    return item ? JSON.parse(item).map((e: string) => ({\n        prompt: e,\n        type: \"recent\"\n    })) : [];\n};\n\nconst addRecentPrompt = (storageKey: string, prompt: string) => {\n    if (!prompt || prompt.trim().length === 0) {\n        return;\n    }\n    const recentPrompts = getRecentPromptsFromStorage(storageKey);\n    localStorage.setItem(storageKey, JSON.stringify([prompt, ...recentPrompts\n        .map(e => e.prompt)\n        .filter(e => e !== prompt)\n        .slice(0, 5)]));\n};\n\nconst removeRecentPrompt = (storageKey: string, prompt: string) => {\n    localStorage.setItem(storageKey, JSON.stringify(getRecentPromptsFromStorage(storageKey)\n        .map(e => e.prompt)\n        .filter(e => e !== prompt)));\n};\n","import React, { useCallback } from \"react\";\n\nimport { EntityCollection, FireCMSPlugin, PluginFieldBuilderParams, useAuthController, User } from \"@firecms/core\";\nimport { DataEnhancementControllerProvider } from \"./components/DataEnhancementControllerProvider\";\nimport { fieldBuilder } from \"./components/field_builder\";\nimport { FormEnhanceAction } from \"./components/FormEnhanceAction\";\nimport { SubscriptionMessageProps } from \"./types/subscriptions_message_props\";\n\nconst DEFAULT_API_KEY = \"fcms-U9jdDii0xXWSDC34asfrf54lbkFJBfKfRWcEDEwdc4V5wDWEDF\";\n\nexport interface DataEnhancementPluginProps {\n\n    apiKey?: string;\n\n    /**\n     * Use this function to determine if the data enhancement plugin should be enabled for a given path.\n     * If this function is not provided, the plugin will be enabled for all paths.\n     * If the function returns false, the plugin will be disabled for the given path.\n     * You can also return a configuration object to override the default configuration.\n     *\n     * @param path\n     * @param collection\n     */\n    getConfigForPath?: (props: {\n        path: string,\n        collection: EntityCollection,\n        user: User | null\n    }) => boolean;\n\n    /**\n     * Component to render when the user has finished their free usage quota.\n     */\n    SubscriptionMessage?: React.ComponentType<SubscriptionMessageProps>;\n\n    /**\n     * Host to use for the data enhancement API.\n     * This prop is only use in development mode.\n     */\n    host?: string;\n}\n\n/**\n * Use this hook to initialise the data enhancement plugin.\n * This is likely the only hook you will need to use.\n * @param props\n */\nexport function useDataEnhancementPlugin(props?: DataEnhancementPluginProps): FireCMSPlugin {\n\n    const apiKey = props?.apiKey ?? DEFAULT_API_KEY;\n    const getConfigForPath = props?.getConfigForPath;\n    const authController = useAuthController();\n\n    const fieldBuilderEnabled = useCallback((params: PluginFieldBuilderParams<any>) => {\n        if (!getConfigForPath) return true;\n        return getConfigForPath({\n            path: params.path,\n            collection: params.collection,\n            user: authController.user\n        })\n    }, [getConfigForPath, authController.user]);\n\n    return {\n        key: \"data_enhancement\",\n        form: {\n            Actions: FormEnhanceAction,\n            provider: {\n                Component: DataEnhancementControllerProvider,\n                props: {\n                    apiKey,\n                    getConfigForPath,\n                    SubscriptionMessage: props?.SubscriptionMessage,\n                    host: props?.host\n                }\n            },\n            fieldBuilder,\n            fieldBuilderEnabled\n        },\n        homePage: {\n            // CollectionActions: EnhanceCollectionIcon,\n            extraProps: {\n                getConfigForPath\n            }\n        }\n        // loading: configController.loading,\n    };\n}\n"],"names":["flatMapEntityValues","values","path","key","value","currentPath","acc","curr","DEFAULT_SERVER","enhanceDataAPIStream","props","flatValues","properties","request","res","reader","chunk","readChunks","str","s","data","e","readResult","fetchEntityPromptSuggestion","getAppendableSuggestion","suggestion","suggestionIncludesValue","getSimplifiedProperties","property","isPropertyBuilder","fullKey","valueInPath","getValueInPath","getSimplifiedProperty","b","getSimpleProperty","fieldId","getFieldId","getSimpleEnumValues","arrayParentProperty","prop","a","v","i","typeKey","oneOfType","valueKey","oneOfValue","childProperty","simplifiedProperty","mapProperties","childValue","o","attachPathToKeys","mapParentProperty","obj","enumValues","DefaultSubscriptionMessage","projectId","jsxs","jsx","Typography","Button","DataEnhancementControllerContext","React","useDataEnhancementController","useContext","getPropertyFromKey","propertyKey","split","parentKey","DataEnhancementControllerProvider","apiKey","getConfigForPath","children","host","collection","formContext","SubscriptionMessageProp","enabled","setEnabled","useState","suggestions","setSuggestions","loadingSuggestions","setLoadingSuggestions","context","useFireCMSContext","customizationController","useCustomizationController","enhancingInProgress","useRef","authController","useAuthController","snackbarController","useSnackbarController","resolvedCollection","resolveCollection","useMemo","valuesRef","useEffect","allowReferenceDataSelection","updateConfig","useCallback","dataSource","useDataSource","navigationController","useNavigationController","clearSuggestion","prev","_","rest","appendValueDelta","delta","updatedValue","updateSuggestedValues","currentValues","updatedValues","replaceValues","p","appendableValue","currentValue","multiline","trimmedValue","displayNeededSubscriptionSnackbar","enhance","resolvedPath","firebaseToken","clearAllSuggestions","resolve","reject","onError","partialValue","result","error","getSamplePrompts","entityName","input","dataEnhancementController","SUPPORTED_FIELDS_ENHANCEMENT","AdvancedTextField","setValue","label","inputType","highlight","disabled","size","className","inputRef","ref","internalValue","setInternalValue","onScroll","focused","setFocused","hasValue","endsWithHighlight","originalValue","onChange","event","stringValue","numberValue","TextField","additional","cn","fieldBackgroundMixin","fieldBackgroundDisabledMixin","fieldBackgroundHoverMixin","InputLabel","addLineBreaks","TextareaAutosize","focusedMixin","addLastBreak","lines","EnhanceTextFieldBinding","showError","autoFocus","includeDescription","useClearRestoreValue","Fragment","LabelWithIcon","getIconForProperty","FieldHelperText","prevProps","nextProps","equal","countStringCharacters","count","fieldBuilder","params","fieldConfigId","builder","Field","loading","suggestedValue","enoughData","FieldInner","dataLoading","setDataLoading","tooltipOpen","setTooltipOpen","menuOpen","setMenuOpen","propertyInstructions","setPropertyInstructions","showEnhanceIcon","fieldBinding","enhanceData","instructions","allowInstructions","Tooltip","Menu","IconButton","CircularProgress","AutoAwesomeIcon","MenuItem","SendIcon","DEFAULT_HEIGHT","FormEnhanceAction","entityId","status","internalStatus","setInternalStatus","storageKey","createLocalStorageKey","setLoading","samplePrompts","setSamplePrompts","setInstructions","height","setHeight","inputFocused","autoCompleteOpen","setAutoCompleteOpen","useAutoComplete","placeholder","getPlaceholder","loadingPrompts","updateSuggestedPrompts","prompts","getPromptsForExistingEntities","recentPromptsFromStorage","getRecentPromptsFromStorage","recentPrompts","prompt","deferredValues","useDeferredValue","addRecentPrompt","noIdSet","defaultBorderMixin","AutoFixHighIcon","state","Autocomplete","samplePrompt","index","AutocompleteItem","removeRecentPrompt","ClearIcon","multilineProperties","multilinePrompt","name","singular","stripCollectionPath","item","DEFAULT_API_KEY","useDataEnhancementPlugin","fieldBuilderEnabled"],"mappings":"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"}