{"version":3,"file":"index.umd.js","sources":["../src/ui/collection_editor/CollectionYupValidation.tsx","../src/ui/collection_editor/CollectionDetailsForm.tsx","../src/ui/collection_editor/util.ts","../src/ui/collection_editor/EnumForm.tsx","../src/ui/collection_editor/SwitchControl.tsx","../src/ui/collection_editor/properties/validation/GeneralPropertyValidation.tsx","../src/ui/collection_editor/properties/validation/StringPropertyValidation.tsx","../src/ui/collection_editor/properties/validation/ArrayPropertyValidation.tsx","../src/ui/collection_editor/properties/validation/ValidationPanel.tsx","../src/ui/collection_editor/properties/EnumPropertyField.tsx","../src/ui/collection_editor/properties/StoragePropertyField.tsx","../src/utils/entities.ts","../src/ui/collection_editor/PropertyFieldPreview.tsx","../src/ui/collection_editor/PropertyTree.tsx","../src/ui/collection_editor/properties/MapPropertyField.tsx","../src/ui/collection_editor/properties/RepeatPropertyField.tsx","../src/ui/collection_editor/properties/CommonPropertyFields.tsx","../src/ui/collection_editor/properties/StringPropertyField.tsx","../src/ui/collection_editor/properties/BooleanPropertyField.tsx","../src/ui/collection_editor/properties/BlockPropertyField.tsx","../src/ui/collection_editor/properties/validation/NumberPropertyValidation.tsx","../src/ui/collection_editor/properties/NumberPropertyField.tsx","../src/ui/collection_editor/properties/ReferencePropertyField.tsx","../src/ui/collection_editor/properties/DateTimePropertyField.tsx","../src/ui/collection_editor/properties/advanced/AdvancedPropertyValidation.tsx","../src/ui/collection_editor/properties/KeyValuePropertyField.tsx","../src/ui/collection_editor/utils/update_property_for_widget.ts","../src/ui/collection_editor/PropertySelectItem.tsx","../src/ui/collection_editor/properties/UrlPropertyField.tsx","../src/ui/collection_editor/utils/supported_fields.tsx","../src/ui/collection_editor/PropertyEditView.tsx","../src/ui/collection_editor/utils/strings.ts","../src/ui/collection_editor/GetCodeDialog.tsx","../src/ui/collection_editor/CollectionPropertiesEditorForm.tsx","../src/ui/collection_editor/UnsavedChangesDialog.tsx","../src/ui/collection_editor/EntityCustomViewsSelectDialog.tsx","../src/ui/collection_editor/SubcollectionsEditTab.tsx","../src/ui/collection_editor/templates/products_template.ts","../src/ui/collection_editor/templates/blog_template.ts","../src/ui/collection_editor/templates/users_template.ts","../src/ui/collection_editor/templates/pages_template.ts","../src/ui/collection_editor/CollectionEditorWelcomeView.tsx","../src/ui/collection_editor/import/CollectionEditorImportMapping.tsx","../src/ui/collection_editor/import/CollectionEditorImportDataPreview.tsx","../src/ui/collection_editor/import/clean_import_data.ts","../src/ui/collection_editor/CollectionEditorDialog.tsx","../src/ConfigControllerProvider.tsx","../src/useCollectionEditorController.tsx","../src/ui/EditorCollectionAction.tsx","../src/useCollectionsConfigController.tsx","../src/ui/HomePageEditorCollectionAction.tsx","../src/ui/CollectionViewHeaderAction.tsx","../src/ui/PropertyAddColumnComponent.tsx","../src/ui/NewCollectionButton.tsx","../src/ui/EditorCollectionActionStart.tsx","../src/ui/NewCollectionCard.tsx","../src/useCollectionEditorPlugin.tsx","../src/utils/collections.ts","../src/ui/MissingReferenceWidget.tsx"],"sourcesContent":["import * as Yup from \"yup\";\n\nexport const YupSchema = Yup.object().shape({\n    id: Yup.string().required(\"Required\"),\n    name: Yup.string().required(\"Required\"),\n    path: Yup.string().required(\"Required\")\n});\n","import React, { useEffect, useState } from \"react\";\nimport { EntityCollection, FieldCaption, IconForView, SearchIconsView, singular, toSnakeCase, } from \"@firecms/core\";\nimport {\n    Autocomplete,\n    AutocompleteItem,\n    BooleanSwitchWithLabel,\n    Chip,\n    cn,\n    Container,\n    DebouncedTextField,\n    Dialog,\n    ExpandablePanel,\n    IconButton,\n    Select,\n    SelectItem,\n    SettingsIcon,\n    TextField,\n    Tooltip,\n    Typography,\n    useAutoComplete\n} from \"@firecms/ui\";\n\nimport { Field, getIn, useFormex } from \"@firecms/formex\";\n\nexport function CollectionDetailsForm({\n                                          isNewCollection,\n                                          reservedGroups,\n                                          existingPaths,\n                                          existingIds,\n                                          groups,\n                                          parentCollection\n                                      }: {\n    isNewCollection: boolean,\n    reservedGroups?: string[];\n    existingPaths?: string[];\n    existingIds?: string[];\n    groups: string[] | null;\n    parentCollection?: EntityCollection;\n    parentCollectionIds?: string[];\n}) {\n\n    const groupRef = React.useRef<HTMLInputElement>(null);\n    const {\n        values,\n        setFieldValue,\n        handleChange,\n        touched,\n        errors,\n        setFieldTouched,\n        isSubmitting,\n        submitCount\n    } = useFormex<EntityCollection>();\n\n    const [iconDialogOpen, setIconDialogOpen] = useState(false);\n    const [advancedPanelExpanded, setAdvancedPanelExpanded] = useState(false);\n\n    const updateName = (name: string) => {\n        setFieldValue(\"name\", name);\n\n        const pathTouched = getIn(touched, \"path\");\n        if (!pathTouched && isNewCollection && name) {\n            setFieldValue(\"path\", toSnakeCase(name));\n        }\n\n        const idTouched = getIn(touched, \"id\");\n        if (!idTouched && isNewCollection && name) {\n            setFieldValue(\"id\", toSnakeCase(name));\n        }\n\n        const singularNameTouched = getIn(touched, \"singularName\");\n        if (!singularNameTouched && isNewCollection && name) {\n            setFieldValue(\"singularName\", singular(name));\n        }\n\n    };\n\n    useEffect(() => {\n        if (errors.id) {\n            setAdvancedPanelExpanded(true);\n        }\n    }, [errors.id]);\n\n    const collectionIcon = <IconForView collectionOrView={values}/>;\n\n    const groupOptions = groups?.filter((group) => !reservedGroups?.includes(group));\n\n    const {\n        inputFocused,\n        autoCompleteOpen,\n        setAutoCompleteOpen\n    } = useAutoComplete({\n        ref: groupRef\n    });\n\n    const isSubcollection = !!parentCollection;\n\n    let customIdValue: \"true\" | \"false\" | \"optional\" | \"code_defined\" | undefined;\n    if (typeof values.customId === \"object\") {\n        customIdValue = \"code_defined\";\n    } else if (values.customId === true) {\n        customIdValue = \"true\";\n    } else if (values.customId === false) {\n        customIdValue = \"false\";\n    } else if (values.customId === \"optional\") {\n        customIdValue = \"optional\";\n    }\n\n    const showErrors = submitCount > 0;\n    return (\n        <div className={\"overflow-auto my-auto\"}>\n            <Container maxWidth={\"4xl\"} className={\"flex flex-col gap-4 p-8 m-auto\"}>\n\n                <div>\n                    <div\n                        className=\"flex flex-row py-2 pt-3 items-center\">\n                        <Typography variant={!isNewCollection ? \"h5\" : \"h4\"} className={\"flex-grow\"}>\n                            {isNewCollection ? \"New collection\" : `${values?.name} collection`}\n                        </Typography>\n                        <Tooltip title={\"Change icon\"}>\n                            <IconButton\n                                shape={\"square\"}\n                                onClick={() => setIconDialogOpen(true)}>\n                                {collectionIcon}\n                            </IconButton>\n                        </Tooltip>\n                    </div>\n\n                    {parentCollection && <Chip colorScheme={\"tealDarker\"}>\n                        <Typography variant={\"caption\"}>\n                            This is a subcollection of <b>{parentCollection.name}</b>\n                        </Typography>\n                    </Chip>}\n\n                </div>\n                <div className={\"grid grid-cols-12 gap-4\"}>\n\n                    <div className={\"col-span-12\"}>\n                        <TextField\n                            value={values.name ?? \"\"}\n                            onChange={(e: any) => updateName(e.target.value)}\n                            label={\"Name\"}\n                            required\n                            error={showErrors && Boolean(errors.name)}/>\n                        <FieldCaption error={touched.name && Boolean(errors.name)}>\n                            {touched.name && Boolean(errors.name) ? errors.name : \"Name of in this collection, usually a plural name (e.g. Products)\"}\n                        </FieldCaption>\n                    </div>\n\n                    <div className={cn(\"col-span-12 \", isSubcollection ? \"\" : \"sm:col-span-8\")}>\n                        <Field name={\"path\"}\n                               as={DebouncedTextField}\n                               label={\"Path\"}\n                               disabled={!isNewCollection}\n                               required\n                               error={showErrors && Boolean(errors.path)}/>\n\n                        <FieldCaption error={touched.path && Boolean(errors.path)}>\n                            {touched.path && Boolean(errors.path)\n                                ? errors.path\n                                : isSubcollection ? \"Relative path to the parent (no need to include the parent path)\" : \"Path that this collection is stored in, in the database\"}\n                        </FieldCaption>\n\n                    </div>\n\n                    {!isSubcollection && <div className={\"col-span-12 sm:col-span-4 relative\"}>\n\n                        <TextField error={showErrors && Boolean(errors.group)}\n                                   disabled={isSubmitting}\n                                   value={values.group ?? \"\"}\n                                   autoComplete=\"off\"\n                                   onChange={(event) => setFieldValue(\"group\", event.target.value)}\n                                   name={\"group\"}\n                                   inputRef={groupRef}\n                                   label=\"Group\"/>\n                        <Autocomplete\n                            open={autoCompleteOpen && (groupOptions ?? []).length > 0}\n                            setOpen={setAutoCompleteOpen}>\n                            {groupOptions?.map((group, index) => {\n                                return <AutocompleteItem\n                                    key={index + \"_\" + group}\n                                    onClick={() => {\n                                        setAutoCompleteOpen(false);\n                                        setFieldValue(\"group\", group ?? null);\n                                    }}\n                                >\n                                    <div className={\"flex-grow\"}>\n                                        {group}\n                                    </div>\n                                </AutocompleteItem>;\n                            })}\n                        </Autocomplete>\n                        <FieldCaption>\n                            {showErrors && Boolean(errors.group) ? errors.group : \"Group of the collection\"}\n                        </FieldCaption>\n                    </div>}\n\n                    <div className={\"col-span-12\"}>\n                        <ExpandablePanel\n                            expanded={advancedPanelExpanded}\n                            onExpandedChange={setAdvancedPanelExpanded}\n                            title={\n                                <div className=\"flex flex-row text-gray-500\">\n                                    <SettingsIcon/>\n                                    <Typography variant={\"subtitle2\"}\n                                                className=\"ml-2\">\n                                        Advanced\n                                    </Typography>\n                                </div>}\n                            initiallyExpanded={false}>\n                            <div className={\"grid grid-cols-12 gap-4 p-4\"}>\n\n                                <div className={\"col-span-12\"}>\n                                    <Field name={\"id\"}\n                                           as={DebouncedTextField}\n                                           disabled={!isNewCollection}\n                                           label={\"Collection id\"}\n                                           error={showErrors && Boolean(errors.id)}/>\n                                    <FieldCaption error={touched.id && Boolean(errors.id)}>\n                                        {touched.id && Boolean(errors.id) ? errors.id : \"This id identifies this collection. Typically the same as the path.\"}\n                                    </FieldCaption>\n                                </div>\n\n                                <div className={\"col-span-12\"}>\n                                    <TextField\n                                        error={showErrors && Boolean(errors.singularName)}\n                                        name={\"singularName\"}\n                                        aria-describedby={\"singularName-helper\"}\n                                        onChange={(e) => {\n                                            setFieldTouched(\"singularName\", true);\n                                            return handleChange(e);\n                                        }}\n                                        value={values.singularName ?? \"\"}\n                                        label={\"Singular name\"}/>\n                                    <FieldCaption error={showErrors && Boolean(errors.singularName)}>\n                                        {showErrors && Boolean(errors.singularName) ? errors.singularName : \"Optionally define a singular name for your entities\"}\n                                    </FieldCaption>\n                                </div>\n                                <div className={\"col-span-12\"}>\n                                    <TextField\n                                        error={showErrors && Boolean(errors.description)}\n                                        name=\"description\"\n                                        value={values.description ?? \"\"}\n                                        onChange={handleChange}\n                                        multiline\n                                        rows={2}\n                                        aria-describedby=\"description-helper-text\"\n                                        label=\"Description\"\n                                    />\n                                    <FieldCaption error={showErrors && Boolean(errors.description)}>\n                                        {showErrors && Boolean(errors.description) ? errors.description : \"Description of the collection, you can use markdown\"}\n                                    </FieldCaption>\n                                </div>\n\n                                <div className={\"col-span-12\"}>\n                                    <Select\n                                        name=\"defaultSize\"\n                                        label=\"Default row size\"\n                                        position={\"item-aligned\"}\n                                        onChange={handleChange}\n                                        value={values.defaultSize ?? \"\"}\n                                        renderValue={(value: any) => value.toUpperCase()}\n                                    >\n                                        {[\"xs\", \"s\", \"m\", \"l\", \"xl\"].map((value) => (\n                                            <SelectItem\n                                                key={`size-select-${value}`}\n                                                value={value}>\n                                                {value.toUpperCase()}\n                                            </SelectItem>\n                                        ))}\n                                    </Select>\n                                </div>\n                                <div className={\"col-span-12\"}>\n                                    <Select\n                                        name=\"customId\"\n                                        label=\"Data IDs generation\"\n                                        position={\"item-aligned\"}\n                                        disabled={customIdValue === \"code_defined\"}\n                                        onValueChange={(v) => {\n                                            if (v === \"code_defined\")\n                                                throw new Error(\"This should not happen\");\n                                            else if (v === \"true\")\n                                                setFieldValue(\"customId\", true);\n                                            else if (v === \"false\")\n                                                setFieldValue(\"customId\", false);\n                                            else if (v === \"optional\")\n                                                setFieldValue(\"customId\", \"optional\");\n                                        }}\n                                        value={customIdValue ?? \"\"}\n                                        renderValue={(value: any) => {\n                                            if (value === \"code_defined\")\n                                                return \"Code defined\";\n                                            else if (value === \"true\")\n                                                return \"Users must define an ID\";\n                                            else if (value === \"optional\")\n                                                return \"Users can define an ID, but it is not required\";\n                                            else\n                                                return \"Document ID is generated automatically\";\n                                        }}\n                                    >\n                                        <SelectItem value={\"false\"}>\n                                            Document ID is generated automatically\n                                        </SelectItem>\n                                        <SelectItem value={\"true\"}>\n                                            Users must define an ID\n                                        </SelectItem>\n                                        <SelectItem value={\"optional\"}>\n                                            Users can define an ID, but it is not required\n                                        </SelectItem>\n                                    </Select>\n                                </div>\n                                <div className={\"col-span-12\"}>\n                                    <BooleanSwitchWithLabel\n                                        position={\"start\"}\n                                        label=\"Collection group\"\n                                        onValueChange={(v) => setFieldValue(\"collectionGroup\", v)}\n                                        value={values.collectionGroup ?? false}\n                                    />\n                                    <FieldCaption>\n                                        A collection group consists of all collections with the same path. This allows\n                                        you\n                                        to query over multiple collections at once.\n                                    </FieldCaption>\n                                </div>\n                                <div className={\"col-span-12\"}>\n                                    <BooleanSwitchWithLabel\n                                        position={\"start\"}\n                                        label=\"Enable text search for this collection\"\n                                        onValueChange={(v) => setFieldValue(\"textSearchEnabled\", v)}\n                                        value={values.textSearchEnabled ?? false}\n                                    />\n                                    <FieldCaption>\n                                        Allow text search for this collection. If you have not specified a text search\n                                        delegate, this will use the built-in local text search. This is not recommended\n                                        for large collections, as it may incur in performance and cost issues.\n                                    </FieldCaption>\n                                </div>\n                            </div>\n                        </ExpandablePanel>\n\n                    </div>\n\n                </div>\n\n                <div style={{ height: \"52px\" }}/>\n\n                <Dialog\n                    open={iconDialogOpen}\n                    onOpenChange={setIconDialogOpen}\n                    maxWidth={\"xl\"}\n                    fullWidth\n                >\n                    <div className={\"p-4 overflow-auto min-h-[200px]\"}>\n                        <SearchIconsView selectedIcon={values.icon}\n                                         onIconSelected={(icon: string) => {\n                                             setIconDialogOpen(false);\n                                             setFieldValue(\"icon\", icon);\n                                         }}/>\n                    </div>\n\n                </Dialog>\n\n            </Container>\n        </div>\n    );\n}\n","export function idToPropertiesPath(id: string): string {\n    return \"properties.\" + id.replaceAll(\".\", \".properties.\");\n}\n\nexport function namespaceToPropertiesPath(namespace?: string): string {\n    return namespace\n        ? \"properties.\" + namespace.replaceAll(\".\", \".properties.\") + \".properties\"\n        : \"properties\";\n}\n\nexport function namespaceToPropertiesOrderPath(namespace?: string): string {\n    return namespace\n        ? \"properties.\" + namespace.replaceAll(\".\", \".properties.\") + \".propertiesOrder\"\n        : \"propertiesOrder\";\n}\n\nexport function getFullId(propertyKey: string, propertyNamespace?: string): string {\n    return propertyNamespace\n        ? `${propertyNamespace}.${propertyKey}`\n        : propertyKey;\n}\n\nexport function getFullIdPath(propertyKey: string, propertyNamespace?: string): string {\n    const keyWithNamespace = propertyNamespace\n        ? `${propertyNamespace}.${propertyKey}`\n        : propertyKey;\n    return idToPropertiesPath(keyWithNamespace);\n}\n","import React, { useEffect } from \"react\";\nimport equal from \"react-fast-compare\"\n\nimport { ArrayContainer, EnumValueConfig, EnumValues, FieldCaption, } from \"@firecms/core\";\nimport {\n    AutoAwesomeIcon,\n    Badge,\n    Button,\n    CircularProgress,\n    DebouncedTextField,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    IconButton,\n    ListIcon,\n    Paper,\n    SettingsIcon,\n    Typography\n} from \"@firecms/ui\";\nimport { extractEnumFromValues } from \"@firecms/schema_inference\";\nimport { Field, Formex, getIn, useCreateFormex, useFormex } from \"@firecms/formex\";\n\ntype EnumFormProps = {\n    enumValues: EnumValueConfig[];\n    onValuesChanged?: (enumValues: EnumValueConfig[]) => void;\n    onError?: (error: boolean) => void;\n    updateIds: boolean;\n    disabled: boolean;\n    allowDataInference?: boolean;\n    getData?: () => Promise<string[]>;\n};\n\nexport function EnumForm({\n                             enumValues,\n                             onValuesChanged,\n                             onError,\n                             updateIds,\n                             disabled,\n                             allowDataInference,\n                             getData\n                         }: EnumFormProps) {\n\n    const formex = useCreateFormex<{\n        enumValues: EnumValueConfig[]\n    }>({\n        initialValues: { enumValues },\n        validateOnChange: true,\n        validation: (values) => {\n            const errors: any = {};\n            if (values.enumValues) {\n                values.enumValues.forEach((enumValue, index) => {\n                    if (!enumValue?.label) {\n                        errors.enumValues = errors.enumValues ?? [];\n                        errors.enumValues[index] = errors.enumValues[index] ?? {};\n                        errors.enumValues[index].label = \"You must specify a label for this enum value entry\";\n                    }\n                    if (!enumValue?.id) {\n                        errors.enumValues = errors.enumValues ?? [];\n                        errors.enumValues[index] = errors.enumValues[index] ?? {};\n                        errors.enumValues[index].id = \"You must specify an ID for this enum value entry\";\n                    }\n                });\n            }\n            const hasError = Boolean(errors?.enumValues && Object.keys(errors?.enumValues).length > 0);\n            onError?.(hasError);\n            return errors;\n        }\n    });\n\n    const { values, errors } = formex;\n\n    useEffect(() => {\n        if (onValuesChanged) {\n            onValuesChanged(values.enumValues);\n        }\n    }, [values.enumValues]);\n\n    return <Formex value={formex}>\n        <EnumFormFields enumValuesPath={\"enumValues\"}\n                        values={values}\n                        errors={errors}\n                        shouldUpdateId={updateIds}\n                        disabled={disabled}\n                        allowDataInference={allowDataInference}\n                        getData={getData}/>\n    </Formex>\n\n}\n\ntype EnumFormFieldsProps = {\n    values: {\n        enumValues: EnumValueConfig[]\n    };\n    errors: any;\n    enumValuesPath: string;\n    shouldUpdateId: boolean;\n    disabled: boolean;\n    getData?: () => Promise<string[]>;\n    allowDataInference?: boolean;\n};\n\n// const EnumFormFields = React.memo(\nfunction EnumFormFields({\n                            values,\n                            errors,\n                            disabled,\n                            enumValuesPath,\n                            shouldUpdateId,\n                            allowDataInference,\n                            getData,\n                        }: EnumFormFieldsProps) {\n\n    const {\n        setFieldValue\n    } = useFormex();\n\n    const [lastInternalIdAdded, setLastInternalIdAdded] = React.useState<number | undefined>();\n    const [editDialogIndex, setEditDialogIndex] = React.useState<number | undefined>();\n    const [inferring, setInferring] = React.useState(false);\n\n    const inferredValuesRef = React.useRef(new Set());\n    const inferredValues = inferredValuesRef.current;\n\n    const buildEntry = (index: number, internalId: number) => {\n        const justAdded = lastInternalIdAdded === internalId;\n        const entryError = errors?.enumValues && errors?.enumValues[index];\n        return <EnumEntry index={index}\n                          disabled={disabled}\n                          enumValuesPath={enumValuesPath}\n                          autoFocus={justAdded}\n                          entryError={entryError}\n                          shouldUpdateId={shouldUpdateId || justAdded}\n                          onDialogOpen={() => setEditDialogIndex(index)}\n                          inferredEntry={inferredValues.has(values.enumValues[index]?.id as string)}\n                          key={`${internalId}`}/>;\n    };\n\n    const inferValues = async () => {\n        if (!getData)\n            return;\n        setInferring(true);\n        getData?.().then((data) => {\n            if (!data)\n                return;\n\n            const flatData = data.flat();\n\n            const fieldData = Array.from(new Set(flatData));\n\n            const currentEnumValues = values.enumValues;\n            const foundEnumValues = extractEnumFromValues(fieldData);\n\n            // add only new enum values\n            const newEnumValues = foundEnumValues.filter((enumValue) => {\n                return !currentEnumValues?.some((v: any) => v.id === enumValue.id);\n            });\n\n            newEnumValues.forEach((enumValue) => {\n                inferredValues.add(enumValue.id);\n            });\n            setFieldValue(enumValuesPath, [...newEnumValues, ...currentEnumValues], true);\n        }).catch(e => {\n            console.error(e);\n        })\n            .finally(() => setInferring(false));\n    }\n\n    return (\n        <div className={\"col-span-12\"}>\n            <div className=\"ml-3.5 flex flex-row items-center\">\n                <ListIcon/>\n                <Typography variant={\"subtitle2\"}\n                            className=\"ml-2 grow\">\n                    Values\n                </Typography>\n                {allowDataInference &&\n                    <Button loading={inferring}\n                            disabled={disabled || inferring}\n                            variant={\"text\"}\n                            size={\"small\"}\n                            onClick={inferValues}>\n                        {inferring ? <CircularProgress size={\"small\"}/> : <AutoAwesomeIcon/>}\n                        Infer values from data\n                    </Button>}\n            </div>\n\n            <Paper className=\"p-4 m-1\">\n\n                <ArrayContainer droppableId={enumValuesPath}\n                                addLabel={\"Add enum value\"}\n                                value={values.enumValues}\n                                disabled={disabled}\n                                size={\"small\"}\n                                buildEntry={buildEntry}\n                                onInternalIdAdded={setLastInternalIdAdded}\n                                includeAddButton={true}\n                                onValueChange={(value) => setFieldValue(enumValuesPath, value)}\n                                newDefaultEntry={{ id: \"\", label: \"\" }}/>\n\n                <EnumEntryDialog index={editDialogIndex}\n                                 open={editDialogIndex !== undefined}\n                                 enumValuesPath={enumValuesPath}\n                                 onClose={() => setEditDialogIndex(undefined)}/>\n            </Paper>\n        </div>\n    );\n}\n\ntype EnumEntryProps = {\n    index: number,\n    enumValuesPath: string,\n    shouldUpdateId: boolean,\n    autoFocus: boolean,\n    onDialogOpen: () => void;\n    disabled: boolean;\n    inferredEntry?: boolean;\n    entryError?: { label?: string, id?: string }\n};\n\nconst EnumEntry = React.memo(\n    function EnumEntryInternal({\n                                   index,\n                                   shouldUpdateId: updateId,\n                                   enumValuesPath,\n                                   autoFocus,\n                                   onDialogOpen,\n                                   disabled,\n                                   inferredEntry,\n                                   entryError\n                               }: EnumEntryProps) {\n\n        const {\n            values,\n            handleChange,\n            errors,\n            setFieldValue,\n            touched\n        } = useFormex<EnumValues>();\n\n        const shouldUpdateIdRef = React.useRef(!getIn(values, `${enumValuesPath}[${index}].id`));\n        const shouldUpdateId = updateId || shouldUpdateIdRef.current;\n\n        const idValue = getIn(values, `${enumValuesPath}[${index}].id`);\n        const labelValue = getIn(values, `${enumValuesPath}[${index}].label`);\n\n        const currentLabelRef = React.useRef(labelValue);\n\n        React.useEffect(() => {\n            if ((currentLabelRef.current === idValue || !idValue) && shouldUpdateId) {\n                setFieldValue(`${enumValuesPath}[${index}].id`, labelValue);\n            }\n            currentLabelRef.current = labelValue;\n        }, [labelValue]);\n\n        return (\n            <>\n                <div className={\"flex w-full align-center justify-center\"}>\n                    <Field name={`${enumValuesPath}[${index}].label`}\n                           as={DebouncedTextField}\n                           className={\"flex-grow\"}\n                           required\n                           disabled={disabled}\n                           size=\"small\"\n                           autoFocus={autoFocus}\n                           autoComplete=\"off\"\n                           endAdornment={inferredEntry && <AutoAwesomeIcon size={\"small\"}/>}\n                           error={Boolean(entryError?.label)}/>\n\n                    {!disabled &&\n                        <Badge color={\"error\"} invisible={!entryError?.id}>\n                            <IconButton\n                                size=\"small\"\n                                aria-label=\"edit\"\n                                className={\"m-1\"}\n                                onClick={() => onDialogOpen()}>\n                                <SettingsIcon size={\"small\"}/>\n                            </IconButton>\n                        </Badge>}\n\n                </div>\n\n                {entryError?.label && <Typography variant={\"caption\"}\n                                                  className={\"ml-3.5 text-red-500 dark:text-red-500\"}>\n                    {entryError?.label}\n                </Typography>}\n\n                {entryError?.id && <Typography variant={\"caption\"}\n                                               className={\"ml-3.5 text-red-500 dark:text-red-500\"}>\n                    {entryError?.id}\n                </Typography>}\n\n            </>);\n    },\n    function areEqual(prevProps: EnumEntryProps, nextProps: EnumEntryProps) {\n        return prevProps.index === nextProps.index &&\n            prevProps.enumValuesPath === nextProps.enumValuesPath &&\n            prevProps.shouldUpdateId === nextProps.shouldUpdateId &&\n            prevProps.inferredEntry === nextProps.inferredEntry &&\n            equal(prevProps.entryError, nextProps.entryError) &&\n            prevProps.autoFocus === nextProps.autoFocus;\n    }\n);\n\nfunction EnumEntryDialog({\n                             index,\n                             open,\n                             onClose,\n                             enumValuesPath\n                         }: {\n    index?: number;\n    open: boolean;\n    enumValuesPath: string;\n    onClose: () => void;\n}) {\n\n    const {\n        errors,\n    } = useFormex<EnumValues>();\n\n    const idError = index !== undefined ? getIn(errors, `${enumValuesPath}[${index}].id`) : undefined;\n    return <Dialog\n        maxWidth=\"md\"\n        aria-labelledby=\"enum-edit-dialog\"\n        open={open}\n        onOpenChange={(open) => !open ? onClose() : undefined}\n    >\n\n        <DialogContent>\n            {index !== undefined &&\n                <div>\n                    <Field name={`${enumValuesPath}[${index}].id`}\n                           as={DebouncedTextField}\n                           required\n                           label={\"ID\"}\n                           size=\"small\"\n                           autoComplete=\"off\"\n                           error={Boolean(idError)}/>\n\n                    <FieldCaption error={Boolean(idError)}>\n                        {idError ?? \"Value saved in the data source\"}\n                    </FieldCaption>\n                </div>}\n        </DialogContent>\n\n        <DialogActions>\n            <Button\n                autoFocus\n                variant=\"outlined\"\n                onClick={onClose}\n                color=\"primary\">\n                Ok\n            </Button>\n        </DialogActions>\n\n    </Dialog>\n}\n\n","import React from \"react\";\n\nimport { BooleanSwitchWithLabel, Tooltip } from \"@firecms/ui\";\nimport { FormexFieldProps } from \"@firecms/formex\";\n\nexport function SwitchControl({\n                                  field,\n                                  form,\n                                  label,\n                                  tooltip,\n                                  disabled,\n                                  size = \"small\",\n                                  allowIndeterminate\n                              }: FormexFieldProps & {\n    label: string,\n    tooltip?: string,\n    disabled?: boolean,\n    size?: \"small\" | \"medium\",\n    allowIndeterminate?: boolean\n}) {\n\n    const formControlLabel = <BooleanSwitchWithLabel\n        label={label}\n        size={size}\n        position={\"start\"}\n        value={field.value}\n        disabled={disabled}\n        allowIndeterminate={allowIndeterminate}\n        onValueChange={(checked:boolean | null) => form.setFieldValue(field.name, checked)}/>;\n\n    if (tooltip)\n        return (\n            <Tooltip\n                title={tooltip}>\n                {formControlLabel}\n            </Tooltip>\n        );\n    return formControlLabel;\n}\n","import React from \"react\";\n\nimport { Field, FormexFieldProps, getIn, useFormex } from \"@firecms/formex\";\nimport { DebouncedTextField } from \"@firecms/ui\";\nimport { SwitchControl } from \"../../SwitchControl\";\n\nexport function GeneralPropertyValidation({ disabled }: {\n    required?: boolean;\n    disabled: boolean;\n}) {\n\n    const { values, handleChange } = useFormex();\n\n    const validationRequired = \"validation.required\";\n    const validationRequiredMessage = \"validation.requiredMessage\";\n    const validationUnique = \"validation.unique\";\n    const validationUniqueInArray = \"validation.uniqueInArray\";\n\n    return (\n        <>\n            <div className={\"col-span-6\"}>\n                <Field name={validationRequired}\n                       type=\"checkbox\">\n                    {({ field, form }: FormexFieldProps) => {\n                        return <SwitchControl\n                            disabled={disabled}\n                            label={\"Required\"}\n                            tooltip={\"You won't be able to save this entity if this value is not set\"}\n                            form={form}\n                            field={field}/>\n                    }}\n                </Field>\n            </div>\n\n            <div className={\"col-span-6\"}>\n\n                <Field name={validationUnique}\n                       type=\"checkbox\">\n                    {({ field, form }: FormexFieldProps) => {\n                        return <SwitchControl\n                            disabled={disabled}\n                            label={\"Unique\"}\n                            tooltip={\"There cannot be multiple entities with the same value\"}\n                            form={form}\n                            field={field}/>\n                    }}\n                </Field>\n            </div>\n\n            {getIn(values, validationRequired) && <div className={\"col-span-12\"}>\n                <DebouncedTextField\n                    disabled={disabled}\n                    value={getIn(values, validationRequiredMessage)}\n                    label={\"Required message\"}\n                    name={validationRequiredMessage}\n                    size=\"small\"\n                    onChange={handleChange}/>\n            </div>}\n        </>\n    );\n}\n","import React from \"react\";\n\nimport { Field, FormexFieldProps, getIn, useFormex } from \"@firecms/formex\";\nimport { FieldCaption, serializeRegExp } from \"@firecms/core\";\nimport { DebouncedTextField, } from \"@firecms/ui\";\nimport { GeneralPropertyValidation } from \"./GeneralPropertyValidation\";\nimport { SwitchControl } from \"../../SwitchControl\";\n\nexport function StringPropertyValidation({\n                                             length,\n                                             lowercase,\n                                             matches,\n                                             max,\n                                             min,\n                                             trim,\n                                             uppercase,\n                                             disabled,\n                                             showErrors\n                                         }: {\n    length?: boolean;\n    min?: boolean;\n    max?: boolean;\n    trim?: boolean;\n    matches?: boolean;\n    lowercase?: boolean;\n    uppercase?: boolean;\n    disabled: boolean;\n    showErrors: boolean;\n}) {\n\n    const {\n        values,\n        handleChange,\n        errors\n    } = useFormex();\n\n    const validationLength = \"validation.length\";\n    const validationMin = \"validation.min\";\n    const validationMax = \"validation.max\";\n    const validationTrim = \"validation.trim\";\n    const validationMatches = \"validation.matches\";\n    const validationLowercase = \"validation.lowercase\";\n    const validationUppercase = \"validation.uppercase\";\n\n    const matchesError = getIn(errors, validationMatches);\n\n    const matchesValue = getIn(values, validationMatches);\n    const matchesStringValue = typeof matchesValue === \"string\" ? matchesValue : serializeRegExp(matchesValue);\n    return (\n        <div className={\"grid grid-cols-12 gap-2\"}>\n\n            <GeneralPropertyValidation disabled={disabled}/>\n\n            <div className={\"grid grid-cols-12 gap-2 col-span-12\"}>\n\n                {lowercase && <div className={\"col-span-4\"}>\n                    <Field name={validationLowercase}\n                           type=\"checkbox\">\n                        {({ field, form }: FormexFieldProps) => {\n                            return <SwitchControl\n                                label={\"Lowercase\"}\n                                disabled={disabled}\n                                form={form}\n                                field={field}/>\n                        }}\n                    </Field>\n                </div>}\n\n                {uppercase && <div className={\"col-span-4\"}>\n                    <Field name={validationUppercase}\n                           type=\"checkbox\">\n                        {({ field, form }: FormexFieldProps) => {\n                            return <SwitchControl\n                                label={\"Uppercase\"}\n                                disabled={disabled}\n                                form={form}\n                                field={field}/>\n                        }}\n                    </Field>\n                </div>}\n\n                {trim && <div className={\"col-span-4\"}>\n                    <Field name={validationTrim}\n                           type=\"checkbox\">\n                        {({ field, form }: FormexFieldProps) => {\n                            return <SwitchControl\n                                label={\"Trim\"}\n                                disabled={disabled}\n                                form={form}\n                                field={field}/>\n                        }}\n                    </Field>\n                </div>}\n\n            </div>\n\n            <div className={\"grid grid-cols-12 gap-2 col-span-12\"}>\n                {length && <div className={\"col-span-4\"}>\n                    <DebouncedTextField\n                        value={getIn(values, validationLength)}\n                        label={\"Exact length\"}\n                        name={validationLength}\n                        type=\"number\"\n                        size=\"small\"\n\n                        disabled={disabled}\n                        onChange={handleChange}/>\n                </div>}\n\n                {min && <div className={\"col-span-4\"}>\n                    <DebouncedTextField value={getIn(values, validationMin)}\n                                        label={\"Min length\"}\n                                        name={validationMin}\n                                        type=\"number\"\n                                        size=\"small\"\n\n                                        disabled={disabled}\n                                        onChange={handleChange}/>\n                </div>}\n\n                {max && <div className={\"col-span-4\"}>\n                    <DebouncedTextField value={getIn(values, validationMax)}\n                                        label={\"Max length\"}\n                                        name={validationMax}\n                                        type=\"number\"\n                                        size=\"small\"\n\n                                        disabled={disabled}\n                                        onChange={handleChange}/>\n                </div>}\n\n            </div>\n\n            {matches && <div className={\"col-span-12\"}>\n                <Field name={validationMatches}\n                       as={DebouncedTextField}\n                       label={\"Matches regex\"}\n                       size=\"small\"\n                       disabled={disabled}\n                       value={matchesStringValue}\n                       error={Boolean(matchesError)}/>\n                <FieldCaption error={Boolean(matchesError)}>\n                    {matchesError ? \"Not a valid regexp\" : \"e.g. /^\\\\d+$/ for digits only\"}\n                </FieldCaption>\n            </div>}\n\n        </div>\n    );\n\n}\n","import React from \"react\";\n\nimport { getIn, useFormex } from \"@firecms/formex\";\nimport { DebouncedTextField } from \"@firecms/ui\";\nimport { GeneralPropertyValidation } from \"./GeneralPropertyValidation\";\n\nexport function ArrayPropertyValidation({\n                                            max = true,\n                                            min = true,\n                                            disabled\n                                        }: {\n    min?: boolean;\n    max?: boolean;\n    disabled: boolean;\n}) {\n\n    const {\n        values,\n        handleChange\n    } = useFormex();\n\n    const validationMin = \"validation.min\";\n    const validationMax = \"validation.max\";\n\n    return (\n        <div className={\"grid grid-cols-12 gap-2\"}>\n\n            <GeneralPropertyValidation disabled={disabled}/>\n\n            {min && <div className={\"col-span-6\"}>\n                <DebouncedTextField value={getIn(values, validationMin)}\n                                    disabled={disabled}\n                                    label={\"Min length\"}\n                                    name={validationMin}\n                                    type=\"number\"\n                                    size=\"small\"\n                                    onChange={handleChange}/>\n            </div>}\n            {max && <div className={\"col-span-6\"}>\n                <DebouncedTextField value={getIn(values, validationMax)}\n                                    disabled={disabled}\n                                    label={\"Max length\"}\n                                    name={validationMax}\n                                    type=\"number\"\n                                    size=\"small\"\n                                    onChange={handleChange}/>\n            </div>}\n        </div>\n    );\n}\n","import { PropsWithChildren } from \"react\";\n\nimport { ExpandablePanel, RuleIcon, Typography } from \"@firecms/ui\";\n\nexport function ValidationPanel({\n                                    children\n                                }: PropsWithChildren<{}>) {\n\n    return (\n        <ExpandablePanel\n            initiallyExpanded={false}\n            asField={true}\n            className=\"p-4\"\n            title={\n                <div className=\"flex flex-row text-gray-500\">\n                    <RuleIcon/>\n                    <Typography variant={\"subtitle2\"}\n                                className=\"ml-2\">\n                        Validation\n                    </Typography>\n                </div>\n            }>\n\n            {children}\n\n        </ExpandablePanel>\n    )\n}\n","import React, { useMemo } from \"react\";\nimport { getIn, useFormex } from \"@firecms/formex\";\nimport { EnumValueConfig, resolveEnumValues, useSnackbarController } from \"@firecms/core\";\nimport { Select, SelectItem } from \"@firecms/ui\";\nimport { EnumForm } from \"../EnumForm\";\nimport { StringPropertyValidation } from \"./validation/StringPropertyValidation\";\nimport { ArrayPropertyValidation } from \"./validation/ArrayPropertyValidation\";\nimport { ValidationPanel } from \"./validation/ValidationPanel\";\nimport { PropertyWithId } from \"../PropertyEditView\";\n\nexport function EnumPropertyField({\n                                      multiselect,\n                                      updateIds,\n                                      disabled,\n                                      showErrors,\n                                      allowDataInference,\n                                      getData\n                                  }: {\n    multiselect: boolean;\n    updateIds: boolean;\n    disabled: boolean;\n    showErrors: boolean;\n    allowDataInference?: boolean;\n    getData?: () => Promise<object[]>;\n}) {\n\n    const {\n        values,\n        setFieldError,\n        setFieldValue\n    } = useFormex<PropertyWithId>();\n\n    const snackbarContext = useSnackbarController();\n\n    const enumValuesPath = multiselect ? \"of.enumValues\" : \"enumValues\";\n\n    const defaultValue = getIn(values, \"defaultValue\");\n\n    const valuesEnumValues = getIn(values, enumValuesPath);\n    const enumValues: EnumValueConfig[] = useMemo(() => {\n        if (!valuesEnumValues || typeof valuesEnumValues === \"boolean\")\n            return [] as EnumValueConfig[];\n        return resolveEnumValues(valuesEnumValues) ?? [] as EnumValueConfig[];\n    }, [valuesEnumValues]);\n\n    const onValuesChanged = (value: EnumValueConfig[]) => {\n        if (!values)\n            return;\n        setFieldValue(enumValuesPath, value);\n        if (!multiselect) {\n            const enumIds = value.filter(v => Boolean(v?.id)).map((v: any) => v.id);\n            if (defaultValue && !enumIds.includes(defaultValue)) {\n                setFieldValue(\"defaultValue\", undefined);\n                snackbarContext.open({\n                    type: \"warning\",\n                    message: \"Default value was cleared\"\n                })\n            }\n        }\n    };\n\n    return (\n        <>\n            <div className={\"col-span-12\"}>\n                <EnumForm enumValues={enumValues}\n                          updateIds={updateIds}\n                          disabled={disabled}\n                          allowDataInference={allowDataInference}\n                          onError={(hasError) => {\n                              setFieldError(enumValuesPath, hasError ? \"This enum property is missing some values\" : undefined);\n                          }}\n                          getData={getData\n                              ? () => getData()\n                                  .then(res => res.map(d => values.id && getIn(d, values.id)).filter(Boolean))\n                              : undefined}\n                          onValuesChanged={onValuesChanged}/>\n            </div>\n\n            <div className={\"col-span-12\"}>\n\n                <ValidationPanel>\n                    {!multiselect &&\n                        <StringPropertyValidation disabled={disabled}\n                                                  showErrors={showErrors}/>}\n                    {multiselect &&\n                        <ArrayPropertyValidation disabled={disabled}/>}\n                </ValidationPanel>\n\n            </div>\n\n            {!multiselect && <div className={\"col-span-12\"}>\n\n                <Select\n                    disabled={disabled}\n                    position={\"item-aligned\"}\n                    onValueChange={(value: string) => {\n                        setFieldValue(\"defaultValue\", value);\n                    }}\n                    label={\"Default value\"}\n                    value={defaultValue ?? \"\"}>\n                    {enumValues\n                        .filter((enumValue) => Boolean(enumValue?.id))\n                        .map((enumValue) => (\n                            <SelectItem key={enumValue.id}\n                                        value={enumValue.id?.toString()}>\n                                {enumValue.label}\n                            </SelectItem>\n                        ))}\n                </Select>\n\n            </div>}\n        </>\n    );\n}\n","import React from \"react\";\nimport {\n    Button,\n    Checkbox,\n    DebouncedTextField,\n    ExpandablePanel,\n    FileUploadIcon,\n    MultiSelect,\n    MultiSelectItem,\n    Typography\n} from \"@firecms/ui\";\n\nimport { Field, FormexFieldProps, getIn, useFormex } from \"@firecms/formex\";\nimport { GeneralPropertyValidation } from \"./validation/GeneralPropertyValidation\";\nimport { ArrayPropertyValidation } from \"./validation/ArrayPropertyValidation\";\nimport { ValidationPanel } from \"./validation/ValidationPanel\";\nimport { SwitchControl } from \"../SwitchControl\";\n\nconst fileTypes: Record<string, string> = {\n    \"image/*\": \"Images\",\n    \"video/*\": \"Videos\",\n    \"audio/*\": \"Audio files\",\n    \"application/*\": \"Files (pdf, zip, csv, excel...)\",\n    \"text/*\": \"Text files\"\n}\n\nexport function StoragePropertyField({\n                                         multiple,\n                                         existing,\n                                         disabled\n                                     }: {\n    multiple: boolean;\n    existing: boolean;\n    disabled: boolean;\n}) {\n\n    const {\n        values,\n        setFieldValue\n    } = useFormex();\n\n    const baseStoragePath = multiple ? \"of.storage\" : \"storage\";\n    const acceptedFiles = `${baseStoragePath}.acceptedFiles`;\n\n    const metadata = `${baseStoragePath}.metadata`;\n    const fileName = `${baseStoragePath}.fileName`;\n    const storagePath = `${baseStoragePath}.storagePath`;\n    const storeUrl = `${baseStoragePath}.storeUrl`;\n\n    const fileNameValue = getIn(values, fileName) ?? \"{rand}_{file}\";\n    const storagePathValue = getIn(values, storagePath) ?? \"/\";\n\n    const storedValue = getIn(values, acceptedFiles);\n    const fileTypesValue: string[] | undefined = Array.isArray(storedValue) ? storedValue : undefined;\n    const allFileTypesSelected = !fileTypesValue || fileTypesValue.length === 0;\n\n    const handleTypesChange = (value: string[]) => {\n        if (!value) setFieldValue(acceptedFiles, undefined);\n        else if (value.includes(\"all\")) setFieldValue(acceptedFiles, undefined);\n        else if (value.length >= Object.keys(fileTypes).length) setFieldValue(acceptedFiles, undefined);\n        else if (allFileTypesSelected)\n            setFieldValue(acceptedFiles, Object.keys(fileTypes).filter((v) => !value.includes(v)));\n        else setFieldValue(acceptedFiles, value);\n    };\n\n    const hasFilenameCallback = typeof fileNameValue === \"function\";\n    const hasStoragePathCallback = typeof storagePathValue === \"function\";\n\n    return (\n        <>\n\n            <div className={\"col-span-12\"}>\n\n                <ExpandablePanel\n                    title={\n                        <div className=\"flex flex-row text-gray-500\">\n                            <FileUploadIcon/>\n                            <Typography variant={\"subtitle2\"}\n                                        className=\"ml-2\">\n                                File upload config\n                            </Typography>\n                        </div>\n                    }>\n\n                    <div className={\"grid grid-cols-12 gap-2 p-4\"}>\n\n                        <div className={\"col-span-12\"}>\n\n                            <MultiSelect\n                                disabled={disabled}\n                                name={acceptedFiles}\n                                value={fileTypesValue ?? []}\n                                onMultiValueChange={handleTypesChange}\n                                label={allFileTypesSelected ? undefined : \"Allowed file types\"}\n                                renderValues={(selected) => {\n                                    if (!selected || selected.length === 0) return \"All file types allowed\";\n                                    return selected.map((v: string) => fileTypes[v])\n                                        .filter((v: string) => Boolean(v))\n                                        .join(\", \");\n                                }}>\n\n                                <MultiSelectItem key={\"all\"} value={\"all\"} className={\"flex items-center gap-2\"}>\n                                    <Checkbox\n                                        checked={!fileTypesValue}/>\n                                    All\n                                </MultiSelectItem>\n\n                                {Object.entries(fileTypes).map(([value, label]) => (\n                                    <MultiSelectItem key={value} value={value} className={\"flex items-center gap-2\"}>\n                                        <Checkbox\n                                            checked={allFileTypesSelected || fileTypesValue.indexOf(value) > -1}/>\n                                        <div className={\"flex-grow\"}>\n                                            {label}\n                                        </div>\n                                        <Button size={\"small\"}\n                                                variant={\"outlined\"}\n                                                onClick={(e) => {\n                                                    e.preventDefault();\n                                                    e.stopPropagation();\n                                                    return setFieldValue(acceptedFiles, [value]);\n                                                }}>\n                                            Only\n                                        </Button>\n                                    </MultiSelectItem>\n                                ))}\n\n                            </MultiSelect>\n                        </div>\n\n                        <div className={\"col-span-12\"}>\n                            <Field name={fileName}\n                                   as={DebouncedTextField}\n                                   label={\"File name\"}\n                                   size={\"small\"}\n                                   disabled={hasFilenameCallback || disabled}\n                                   value={hasFilenameCallback ? \"-\" : fileNameValue}\n                            />\n                        </div>\n                        <div className={\"col-span-12\"}>\n                            <Field name={storagePath}\n                                   as={DebouncedTextField}\n                                   label={\"Storage path\"}\n                                   disabled={hasStoragePathCallback || disabled}\n                                   size={\"small\"}\n                                   value={hasStoragePathCallback ? \"-\" : storagePathValue}\n                            />\n                            <Typography variant={\"caption\"} className={\"ml-3.5 mt-1 mb-2\"}>\n                                <p>You can use the following placeholders in\n                                    the file name\n                                    and storage path values:</p>\n                                <ul>\n                                    <li>{\"{file} - Full name of the uploaded file\"}</li>\n                                    <li>{\"{file.name} - Name of the uploaded file without extension\"}</li>\n                                    <li>{\"{file.ext} - Extension of the uploaded file\"}</li>\n                                    <li>{\"{entityId} - ID of the entity\"}</li>\n                                    <li>{\"{propertyKey} - ID of this field\"}</li>\n                                    <li>{\"{path} - Path of this entity\"}</li>\n                                    <li>{\"{rand} - Random value used to avoid name collisions\"}</li>\n                                </ul>\n                            </Typography>\n\n                            <Field name={storeUrl}\n                                   type=\"checkbox\">\n                                {({ field, form }: FormexFieldProps) => {\n                                    return <SwitchControl\n                                        label={\"Save URL instead of storage path\"}\n                                        disabled={existing || disabled}\n                                        form={form}\n                                        field={field}/>\n                                }}\n                            </Field>\n\n                            <Typography variant={\"caption\"} className={\"ml-3.5 mt-1 mb-2\"}>\n                                Turn this setting on, if you prefer to save\n                                the download\n                                URL of the uploaded file instead of the\n                                storage path.\n                                You can only change this prop upon creation.\n                            </Typography>\n                        </div>\n                    </div>\n                </ExpandablePanel>\n\n            </div>\n\n            <div className={\"col-span-12\"}>\n\n                <ValidationPanel>\n                    {!multiple && <div className={\"grid grid-cols-12 gap-2\"}>\n                        <GeneralPropertyValidation disabled={disabled}/>\n                    </div>}\n                    {multiple && <div className={\"col-span-12\"}>\n                        <ArrayPropertyValidation disabled={disabled}/>\n                    </div>}\n                </ValidationPanel>\n\n            </div>\n        </>\n    );\n}\n","import { isPropertyBuilder, Properties, PropertiesOrBuilders, Property, PropertyOrBuilder } from \"@firecms/core\";\n\nexport function editableProperty(property: PropertyOrBuilder | PropertyOrBuilder): boolean {\n    if (isPropertyBuilder(property))\n        return false;\n    if (isPropertyBuilder(property as PropertyOrBuilder))\n        return false;\n    else {\n        const eProperty = property as Property;\n        if (eProperty.dataType === \"array\" && typeof eProperty.of === \"function\")\n            return false;\n        else if (eProperty.dataType === \"array\" && Array.isArray(eProperty.of))\n            return false;\n        return Boolean(eProperty.editable);\n    }\n}\n\nexport function removeNonEditableProperties(properties: PropertiesOrBuilders<any>): Properties {\n    return Object.entries(properties)\n        .filter(([_, property]) => editableProperty(property))\n        .map(([key, propertyOrBuilder]) => {\n            const property = propertyOrBuilder as Property;\n            if (!editableProperty(property)) {\n                return undefined;\n            } else if (property.dataType === \"map\" && property.properties) {\n                return {\n                    [key]: {\n                        ...property,\n                        properties: removeNonEditableProperties(property.properties as PropertiesOrBuilders)\n                    }\n                };\n            } else {\n                return { [key]: property };\n            }\n        })\n        .filter((e) => Boolean(e))\n        .reduce((a, b) => ({ ...a, ...b }), {}) as Properties;\n}\n","import {\n    ErrorBoundary,\n    PropertyConfigBadge,\n    getFieldConfig,\n    isPropertyBuilder,\n    Property,\n    PropertyOrBuilder,\n    useCustomizationController,\n} from \"@firecms/core\";\nimport {\n    cardClickableMixin,\n    cardMixin,\n    cardSelectedMixin,\n    cn,\n    FunctionsIcon,\n    Paper,\n    RemoveCircleIcon,\n    Typography,\n} from \"@firecms/ui\";\n\nimport { editableProperty } from \"../../utils/entities\";\n\nexport function PropertyFieldPreview({\n                                         property,\n                                         onClick,\n                                         hasError,\n                                         includeName,\n                                         includeEditButton,\n                                         selected\n                                     }: {\n    property: Property,\n    hasError?: boolean,\n    selected?: boolean,\n    includeName?: boolean,\n    includeEditButton?: boolean;\n    onClick?: () => void\n}) {\n\n    const { propertyConfigs } = useCustomizationController();\n\n    const propertyConfig = getFieldConfig(property, propertyConfigs);\n    const disabled = !editableProperty(property);\n\n    const borderColorClass = hasError\n        ? \"border-red-500 dark:border-red-500 border-opacity-100 dark:border-opacity-100 ring-0 dark:ring-0\"\n        : (selected ? \"border-primary\" : \"border-transparent\");\n\n    if(hasError)\n    console.log(\"PropertyFieldPreview\", property)\n\n    return <ErrorBoundary>\n        <div\n            onClick={onClick}\n            className=\"flex flex-row w-full cursor-pointer\">\n            <div className={\"m-4\"}>\n                <PropertyConfigBadge propertyConfig={propertyConfig}/>\n            </div>\n            <Paper\n                className={cn(\n                    \"border\",\n                    \"pl-2 w-full flex flex-row gap-4 items-center\",\n                    cardMixin,\n                    onClick ? cardClickableMixin : \"\",\n                    selected ? cardSelectedMixin : \"\",\n                    \"flex-grow p-4 border transition-colors duration-200\",\n                    borderColorClass\n                )}\n            >\n\n                <div className=\"w-full flex flex-col\">\n\n                    {includeName &&\n                        <ErrorBoundary>\n                            <Typography variant=\"body1\"\n                                        component=\"span\"\n                                        className=\"flex-grow pr-2\">\n                                {property.name\n                                    ? property.name\n                                    : \"\\u00a0\"\n                                }\n                            </Typography>\n                        </ErrorBoundary>}\n\n                    <div className=\"flex flex-row items-center\">\n                        <ErrorBoundary>\n                            <Typography className=\"flex-grow pr-2\"\n                                        variant={includeName ? \"body2\" : \"subtitle1\"}\n                                        component=\"span\"\n                                        color=\"secondary\">\n                                {propertyConfig?.name}\n                            </Typography>\n                        </ErrorBoundary>\n                        <ErrorBoundary>\n                            <Typography variant=\"body2\"\n                                        component=\"span\"\n                                        color=\"disabled\">\n                                {property.dataType}\n                            </Typography>\n                        </ErrorBoundary>\n\n                    </div>\n                </div>\n\n                {includeEditButton && <Typography variant={\"button\"}>\n                    EDIT\n                </Typography>}\n\n            </Paper>\n        </div>\n    </ErrorBoundary>\n}\n\nexport function NonEditablePropertyPreview({\n                                               name,\n                                               selected,\n                                               onClick,\n                                               property\n                                           }: {\n    name: string,\n    selected: boolean,\n    onClick?: () => void,\n    property?: PropertyOrBuilder\n}) {\n\n    const { propertyConfigs } = useCustomizationController();\n\n    const propertyConfig = !isPropertyBuilder(property) && property ? getFieldConfig(property, propertyConfigs) : undefined;\n\n    return (\n        <div\n            onClick={onClick}\n            className=\"flex flex-row w-full cursor-pointer\">\n            <div className={\"relative m-4\"}>\n                {propertyConfig && <PropertyConfigBadge propertyConfig={propertyConfig}/>}\n                {!propertyConfig && <div\n                    className={\"h-8 w-8 p-1 rounded-full shadow text-white bg-gray-500\"}>\n                    <FunctionsIcon color={\"inherit\"} size={\"medium\"}/>\n                </div>}\n                <RemoveCircleIcon color={\"disabled\"} size={\"small\"} className={\"absolute -right-2 -top-2\"}/>\n            </div>\n            <Paper\n                className={cn(\n                    \"pl-2 w-full flex flex-row gap-4 items-center\",\n                    cardMixin,\n                    onClick ? cardClickableMixin : \"\",\n                    selected ? cardSelectedMixin : \"\",\n                    \"flex-grow p-4 border transition-colors duration-200\",\n                    selected ? \"border-primary\" : \"border-transparent\")}\n            >\n\n                <div className=\"w-full flex flex-col\">\n                    <Typography variant=\"body1\"\n                                component=\"span\"\n                                className=\"flex-grow pr-2\">\n                        {property?.name\n                            ? property.name\n                            : name\n                        }\n                    </Typography>\n\n                    <div className=\"flex flex-row items-center\">\n                        {propertyConfig && <Typography className=\"flex-grow pr-2\"\n                                                       variant={\"body2\"}\n                                                       component=\"span\"\n                                                       color=\"secondary\">\n                            {propertyConfig?.name}\n                        </Typography>}\n\n                        {property && !isPropertyBuilder(property) && <ErrorBoundary>\n                            <Typography variant=\"body2\"\n                                        component=\"span\"\n                                        color=\"disabled\">\n                                {property.dataType}\n                            </Typography>\n                        </ErrorBoundary>}\n\n                        {property && isPropertyBuilder(property) && <ErrorBoundary>\n                            <Typography variant=\"body2\"\n                                        component=\"span\"\n                                        color=\"disabled\">\n                                This property is defined as a property builder in code\n                            </Typography>\n                        </ErrorBoundary>}\n\n                        {!property && <ErrorBoundary>\n                            <Typography variant=\"body2\"\n                                        component=\"span\"\n                                        color=\"disabled\">\n                                This field is defined as an additional field in code\n                            </Typography>\n                        </ErrorBoundary>}\n\n                    </div>\n\n                    {/*<div className=\"flex flex-row text-xs\">*/}\n                    {/*    <Typography className=\"flex-grow pr-2\"*/}\n                    {/*                variant=\"body2\"*/}\n                    {/*                component=\"span\"*/}\n                    {/*                color=\"secondary\">*/}\n                    {/*        This field can only be edited in code*/}\n                    {/*    </Typography>*/}\n                    {/*</div>*/}\n                </div>\n\n            </Paper>\n        </div>)\n}\n","import React, { useCallback } from \"react\";\nimport equal from \"react-fast-compare\"\n\nimport {\n    AdditionalFieldDelegate,\n    CMSType,\n    ErrorBoundary,\n    isPropertyBuilder,\n    PropertiesOrBuilders,\n    PropertyOrBuilder\n} from \"@firecms/core\";\nimport { AutoAwesomeIcon, defaultBorderMixin, DragHandleIcon, IconButton, RemoveIcon, Tooltip } from \"@firecms/ui\";\nimport { NonEditablePropertyPreview, PropertyFieldPreview } from \"./PropertyFieldPreview\";\nimport { DragDropContext, Draggable, DraggableProvided, Droppable } from \"@hello-pangea/dnd\";\nimport { getFullId, getFullIdPath } from \"./util\";\nimport { editableProperty } from \"../../utils/entities\";\n\nexport const PropertyTree = React.memo(\n    function PropertyTree<M extends {\n        [Key: string]: CMSType\n    }>({\n           namespace,\n           selectedPropertyKey,\n           onPropertyClick,\n           properties,\n           propertiesOrder: propertiesOrderProp,\n           additionalFields,\n           errors,\n           onPropertyMove,\n           onPropertyRemove,\n           className,\n           inferredPropertyKeys,\n           collectionEditable\n       }: {\n        namespace?: string;\n        selectedPropertyKey?: string;\n        onPropertyClick?: (propertyKey: string, namespace?: string) => void;\n        properties: PropertiesOrBuilders<M>;\n        propertiesOrder?: string[];\n        additionalFields?: AdditionalFieldDelegate<M>[];\n        errors: Record<string, any>;\n        onPropertyMove?: (propertiesOrder: string[], namespace?: string) => void;\n        onPropertyRemove?: (propertyKey: string, namespace?: string) => void;\n        className?: string;\n        inferredPropertyKeys?: string[];\n        collectionEditable: boolean;\n    }) {\n\n        const propertiesOrder = propertiesOrderProp ?? Object.keys(properties);\n\n        const onDragEnd = useCallback((result: any) => {\n            // dropped outside the list\n            if (!result.destination) {\n                return;\n            }\n            const startIndex = result.source.index;\n            const endIndex = result.destination.index;\n\n            const newPropertiesOrder = Array.from(propertiesOrder);\n            const [removed] = newPropertiesOrder.splice(startIndex, 1);\n            newPropertiesOrder.splice(endIndex, 0, removed);\n            if (onPropertyMove)\n                onPropertyMove(newPropertiesOrder, namespace);\n        }, [namespace, onPropertyMove, propertiesOrder])\n\n        return (\n            <>\n\n                <DragDropContext onDragEnd={onDragEnd}>\n                    <Droppable droppableId={`droppable_${namespace}`}>\n                        {(droppableProvided, droppableSnapshot) => (\n                            <div\n                                {...droppableProvided.droppableProps}\n                                ref={droppableProvided.innerRef}\n                                className={className}>\n                                {propertiesOrder && propertiesOrder\n                                    .map((propertyKey: string, index: number) => {\n                                        const property = properties[propertyKey] as PropertyOrBuilder;\n                                        const additionalField = additionalFields?.find(field => field.key === propertyKey);\n\n                                        if (!property && !additionalField) {\n                                            console.warn(`Property ${propertyKey} not found in properties or additionalFields`);\n                                            return null;\n                                        }\n                                        return (\n                                            <Draggable\n                                                key={`array_field_${namespace}_${propertyKey}}`}\n                                                draggableId={`array_field_${namespace}_${propertyKey}}`}\n                                                index={index}>\n                                                {(provided, snapshot) => {\n                                                    return (\n                                                        <ErrorBoundary>\n                                                            <PropertyTreeEntry\n                                                                propertyKey={propertyKey as string}\n                                                                propertyOrBuilder={property}\n                                                                additionalField={additionalField}\n                                                                provided={provided}\n                                                                errors={errors}\n                                                                namespace={namespace}\n                                                                inferredPropertyKeys={inferredPropertyKeys}\n                                                                onPropertyMove={onPropertyMove}\n                                                                onPropertyRemove={onPropertyRemove}\n                                                                onPropertyClick={snapshot.isDragging ? undefined : onPropertyClick}\n                                                                selectedPropertyKey={selectedPropertyKey}\n                                                                collectionEditable={collectionEditable}\n                                                            />\n                                                        </ErrorBoundary>\n                                                    );\n                                                }}\n                                            </Draggable>);\n                                    }).filter(Boolean)}\n\n                                {droppableProvided.placeholder}\n\n                            </div>\n                        )}\n                    </Droppable>\n                </DragDropContext>\n\n            </>\n        );\n    },\n    (prevProps, nextProps) => {\n\n        const isSelected = nextProps.selectedPropertyKey?.startsWith(nextProps.namespace ?? \"\");\n        const wasSelected = prevProps.selectedPropertyKey?.startsWith(prevProps.namespace ?? \"\");\n        if (isSelected || wasSelected)\n            return false;\n\n        return equal(prevProps.properties, nextProps.properties) &&\n            prevProps.propertiesOrder === nextProps.propertiesOrder &&\n            equal(prevProps.additionalFields, nextProps.additionalFields) &&\n            equal(prevProps.errors, nextProps.errors) &&\n            equal(prevProps.onPropertyClick, nextProps.onPropertyClick) &&\n            // equal(prevProps.onPropertyMove, nextProps.onPropertyMove) &&\n            // equal(prevProps.onPropertyRemove, nextProps.onPropertyRemove) &&\n            prevProps.namespace === nextProps.namespace &&\n            prevProps.collectionEditable === nextProps.collectionEditable;\n    }\n);\n\nexport function PropertyTreeEntry({\n                                      propertyKey,\n                                      namespace,\n                                      propertyOrBuilder,\n                                      additionalField,\n                                      provided,\n                                      selectedPropertyKey,\n                                      errors,\n                                      onPropertyClick,\n                                      onPropertyMove,\n                                      onPropertyRemove,\n                                      inferredPropertyKeys,\n                                      collectionEditable\n                                  }: {\n    propertyKey: string;\n    namespace?: string;\n    propertyOrBuilder: PropertyOrBuilder;\n    additionalField?: AdditionalFieldDelegate<any>;\n    selectedPropertyKey?: string;\n    provided: DraggableProvided;\n    errors: Record<string, any>;\n    onPropertyClick?: (propertyKey: string, namespace?: string) => void;\n    onPropertyMove?: (propertiesOrder: string[], namespace?: string) => void;\n    onPropertyRemove?: (propertyKey: string, namespace?: string) => void;\n    inferredPropertyKeys?: string[];\n    collectionEditable: boolean;\n}) {\n\n    const isPropertyInferred = inferredPropertyKeys?.includes(namespace ? `${namespace}.${propertyKey}` : propertyKey);\n    const fullId = getFullId(propertyKey, namespace);\n    const fullIdPath = getFullIdPath(propertyKey, namespace);\n    const hasError = fullIdPath in errors;\n\n    let subtree;\n    if (typeof propertyOrBuilder === \"object\") {\n        const property = propertyOrBuilder;\n        if (property.dataType === \"map\" && property.properties) {\n            subtree = <PropertyTree\n                selectedPropertyKey={selectedPropertyKey}\n                namespace={fullId}\n                properties={property.properties}\n                propertiesOrder={property.propertiesOrder}\n                errors={errors}\n                onPropertyClick={onPropertyClick}\n                onPropertyMove={onPropertyMove}\n                onPropertyRemove={onPropertyRemove}\n                collectionEditable={collectionEditable}\n            />\n        }\n    }\n\n    // const hasError = fullId ? getIn(errors, idToPropertiesPath(fullId)) : false;\n    const selected = selectedPropertyKey === fullId;\n    const editable = propertyOrBuilder && ((collectionEditable && !isPropertyBuilder(propertyOrBuilder)) || editableProperty(propertyOrBuilder));\n\n    return (\n        <div\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n            {...provided.dragHandleProps}\n            className=\"relative -ml-8\"\n        >\n            {subtree && <div\n                className={\"absolute border-l \" + defaultBorderMixin}\n                style={{\n                    left: \"32px\",\n                    top: \"64px\",\n                    bottom: \"16px\"\n                }}/>}\n\n            {!isPropertyBuilder(propertyOrBuilder) && !additionalField && editable\n                ? <PropertyFieldPreview\n                    property={propertyOrBuilder}\n                    onClick={onPropertyClick ? () => onPropertyClick(propertyKey, namespace) : undefined}\n                    includeName={true}\n                    selected={selected}\n                    hasError={hasError}/>\n                : <NonEditablePropertyPreview name={propertyKey}\n                                              property={propertyOrBuilder}\n                                              onClick={onPropertyClick ? () => onPropertyClick(propertyKey, namespace) : undefined}\n                                              selected={selected}/>}\n\n            <div className=\"absolute top-2 right-2 flex flex-row \">\n\n                {isPropertyInferred && <Tooltip title={\"Inferred property\"}>\n                    <AutoAwesomeIcon size=\"small\" className={\"p-2\"}/>\n                </Tooltip>}\n\n                {onPropertyRemove && <Tooltip title={\"Remove\"}>\n                    <IconButton size=\"small\"\n                                color=\"inherit\"\n                                onClick={() => onPropertyRemove(propertyKey, namespace)}>\n                        <RemoveIcon size={\"small\"}/>\n                    </IconButton>\n                </Tooltip>}\n\n                {onPropertyMove && <Tooltip title={\"Move\"}>\n                    <IconButton\n                        component={\"span\"}\n                        size=\"small\"\n                    >\n                        <DragHandleIcon size={\"small\"}/>\n                    </IconButton>\n                </Tooltip>}\n            </div>\n\n            {subtree && <div className={\"ml-16\"}>{subtree}</div>}\n        </div>\n    );\n\n}\n","import React, { useCallback, useState } from \"react\";\nimport { FieldCaption, MapProperty, Property, PropertyConfig, } from \"@firecms/core\";\nimport { AddIcon, BooleanSwitchWithLabel, Button, Paper, Typography } from \"@firecms/ui\";\nimport { PropertyFormDialog } from \"../PropertyEditView\";\nimport { getIn, useFormex } from \"@firecms/formex\";\nimport { PropertyTree } from \"../PropertyTree\";\nimport { getFullId, idToPropertiesPath, namespaceToPropertiesOrderPath, namespaceToPropertiesPath } from \"../util\";\n\nexport function MapPropertyField({ disabled, getData, allowDataInference, propertyConfigs, collectionEditable }: {\n    disabled: boolean;\n    getData?: () => Promise<object[]>;\n    allowDataInference: boolean;\n    propertyConfigs: Record<string, PropertyConfig>,\n    collectionEditable: boolean;\n}) {\n\n    const {\n        values,\n        setFieldValue\n    } = useFormex<MapProperty>();\n\n    const [propertyDialogOpen, setPropertyDialogOpen] = useState<boolean>(false);\n    const [selectedPropertyKey, setSelectedPropertyKey] = useState<string | undefined>();\n    const [selectedPropertyNamespace, setSelectedPropertyNamespace] = useState<string | undefined>();\n\n    const propertiesOrder = values.propertiesOrder ?? Object.keys(values.properties ?? {});\n    const onPropertyCreated = ({\n                                   id,\n                                   property\n                               }: { id?: string, property: Property }) => {\n        if (!id)\n            throw Error();\n        setFieldValue(\"properties\", {\n            ...(values.properties ?? {}),\n            [id]: property\n        }, false);\n\n        const currentPropertiesOrder = values.propertiesOrder ?? Object.keys(values.properties ?? {});\n        const newPropertiesOrder = currentPropertiesOrder.includes(id) ? currentPropertiesOrder : [...currentPropertiesOrder, id];\n        setFieldValue(\"propertiesOrder\", newPropertiesOrder, false);\n\n        setPropertyDialogOpen(false);\n    };\n\n    const deleteProperty = useCallback((propertyKey?: string, namespace?: string) => {\n        const fullId = propertyKey ? getFullId(propertyKey, namespace) : undefined;\n        if (!fullId)\n            throw Error(\"collection editor miss config\");\n\n        const propertiesPath = idToPropertiesPath(fullId);\n        const propertiesOrderPath = namespaceToPropertiesOrderPath(namespace);\n\n        const currentPropertiesOrder: string[] = getIn(values, propertiesOrderPath) ?? Object.keys(getIn(values, namespaceToPropertiesPath(namespace)));\n\n        setFieldValue(propertiesPath, undefined, false);\n        setFieldValue(propertiesOrderPath, currentPropertiesOrder.filter((p) => p !== propertyKey), false);\n\n        setPropertyDialogOpen(false);\n        setSelectedPropertyKey(undefined);\n        setSelectedPropertyNamespace(undefined);\n    }, [setFieldValue, values]);\n\n    const selectedPropertyFullId = selectedPropertyKey ? getFullId(selectedPropertyKey, selectedPropertyNamespace) : undefined;\n    const selectedProperty = selectedPropertyFullId ? getIn(values.properties, selectedPropertyFullId.replaceAll(\".\", \".properties.\")) : undefined;\n\n    const empty = !propertiesOrder || propertiesOrder.length < 1;\n\n    const onPropertyMove = useCallback((propertiesOrder: string[], namespace?: string) => {\n        setFieldValue(namespaceToPropertiesOrderPath(namespace), propertiesOrder, false);\n    }, []);\n\n    return (\n        <>\n            <div className={\"col-span-12\"}>\n                <div className=\"flex justify-between items-end my-4\">\n                    <Typography variant={\"subtitle2\"}>Properties in this group</Typography>\n                    <Button\n                        color=\"primary\"\n                        variant={\"outlined\"}\n                        onClick={() => setPropertyDialogOpen(true)}\n                        startIcon={<AddIcon/>}\n                    >\n                        Add property to {values.name ?? \"this group\"}\n                    </Button>\n                </div>\n                <Paper className=\"p-2 pl-8\">\n                    <PropertyTree\n                        properties={values.properties ?? {}}\n                        propertiesOrder={propertiesOrder}\n                        errors={{}}\n                        collectionEditable={collectionEditable}\n                        onPropertyClick={(propertyKey, namespace) => {\n                            setSelectedPropertyKey(propertyKey);\n                            setSelectedPropertyNamespace(namespace);\n                            setPropertyDialogOpen(true);\n                        }}\n                        onPropertyMove={onPropertyMove}/>\n\n                    {empty &&\n                        <Typography variant={\"label\"}\n                                    className=\"h-full flex items-center justify-center p-4\">\n                            Add the first property to this group\n                        </Typography>}\n                </Paper>\n            </div>\n\n            <div className={\"col-span-12\"}>\n                <BooleanSwitchWithLabel\n                    position={\"start\"}\n                    size={\"small\"}\n                    label=\"Spread children as columns\"\n                    onValueChange={(v) => setFieldValue(\"spreadChildren\", v)}\n                    value={values.spreadChildren ?? false}\n                />\n                <FieldCaption>\n                    Set this flag to true if you want to display the children of this group as individual columns.\n                </FieldCaption>\n            </div>\n\n            <PropertyFormDialog\n                inArray={false}\n                forceShowErrors={false}\n                open={propertyDialogOpen}\n                allowDataInference={allowDataInference}\n                collectionEditable={collectionEditable}\n                onCancel={() => {\n                    setPropertyDialogOpen(false);\n                    setSelectedPropertyKey(undefined);\n                    setSelectedPropertyNamespace(undefined);\n                }}\n                onOkClicked={() => {\n                    setPropertyDialogOpen(false);\n                    setSelectedPropertyKey(undefined);\n                    setSelectedPropertyNamespace(undefined);\n                }}\n                getData={getData}\n                onDelete={deleteProperty}\n                propertyKey={selectedPropertyKey}\n                propertyNamespace={selectedPropertyNamespace}\n                property={selectedProperty}\n                existingProperty={Boolean(selectedPropertyKey)}\n                autoUpdateId={!selectedPropertyKey}\n                autoOpenTypeSelect={!selectedPropertyKey}\n                onPropertyChanged={onPropertyCreated}\n                existingPropertyKeys={selectedPropertyKey ? undefined : propertiesOrder}\n                propertyConfigs={propertyConfigs}\n            />\n\n        </>);\n}\n","import React, { useState } from \"react\";\nimport { ArrayProperty, getFieldConfig, Property, PropertyConfig } from \"@firecms/core\";\nimport { Button, Paper, Typography } from \"@firecms/ui\";\nimport { Field, getIn, useFormex } from \"@firecms/formex\";\nimport { PropertyFormDialog } from \"../PropertyEditView\";\nimport { PropertyFieldPreview } from \"../PropertyFieldPreview\";\nimport { ArrayPropertyValidation } from \"./validation/ArrayPropertyValidation\";\nimport { ValidationPanel } from \"./validation/ValidationPanel\";\n\nexport function RepeatPropertyField({\n                                        showErrors,\n                                        existing,\n                                        disabled,\n                                        getData,\n                                        allowDataInference,\n                                        propertyConfigs,\n                                        collectionEditable\n                                    }: {\n    showErrors: boolean,\n    existing: boolean,\n    disabled: boolean,\n    getData?: () => Promise<object[]>;\n    allowDataInference: boolean;\n    propertyConfigs: Record<string, PropertyConfig>,\n    collectionEditable: boolean;\n}) {\n\n    const {\n        values,\n        handleChange,\n        errors,\n        setFieldValue,\n        touched\n    } = useFormex<ArrayProperty>();\n\n    const [propertyDialogOpen, setPropertyDialogOpen] = useState(false);\n    const ofProperty = getIn(values, \"of\");\n    const ofPropertyError = getIn(touched, \"of\") && getIn(errors, \"of\");\n\n    const onPropertyChanged = ({ id, property, namespace }:\n                                   { id?: string, property: Property, namespace?: string }) => {\n        console.log(\"onPropertyChanged\", id, property, namespace);\n        setFieldValue(\"of\", property);\n    };\n\n    const widget = ofProperty && getFieldConfig(ofProperty, propertyConfigs);\n    return (\n        <>\n            <div className={\"col-span-12\"}>\n                <Typography variant={\"subtitle2\"}>\n                    Repeat component\n                </Typography>\n                <Field\n                    name={\"of\"}\n                    value={ofProperty}\n                    // validate={(property: Property) => {\n                    //     return property?.dataType ? undefined : \"You need to specify a repeat field\";\n                    // }}\n                >\n                    {({}) => (\n                        <Paper className=\"p-2 mt-4\">\n\n                            {ofProperty && <PropertyFieldPreview\n                                property={ofProperty}\n                                onClick={disabled ? undefined : () => setPropertyDialogOpen(true)}\n                                includeName={false}\n                                includeEditButton={true}\n                                selected={false}\n                                hasError={false}/>}\n\n                            {!disabled && !ofProperty && <Button variant={\"text\"}\n                                                                 size={\"large\"}\n                                                                 color={ofPropertyError ? \"error\" : \"primary\"}\n                                                                 onClick={() => setPropertyDialogOpen(true)}>\n                                Edit {`${widget ? widget.name : \"repeat component\"}`}\n                            </Button>}\n\n                            <PropertyFormDialog\n                                inArray={true}\n                                open={propertyDialogOpen}\n                                existingProperty={existing}\n                                getData={getData}\n                                autoUpdateId={!existing}\n                                autoOpenTypeSelect={!existing}\n                                onOkClicked={() => setPropertyDialogOpen(false)}\n                                allowDataInference={allowDataInference}\n                                property={ofProperty}\n                                includeIdAndName={false}\n                                onPropertyChanged={onPropertyChanged}\n                                forceShowErrors={showErrors}\n                                propertyConfigs={propertyConfigs}\n                                collectionEditable={collectionEditable}\n                            />\n                        </Paper>\n                    )}\n                </Field>\n\n            </div>\n\n            <div className={\"col-span-12\"}>\n\n                <ValidationPanel>\n                    <ArrayPropertyValidation disabled={disabled}/>\n                </ValidationPanel>\n\n            </div>\n        </>\n    );\n}\n","import { Field, getIn, useFormex } from \"@firecms/formex\";\nimport { DebouncedTextField } from \"@firecms/ui\";\nimport { PropertyWithId } from \"../PropertyEditView\";\nimport React from \"react\";\nimport { FieldCaption, toSnakeCase, unslugify } from \"@firecms/core\";\n\ntype CommonPropertyFieldsProps = {\n    showErrors: boolean,\n    disabledId: boolean,\n    disabled: boolean;\n    isNewProperty: boolean;\n    autoUpdateId: boolean;\n};\n\nexport const CommonPropertyFields = React.forwardRef<HTMLDivElement, CommonPropertyFieldsProps>(\n    function CommonPropertyFields({\n                                      showErrors,\n                                      disabledId,\n                                      disabled,\n                                      autoUpdateId,\n                                      isNewProperty\n                                  }, ref) {\n\n        const {\n            errors,\n            values,\n            setFieldValue,\n            setFieldTouched,\n            touched,\n            validate\n        } = useFormex<PropertyWithId>();\n\n        const name = \"name\";\n        const nameError = showErrors && getIn(errors, name);\n\n        const id = \"id\";\n        const idError = showErrors && getIn(errors, id);\n\n        const description = \"description\";\n        const descriptionError = showErrors && getIn(errors, description);\n\n        return (\n            <div className={\"flex flex-col gap-2 col-span-12\"}>\n\n                <div>\n                    <Field\n                        name={name}\n                        inputRef={ref}\n                        as={DebouncedTextField}\n                        value={values[name]}\n                        onChange={(e: any) => {\n                            const newNameValue = e.target.value;\n                            const idTouched = getIn(touched, id);\n                            if (!idTouched && autoUpdateId) {\n                                setFieldValue(id, newNameValue ? toSnakeCase(newNameValue) : \"\", false)\n                            }\n                            setFieldValue(name, newNameValue, true);\n                            setFieldTouched(name, true);\n                        }}\n                        style={{ fontSize: 20 }}\n                        placeholder={\"Field name\"}\n                        required\n                        disabled={disabled}\n                        error={Boolean(nameError)}/>\n\n                    <FieldCaption error={Boolean(nameError)}>\n                        {nameError}\n                    </FieldCaption>\n                </div>\n\n                <div>\n                    <Field\n                        name={id}\n                        as={DebouncedTextField}\n                        label={\"ID\"}\n                        value={values[id]}\n                        onChange={(e: any) => {\n                            const newIdValue = e.target.value;\n                            const nameTouched = getIn(touched, name);\n                            if (!nameTouched && autoUpdateId) {\n                                setFieldValue(name, newIdValue ? unslugify(newIdValue) : \"\")\n                            }\n                            setFieldValue(id, newIdValue, true);\n                            setFieldTouched(id, true);\n                        }}\n                        disabled={disabledId || disabled}\n                        required\n                        size=\"small\"\n                        error={Boolean(idError)}/>\n                    <FieldCaption error={Boolean(idError)}>\n                        {idError}\n                    </FieldCaption>\n                </div>\n\n                <div>\n                    <Field name={description}\n                           as={DebouncedTextField}\n                           label={\"Description\"}\n                           disabled={disabled}\n                           error={Boolean(descriptionError)}/>\n                    <FieldCaption error={Boolean(descriptionError)}>\n                        {descriptionError}\n                    </FieldCaption>\n                </div>\n\n            </div>\n        );\n\n    }\n);\n","import React from \"react\";\nimport { StringPropertyValidation } from \"./validation/StringPropertyValidation\";\nimport { ValidationPanel } from \"./validation/ValidationPanel\";\nimport { getIn, useFormex } from \"@firecms/formex\";\n\nimport { TextField } from \"@firecms/ui\";\n\nexport function StringPropertyField({\n                                        widgetId,\n                                        disabled,\n                                        showErrors\n                                    }: {\n    widgetId: \"text_field\" | \"multiline\" | \"markdown\" | \"email\";\n    disabled: boolean;\n    showErrors: boolean;\n}) {\n\n    const { values, setFieldValue } = useFormex();\n\n    return (\n        <>\n            <div className={\"col-span-12\"}>\n\n                <ValidationPanel>\n\n                    {widgetId === \"text_field\" &&\n                        <StringPropertyValidation disabled={disabled}\n                                                  length={true}\n                                                  lowercase={true}\n                                                  matches={true}\n                                                  max={true}\n                                                  min={true}\n                                                  trim={true}\n                                                  uppercase={true}\n                                                  showErrors={showErrors}/>}\n                    {widgetId === \"multiline\" &&\n                        <StringPropertyValidation disabled={disabled}\n                                                  length={true}\n                                                  lowercase={true}\n                                                  max={true}\n                                                  min={true}\n                                                  trim={true}\n                                                  uppercase={true}\n                                                  showErrors={showErrors}/>}\n                    {widgetId === \"markdown\" &&\n                        <StringPropertyValidation disabled={disabled}\n                                                  length={true}\n                                                  lowercase={true}\n                                                  max={true}\n                                                  min={true}\n                                                  trim={true}\n                                                  uppercase={true}\n                                                  showErrors={showErrors}/>}\n\n                    {widgetId === \"email\" &&\n                        <StringPropertyValidation disabled={disabled}\n                                                  max={true}\n                                                  min={true}\n                                                  trim={true}\n                                                  showErrors={showErrors}/>}\n\n                </ValidationPanel>\n\n            </div>\n\n            <div className={\"col-span-12\"}>\n\n                <TextField name={\"defaultValue\"}\n                           disabled={disabled}\n                           onChange={(e: any) => {\n                               setFieldValue(\"defaultValue\", e.target.value === \"\" ? undefined : e.target.value);\n                           }}\n                           label={\"Default value\"}\n                           value={getIn(values, \"defaultValue\") ?? \"\"}/>\n\n            </div>\n        </>\n    );\n}\n","import React from \"react\";\nimport { Field, FormexFieldProps, getIn, useFormex } from \"@firecms/formex\";\n\nimport { GeneralPropertyValidation } from \"./validation/GeneralPropertyValidation\";\nimport { ValidationPanel } from \"./validation/ValidationPanel\";\nimport { SwitchControl } from \"../SwitchControl\";\n\nexport function BooleanPropertyField({ disabled }: {\n    disabled: boolean;\n}) {\n    const { values } = useFormex();\n    const defaultValue = getIn(values, \"defaultValue\");\n\n    return (\n        <>\n            <div className={\"col-span-12\"}>\n\n                <ValidationPanel>\n                    <GeneralPropertyValidation disabled={disabled}/>\n                </ValidationPanel>\n\n            </div>\n\n            <div className={\"col-span-12\"}>\n\n                <Field\n                    name={\"defaultValue\"}>\n                    {({ field, form }: FormexFieldProps) => {\n                        return <SwitchControl\n                            label={defaultValue === null || defaultValue === undefined ? \"Default value not set\" : (\"Default value is \" + defaultValue.toString())}\n                            disabled={disabled}\n                            allowIndeterminate={true} field={field}\n                            form={form}/>\n                    }}\n                </Field>\n\n            </div>\n        </>\n    );\n}\n","import React, { useCallback, useState } from \"react\";\nimport { AddIcon, Button, Paper, Typography } from \"@firecms/ui\";\nimport { getIn, useFormex } from \"@firecms/formex\";\nimport { PropertyFormDialog } from \"../PropertyEditView\";\nimport { getFullId, idToPropertiesPath, namespaceToPropertiesOrderPath, namespaceToPropertiesPath } from \"../util\";\nimport { PropertyTree } from \"../PropertyTree\";\nimport { ArrayProperty, Property, PropertyConfig } from \"@firecms/core\";\n\nexport function BlockPropertyField({\n                                       disabled,\n                                       getData,\n                                       allowDataInference,\n                                       propertyConfigs,\n                                       collectionEditable\n                                   }: {\n    disabled: boolean;\n    getData?: () => Promise<object[]>;\n    allowDataInference: boolean;\n    propertyConfigs: Record<string, PropertyConfig>,\n    collectionEditable: boolean;\n}) {\n\n    const {\n        values,\n        setFieldValue\n    } = useFormex<ArrayProperty>();\n\n    const [propertyDialogOpen, setPropertyDialogOpen] = useState<boolean>(false);\n    const [selectedPropertyKey, setSelectedPropertyKey] = useState<string | undefined>();\n    const [selectedPropertyNamespace, setSelectedPropertyNamespace] = useState<string | undefined>();\n\n    const onPropertyChanged = ({\n                                   id,\n                                   property\n                               }: { id?: string, property: Property }) => {\n        if (!id)\n            throw Error();\n\n        setFieldValue(\"oneOf.properties\", {\n            ...(values.oneOf?.properties ?? {}),\n            [id]: property\n        }, false);\n        const currentPropertiesOrder = values.oneOf?.propertiesOrder ?? Object.keys(values.oneOf?.properties ?? {});\n        const newPropertiesOrder = currentPropertiesOrder.includes(id) ? currentPropertiesOrder : [...currentPropertiesOrder, id];\n        setFieldValue(\"oneOf.propertiesOrder\", newPropertiesOrder, false);\n        setPropertyDialogOpen(false);\n    };\n\n    const selectedPropertyFullId = selectedPropertyKey ? getFullId(selectedPropertyKey, selectedPropertyNamespace) : undefined;\n    const selectedProperty = selectedPropertyFullId ? getIn(values.oneOf?.properties, selectedPropertyFullId.replaceAll(\".\", \".properties.\")) : undefined;\n\n    const deleteProperty = useCallback((propertyKey?: string, namespace?: string) => {\n        const fullId = propertyKey ? getFullId(propertyKey, namespace) : undefined;\n        if (!fullId)\n            throw Error(\"collection editor miss config\");\n\n        setFieldValue(`oneOf.${idToPropertiesPath(fullId)}`, undefined, false);\n        const propertiesOrderPath = `oneOf.${namespaceToPropertiesOrderPath(namespace)}`;\n        const currentPropertiesOrder: string[] = getIn(values, propertiesOrderPath) ?? Object.keys(getIn(values, namespaceToPropertiesPath(namespace)));\n        setFieldValue(propertiesOrderPath, currentPropertiesOrder.filter((p) => p !== propertyKey), false);\n\n        setPropertyDialogOpen(false);\n        setSelectedPropertyKey(undefined);\n        setSelectedPropertyNamespace(undefined);\n    }, [setFieldValue, values]);\n\n    const addChildButton = <Button\n        autoFocus\n        color=\"primary\"\n\n        onClick={() => setPropertyDialogOpen(true)}\n        startIcon={<AddIcon/>}\n    >\n        Add property to {values.name ?? \"this block\"}\n    </Button>;\n\n    const onPropertyMove = useCallback((propertiesOrder: string[], namespace?: string) => {\n        setFieldValue(`oneOf.${namespaceToPropertiesOrderPath(namespace)}`, propertiesOrder, false);\n    }, []);\n\n    return (\n        <>\n            <div className={\"col-span-12\"}>\n                <div className={\"flex justify-between items-end mt-8 mb-4\"}>\n                    <Typography variant={\"subtitle2\"}>Properties in this\n                        block</Typography>\n                    {addChildButton}\n                </div>\n                <Paper className=\"p-2 pl-8\">\n\n                    <PropertyTree\n                        properties={values.oneOf?.properties ?? {}}\n                        propertiesOrder={values.oneOf?.propertiesOrder}\n                        errors={{}}\n                        collectionEditable={collectionEditable}\n                        onPropertyClick={disabled\n                            ? undefined\n                            : (propertyKey, namespace) => {\n                                setSelectedPropertyKey(propertyKey);\n                                setSelectedPropertyNamespace(namespace);\n                                setPropertyDialogOpen(true);\n                            }}\n                        onPropertyMove={disabled\n                            ? undefined\n                            : onPropertyMove}/>\n\n                    {!disabled && !values.oneOf?.propertiesOrder?.length &&\n                        <div className=\"h-full flex items-center justify-center p-4\">\n                            Add the first property to this block\n                        </div>}\n\n                </Paper>\n            </div>\n\n            {!disabled && <PropertyFormDialog\n                inArray={false}\n                forceShowErrors={false}\n                open={propertyDialogOpen}\n                getData={getData}\n                allowDataInference={allowDataInference}\n                onCancel={() => {\n                    setPropertyDialogOpen(false);\n                    setSelectedPropertyKey(undefined);\n                    setSelectedPropertyNamespace(undefined);\n                }}\n                onOkClicked={() => {\n                    setPropertyDialogOpen(false);\n                    setSelectedPropertyKey(undefined);\n                    setSelectedPropertyNamespace(undefined);\n                }}\n                collectionEditable={collectionEditable}\n                onDelete={deleteProperty}\n                propertyKey={selectedPropertyKey}\n                propertyNamespace={selectedPropertyNamespace}\n                property={selectedProperty}\n                existingProperty={Boolean(selectedPropertyKey)}\n                autoUpdateId={!selectedPropertyKey}\n                autoOpenTypeSelect={!selectedPropertyKey}\n                onPropertyChanged={onPropertyChanged}\n                existingPropertyKeys={selectedPropertyKey ? undefined : values.oneOf?.propertiesOrder}\n                propertyConfigs={propertyConfigs}/>}\n\n        </>);\n}\n","import React from \"react\";\n\nimport { Field, FormexFieldProps, getIn, useFormex } from \"@firecms/formex\";\nimport { DebouncedTextField } from \"@firecms/ui\";\nimport { GeneralPropertyValidation } from \"./GeneralPropertyValidation\";\nimport { SwitchControl } from \"../../SwitchControl\";\n\nexport function NumberPropertyValidation({ disabled }: {\n    disabled: boolean;\n}) {\n\n    const {\n        values,\n        handleChange\n    } = useFormex();\n\n    const validationMin = \"validation.min\";\n    const validationMax = \"validation.max\";\n    const validationLessThan = \"validation.lessThan\";\n    const validationMoreThan = \"validation.moreThan\";\n    const validationPositive = \"validation.positive\";\n    const validationNegative = \"validation.negative\";\n    const validationInteger = \"validation.integer\";\n\n    return (\n\n        <div className={\"grid grid-cols-12 gap-2\"}>\n            <GeneralPropertyValidation disabled={disabled}/>\n\n\n            <div className={\"col-span-6\"}>\n                <DebouncedTextField value={getIn(values, validationMin)}\n                                    label={\"Min value\"}\n                                    name={validationMin}\n                                    type=\"number\"\n                                    size=\"small\"\n                                    disabled={disabled}\n                                    onChange={handleChange}/>\n            </div>\n\n            <div className={\"col-span-6\"}>\n                <DebouncedTextField value={getIn(values, validationMax)}\n                                    label={\"Max value\"}\n                                    name={validationMax}\n                                    type=\"number\"\n                                    size=\"small\"\n\n                                    disabled={disabled}\n                                    onChange={handleChange}/>\n            </div>\n\n\n            <div className={\"col-span-6\"}>\n                <DebouncedTextField\n                    value={getIn(values, validationLessThan)}\n                    label={\"Less than\"}\n                    name={validationLessThan}\n                    type=\"number\"\n                    size=\"small\"\n\n                    disabled={disabled}\n                    onChange={handleChange}/>\n            </div>\n\n            <div className={\"col-span-6\"}>\n                <DebouncedTextField\n                    value={getIn(values, validationMoreThan)}\n                    label={\"More than\"}\n                    name={validationMoreThan}\n                    type=\"number\"\n                    size=\"small\"\n\n                    disabled={disabled}\n                    onChange={handleChange}/>\n            </div>\n\n            <div className={\"col-span-4\"}>\n                <Field name={validationPositive}\n                       type=\"checkbox\">\n                    {({ field, form }: FormexFieldProps) => {\n                        return <SwitchControl\n                            label={\"Positive value\"}\n                            disabled={disabled}\n                            form={form}\n                            field={field}/>\n                    }}\n                </Field>\n            </div>\n            <div className={\"col-span-4\"}>\n                <Field name={validationNegative}\n                       type=\"checkbox\">\n                    {({ field, form }: FormexFieldProps) => {\n                        return <SwitchControl\n                            label={\"Negative value\"}\n                            disabled={disabled}\n                            form={form}\n                            field={field}/>\n                    }}\n                </Field>\n            </div>\n            <div className={\"col-span-4\"}>\n                <Field name={validationInteger}\n                       type=\"checkbox\">\n                    {({ field, form }: FormexFieldProps) => {\n                        return <SwitchControl\n                            label={\"Integer value\"}\n                            disabled={disabled}\n                            form={form}\n                            field={field}/>\n                    }}\n                </Field>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { NumberPropertyValidation } from \"./validation/NumberPropertyValidation\";\nimport { ValidationPanel } from \"./validation/ValidationPanel\";\nimport { TextField } from \"@firecms/ui\";\nimport { getIn, useFormex } from \"@firecms/formex\";\n\nexport function NumberPropertyField({ disabled }: {\n    disabled: boolean;\n}) {\n\n    const { values, setFieldValue } = useFormex();\n\n    return (\n        <>\n\n            <div className={\"col-span-12\"}>\n\n                <ValidationPanel>\n                    <NumberPropertyValidation disabled={disabled}/>\n                </ValidationPanel>\n\n            </div>\n\n            <div className={\"col-span-12\"}>\n\n                <TextField name={\"defaultValue\"}\n                           disabled={disabled}\n                           type={\"number\"}\n                           onChange={(e: any) => {\n                               setFieldValue(\"defaultValue\", e.target.value === \"\" ? undefined : parseFloat(e.target.value));\n                           }}\n                           label={\"Default value\"}\n                           value={getIn(values, \"defaultValue\") ?? \"\"}/>\n\n            </div>\n        </>\n    );\n}\n","import React from \"react\";\nimport { Field, getIn, useFormex } from \"@firecms/formex\";\nimport { FieldCaption, IconForView, NumberProperty, StringProperty, useNavigationController } from \"@firecms/core\";\nimport { CircularProgress, Select, SelectGroup, SelectItem, Typography, } from \"@firecms/ui\";\n\nexport function ReferencePropertyField({\n                                           existing,\n                                           multiple,\n                                           disabled,\n                                           showErrors\n                                       }: {\n    existing: boolean,\n    multiple: boolean,\n    disabled: boolean,\n    showErrors: boolean\n}) {\n\n    const {\n        values,\n        handleChange,\n        errors,\n    } = useFormex<StringProperty | NumberProperty>();\n\n    const navigation = useNavigationController();\n\n    if (!navigation)\n        return <div className={\"col-span-12\"}>\n            <CircularProgress/>\n        </div>;\n\n    const pathPath = multiple ? \"of.path\" : \"path\";\n    const pathValue: string | undefined = getIn(values, pathPath);\n    const pathError: string | undefined = showErrors && getIn(errors, pathPath);\n\n    return (\n        <>\n            <div className={\"col-span-12\"}>\n\n                <Field name={pathPath}\n                       pathPath={pathPath}\n                       type=\"select\"\n                       disabled={(existing && Boolean(pathValue)) || disabled}\n                       value={pathValue}\n                       error={pathError}\n                       handleChange={handleChange}\n                       as={CollectionsSelect}/>\n\n            </div>\n\n        </>\n    );\n}\n\nexport function CollectionsSelect({\n                                      disabled,\n                                      pathPath,\n                                      value,\n                                      handleChange,\n                                      error,\n                                      ...props\n                                  }: {\n    disabled: boolean,\n    pathPath: string,\n    value?: string,\n    handleChange: (event: any) => void,\n    error?: string\n}) {\n\n    const navigation = useNavigationController();\n\n    if (!navigation)\n        return <div className={\"col-span-12\"}>\n            <CircularProgress/>\n        </div>;\n\n    const collections = navigation?.collections ?? [];\n\n    const groups: string[] = Array.from(new Set(\n        Object.values(collections).map(e => e.group).filter(Boolean) as string[]\n    ).values());\n\n    const ungroupedCollections = collections.filter((col) => !col.group);\n\n    return (\n        <>\n            <Select\n                error={Boolean(error)}\n                disabled={disabled}\n                value={value ?? \"\"}\n                position={\"item-aligned\"}\n                name={pathPath}\n                onChange={handleChange}\n                label={\"Target collection\"}\n                renderValue={(selected) => {\n                    const selectedCollection = collections.find(collection => collection.id === selected || collection.path === selected);\n                    if (!selectedCollection) return null;\n                    return (\n                        <div className=\"flex flex-row\">\n                            <IconForView collectionOrView={selectedCollection}/>\n                            <Typography\n                                variant={\"subtitle2\"}\n                                className=\"font-medium ml-4\">\n                                {selectedCollection?.name.toUpperCase()}\n                            </Typography>\n                        </div>)\n                }}\n                {...props}>\n\n                {groups.flatMap((group) => (\n                    <SelectGroup label={group || \"Views\"}\n                                 key={`group_${group}`}>\n                        {\n                            collections.filter(collection => collection.group === group)\n                                .map((collection) => {\n                                    return <SelectItem\n                                        key={`${collection.id ?? collection.path}-${group}`}\n                                        value={collection.id ?? collection.path}>\n                                        <div className=\"flex flex-row\">\n                                            <IconForView collectionOrView={collection}/>\n                                            <Typography\n                                                variant={\"subtitle2\"}\n                                                className=\"font-medium ml-4\">\n                                                {collection?.name.toUpperCase()}\n                                            </Typography>\n                                        </div>\n                                    </SelectItem>;\n                                })\n\n                        }\n                    </SelectGroup>\n                ))}\n\n                {ungroupedCollections && <SelectGroup label={\"Views\"}>\n                    {ungroupedCollections\n                        .map((collection) => {\n                            return <SelectItem key={collection.id ?? collection.path}\n                                               value={collection.id ?? collection.path}>\n                                <div className=\"flex flex-row\">\n                                    <IconForView collectionOrView={collection}/>\n                                    <Typography\n                                        variant={\"subtitle2\"}\n                                        className=\"font-medium ml-4\">\n                                        {collection?.name.toUpperCase()}\n                                    </Typography>\n                                </div>\n                            </SelectItem>;\n                        })\n\n                    }\n                </SelectGroup>}\n\n            </Select>\n\n            <FieldCaption>\n                You can only edit the reference collection upon field\n                creation.\n            </FieldCaption>\n        </>\n    );\n}\n","import React from \"react\";\nimport { getIn, useFormex } from \"@firecms/formex\";\nimport { FieldCaption, NumberProperty, StringProperty } from \"@firecms/core\";\nimport { Select, SelectItem } from \"@firecms/ui\";\nimport { GeneralPropertyValidation } from \"./validation/GeneralPropertyValidation\";\nimport { ValidationPanel } from \"./validation/ValidationPanel\";\n\nexport function DateTimePropertyField({ disabled }: {\n    disabled: boolean;\n}) {\n\n    const {\n        values,\n        errors,\n        touched,\n        setFieldValue\n    } = useFormex<StringProperty | NumberProperty>();\n\n    const modePath = \"mode\";\n    const modeValue: string | undefined = getIn(values, modePath);\n    const modeError: string | undefined = getIn(touched, modePath) && getIn(errors, modePath);\n\n    const autoValuePath = \"autoValue\";\n    const autoValueValue: string | undefined = getIn(values, autoValuePath);\n    const autoValueError: string | undefined = getIn(touched, autoValuePath) && getIn(errors, autoValuePath);\n\n    return (\n        <>\n            <div className={\"flex flex-col col-span-12\"}>\n                <Select name={modePath}\n                        value={modeValue ?? \"date\"}\n                        error={Boolean(modeError)}\n                        onValueChange={(v) => setFieldValue(modePath, v)}\n                        label={\"Mode\"}\n                        renderValue={(v) => {\n                            switch (v) {\n                                case \"date_time\":\n                                    return \"Date/Time\";\n                                case \"date\":\n                                    return \"Date\";\n                                default:\n                                    return \"\";\n                            }\n                        }}\n                        disabled={disabled}>\n                    <SelectItem value={\"date_time\"}> Date/Time </SelectItem>\n                    <SelectItem value={\"date\"}> Date </SelectItem>\n                </Select>\n                <FieldCaption error={Boolean(modeError)}>\n                    {modeError}\n                </FieldCaption>\n\n                <Select name={autoValuePath}\n                        disabled={disabled}\n                        value={autoValueValue ?? \"\"}\n                        onValueChange={(v) => setFieldValue(autoValuePath, v === \"none\" ? null : v)}\n                        renderValue={(v) => {\n                            switch (v) {\n                                case \"on_create\":\n                                    return \"On create\";\n                                case \"on_update\":\n                                    return \"On any update\";\n                                default:\n                                    return \"None\";\n                            }\n                        }}\n                        error={Boolean(autoValueError)}\n                        label={\"Automatic value\"}>\n                    <SelectItem value={\"none\"}> None </SelectItem>\n                    <SelectItem value={\"on_create\"}> On create </SelectItem>\n                    <SelectItem value={\"on_update\"}> On any update </SelectItem>\n                </Select>\n                <FieldCaption error={Boolean(autoValueError)}>\n                    {autoValueError ?? \"Update this field automatically when creating or updating the entity\"}\n                </FieldCaption>\n\n            </div>\n\n            <div className={\"col-span-12\"}>\n                <ValidationPanel>\n                    <GeneralPropertyValidation disabled={disabled}/>\n                </ValidationPanel>\n            </div>\n        </>\n    );\n}\n","import React from \"react\";\n\nimport { Field, FormexFieldProps } from \"@firecms/formex\";\nimport { SwitchControl } from \"../../SwitchControl\";\n\nexport function AdvancedPropertyValidation({ disabled }: {\n    disabled: boolean\n}) {\n\n    const columnWidth = \"columnWidth\";\n    const hideFromCollection = \"hideFromCollection\";\n    const readOnly = \"readOnly\";\n\n    return (\n\n        <div className={\"grid grid-cols-12 gap-2\"}>\n            <div className={\"col-span-12\"}>\n                <Field type=\"checkbox\" name={hideFromCollection}>\n                    {({ field, form }: FormexFieldProps) => {\n                        return <SwitchControl\n                            label={\"Hide from collection\"}\n                            disabled={disabled}\n                            form={form}\n                            tooltip={\"Hide this field from the collection view. It will still be visible in the form view\"}\n                            field={field}/>\n                    }}\n                </Field>\n            </div>\n\n            <div className={\"col-span-12\"}>\n                <Field name={readOnly}\n                       type=\"checkbox\">\n                    {({ field, form }: FormexFieldProps) => {\n                        return <SwitchControl\n                            label={\"Read only\"}\n                            disabled={disabled}\n                            tooltip={\"Is this a read only field. Display only as a preview\"}\n                            form={form}\n                            field={field}/>\n                    }}\n                </Field>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { ValidationPanel } from \"./validation/ValidationPanel\";\nimport { GeneralPropertyValidation } from \"./validation/GeneralPropertyValidation\";\n\nexport function KeyValuePropertyField({ disabled }: {\n    disabled: boolean;\n}) {\n\n    return (\n        <>\n            <div className={\"col-span-12\"}>\n\n                <ValidationPanel>\n                    <GeneralPropertyValidation disabled={disabled}/>\n                </ValidationPanel>\n\n            </div>\n        </>\n    );\n}\n","import {\n    ArrayProperty,\n    BooleanProperty,\n    DateProperty,\n    MapProperty,\n    mergeDeep,\n    NumberProperty,\n    Property,\n    PropertyConfig,\n    StringProperty\n} from \"@firecms/core\";\n\nexport function updatePropertyFromWidget(propertyData: any,\n                                         selectedWidgetId: string | undefined,\n                                         propertyConfigs: Record<string, PropertyConfig>): Property {\n\n    let updatedProperty;\n    if (selectedWidgetId === \"text_field\") {\n        updatedProperty = mergeDeep(\n            propertyData,\n            {\n                dataType: \"string\",\n                propertyConfig: \"text_field\",\n                editable: propertyData.editable !== undefined ? propertyData.editable : true,\n                storage: undefined,\n                multiline: undefined,\n                markdown: undefined,\n                email: undefined,\n                url: undefined,\n                enumValues: undefined\n            } satisfies StringProperty\n        );\n    } else if (selectedWidgetId === \"multiline\") {\n        updatedProperty = mergeDeep(\n            propertyData,\n            {\n                dataType: \"string\",\n                propertyConfig: \"multiline\",\n                editable: propertyData.editable !== undefined ? propertyData.editable : true,\n                multiline: true,\n                storage: undefined,\n                markdown: undefined,\n                email: undefined,\n                url: undefined,\n                enumValues: undefined\n            } satisfies StringProperty\n        );\n    } else if (selectedWidgetId === \"markdown\") {\n        updatedProperty = mergeDeep(\n            propertyData,\n            {\n                dataType: \"string\",\n                propertyConfig: \"markdown\",\n                editable: propertyData.editable !== undefined ? propertyData.editable : true,\n                storage: undefined,\n                multiline: undefined,\n                markdown: true,\n                email: undefined,\n                url: undefined\n            } satisfies StringProperty\n        );\n    } else if (selectedWidgetId === \"url\") {\n        updatedProperty = mergeDeep(\n            propertyData,\n            {\n                dataType: \"string\",\n                propertyConfig: \"url\",\n                editable: propertyData.editable !== undefined ? propertyData.editable : true,\n                storage: undefined,\n                multiline: undefined,\n                markdown: undefined,\n                email: undefined,\n                url: true,\n                enumValues: undefined\n            } satisfies StringProperty\n        );\n    } else if (selectedWidgetId === \"email\") {\n        updatedProperty = mergeDeep(\n            propertyData,\n            {\n                dataType: \"string\",\n                propertyConfig: \"email\",\n                editable: propertyData.editable !== undefined ? propertyData.editable : true,\n                storage: undefined,\n                multiline: undefined,\n                markdown: undefined,\n                email: true,\n                url: undefined,\n                enumValues: undefined\n            } satisfies StringProperty\n        );\n    } else if (selectedWidgetId === \"select\") {\n        updatedProperty = mergeDeep(\n            propertyData,\n            {\n                dataType: \"string\",\n                propertyConfig: \"select\",\n                editable: propertyData.editable !== undefined ? propertyData.editable : true,\n                storage: undefined,\n                multiline: undefined,\n                markdown: undefined,\n                email: undefined,\n                url: undefined,\n                enumValues: propertyData.enumValues ?? []\n            } satisfies StringProperty\n        );\n    } else if (selectedWidgetId === \"multi_select\") {\n        updatedProperty = mergeDeep(\n            propertyData,\n            {\n                dataType: \"array\",\n                propertyConfig: \"multi_select\",\n                editable: propertyData.editable !== undefined ? propertyData.editable : true,\n                of: {\n                    dataType: \"string\",\n                    enumValues: propertyData.of?.enumValues ?? []\n                }\n            } satisfies ArrayProperty\n        );\n    } else if (selectedWidgetId === \"number_input\") {\n        updatedProperty = mergeDeep(\n            propertyData,\n            {\n                dataType: \"number\",\n                propertyConfig: \"number_input\",\n                editable: propertyData.editable !== undefined ? propertyData.editable : true,\n                enumValues: undefined\n            } satisfies NumberProperty\n        );\n    } else if (selectedWidgetId === \"number_select\") {\n        updatedProperty = mergeDeep(\n            propertyData,\n            {\n                dataType: \"number\",\n                propertyConfig: \"number_select\",\n                editable: propertyData.editable !== undefined ? propertyData.editable : true,\n                enumValues: propertyData.enumValues ?? []\n            } satisfies NumberProperty\n        );\n    } else if (selectedWidgetId === \"multi_number_select\") {\n        updatedProperty = mergeDeep(\n            propertyData,\n            {\n                dataType: \"array\",\n                propertyConfig: \"multi_number_select\",\n                editable: propertyData.editable !== undefined ? propertyData.editable : true,\n                of: {\n                    dataType: \"number\",\n                    enumValues: propertyData.of?.enumValues ?? []\n                }\n            } satisfies ArrayProperty\n        );\n    } else if (selectedWidgetId === \"file_upload\") {\n        updatedProperty = mergeDeep(\n            propertyData,\n            {\n                dataType: \"string\",\n                propertyConfig: \"file_upload\",\n                editable: propertyData.editable !== undefined ? propertyData.editable : true,\n                storage: {\n                    storagePath: \"/\"\n                }\n            } satisfies StringProperty\n        );\n    } else if (selectedWidgetId === \"multi_file_upload\") {\n        updatedProperty = mergeDeep(\n            propertyData,\n            {\n                dataType: \"array\",\n                propertyConfig: \"multi_file_upload\",\n                editable: propertyData.editable !== undefined ? propertyData.editable : true,\n                of: {\n                    dataType: \"string\",\n                    storage: propertyData.of?.storage ?? {\n                        storagePath: \"/\"\n                    }\n                }\n            } satisfies ArrayProperty\n        );\n    } else if (selectedWidgetId === \"group\") {\n        updatedProperty = mergeDeep(\n            propertyData,\n            {\n                dataType: \"map\",\n                propertyConfig: \"group\",\n                editable: propertyData.editable !== undefined ? propertyData.editable : true,\n                keyValue: false,\n                properties: propertyData.properties ?? {}\n            } satisfies MapProperty\n        );\n    } else if (selectedWidgetId === \"key_value\") {\n        updatedProperty = mergeDeep(\n            propertyData,\n            {\n                dataType: \"map\",\n                propertyConfig: \"key_value\",\n                editable: propertyData.editable !== undefined ? propertyData.editable : true,\n                keyValue: true,\n                properties: undefined\n            } satisfies MapProperty\n        );\n    } else if (selectedWidgetId === \"reference\") {\n        updatedProperty = mergeDeep(\n            propertyData,\n            {\n                dataType: \"reference\",\n                propertyConfig: \"reference\",\n                editable: propertyData.editable !== undefined ? propertyData.editable : true\n            } satisfies Property\n        );\n    } else if (selectedWidgetId === \"multi_references\") {\n        updatedProperty = mergeDeep(\n            propertyData,\n            {\n                dataType: \"array\",\n                propertyConfig: \"multi_references\",\n                editable: propertyData.editable !== undefined ? propertyData.editable : true,\n                of: {\n                    dataType: \"reference\"\n                }\n            } satisfies ArrayProperty\n        );\n    } else if (selectedWidgetId === \"switch\") {\n        updatedProperty = mergeDeep(\n            propertyData,\n            {\n                dataType: \"boolean\",\n                propertyConfig: \"switch\",\n                editable: propertyData.editable !== undefined ? propertyData.editable : true\n            } satisfies BooleanProperty\n        );\n    } else if (selectedWidgetId === \"date_time\") {\n        updatedProperty = mergeDeep(\n            propertyData,\n            {\n                dataType: \"date\",\n                propertyConfig: \"date_time\",\n                editable: propertyData.editable !== undefined ? propertyData.editable : true,\n                mode: \"date_time\"\n            } satisfies DateProperty\n        );\n    } else if (selectedWidgetId === \"repeat\") {\n        updatedProperty = mergeDeep(\n            propertyData,\n            {\n                dataType: \"array\",\n                propertyConfig: \"repeat\",\n                editable: propertyData.editable !== undefined ? propertyData.editable : true\n            } satisfies ArrayProperty\n        );\n    } else if (selectedWidgetId === \"block\") {\n        updatedProperty = mergeDeep(\n            propertyData,\n            {\n                dataType: \"array\",\n                propertyConfig: \"block\",\n                editable: propertyData.editable !== undefined ? propertyData.editable : true,\n                oneOf: {\n                    properties: {}\n                }\n            } satisfies ArrayProperty\n        );\n    } else if (selectedWidgetId && propertyConfigs[selectedWidgetId]) {\n        updatedProperty = {\n            ...propertyConfigs[selectedWidgetId].property,\n            propertyConfig: selectedWidgetId\n        };\n    }\n\n    return updatedProperty;\n}\n","import { PropertyConfigBadge, PropertyConfig } from \"@firecms/core\";\nimport { cn, SelectItem, Typography } from \"@firecms/ui\";\n\nexport interface PropertySelectItemProps {\n    value: string;\n    optionDisabled: boolean;\n    propertyConfig: PropertyConfig;\n    existing: boolean;\n}\n\nexport function PropertySelectItem({ value, optionDisabled, propertyConfig, existing }: PropertySelectItemProps) {\n    return <SelectItem value={value}\n                       disabled={optionDisabled}\n                       className={\"flex flex-row items-center\"}>\n        <div\n            className={cn(\n                \"flex flex-row items-center text-base min-h-[52px]\",\n                optionDisabled ? \"w-full\" : \"\")}>\n            <div className={\"mr-8\"}>\n                <PropertyConfigBadge propertyConfig={propertyConfig}/>\n            </div>\n            <div>\n                <div>{propertyConfig.name}</div>\n                <Typography variant={\"caption\"}\n                            color={\"disabled\"}\n                            className={\"max-w-sm\"}>\n                    {existing && optionDisabled ? \"You can only switch to widgets that use the same data type\" : propertyConfig.description}\n                </Typography>\n            </div>\n        </div>\n    </SelectItem>\n}\n","import React from \"react\";\nimport { StringPropertyValidation } from \"./validation/StringPropertyValidation\";\nimport { ValidationPanel } from \"./validation/ValidationPanel\";\nimport { getIn, useFormex } from \"@firecms/formex\";\n\nimport { Select, SelectItem, TextField } from \"@firecms/ui\";\n\nexport function UrlPropertyField({\n                                     disabled,\n                                     showErrors\n                                 }: {\n    disabled: boolean;\n    showErrors: boolean;\n}) {\n\n    const { values, setFieldValue } = useFormex();\n\n    const urlValue = getIn(values, \"url\");\n\n    return (\n        <>\n            <div className={\"col-span-12\"}>\n\n                <Select\n                    disabled={disabled}\n                    position={\"item-aligned\"}\n                    onValueChange={(value: string) => {\n                        if (value === \"[NONE]\")\n                            setFieldValue(\"url\", true);\n                        else\n                            setFieldValue(\"url\", value);\n                    }}\n                    label={\"Preview type\"}\n                    renderValue={(value: string) => {\n                        switch (value) {\n                            case \"image\":\n                                return \"Image\";\n                            case \"video\":\n                                return \"Video\";\n                            case \"audio\":\n                                return \"Audio\";\n                            default:\n                                return \"Display URL\";\n                        }\n                    }}\n                    value={urlValue ?? \"[NONE]\"}>\n                    <SelectItem value={\"[NONE]\"}>\n                        Display URL\n                    </SelectItem>\n                    <SelectItem value={\"image\"}>\n                        Image\n                    </SelectItem>\n                    <SelectItem value={\"video\"}>\n                        Video\n                    </SelectItem>\n                    <SelectItem value={\"audio\"}>\n                        Audio\n                    </SelectItem>\n                </Select>\n            </div>\n\n            <div className={\"col-span-12\"}>\n\n                <ValidationPanel>\n\n                    <StringPropertyValidation disabled={disabled}\n                                              max={true}\n                                              min={true}\n                                              trim={true}\n                                              showErrors={showErrors}/>\n\n                </ValidationPanel>\n\n            </div>\n\n            <div className={\"col-span-12\"}>\n\n                <TextField name={\"defaultValue\"}\n                           disabled={disabled}\n                           onChange={(e: any) => {\n                               setFieldValue(\"defaultValue\", e.target.value === \"\" ? undefined : e.target.value);\n                           }}\n                           label={\"Default value\"}\n                           value={getIn(values, \"defaultValue\") ?? \"\"}/>\n\n            </div>\n        </>\n    );\n}\n","import { DEFAULT_FIELD_CONFIGS, PropertyConfigId, PropertyConfig } from \"@firecms/core\";\n\nexport const supportedFieldsIds: PropertyConfigId[] = [\n    \"text_field\",\n    \"multiline\",\n    \"markdown\",\n    \"url\",\n    \"email\",\n    \"select\",\n    \"multi_select\",\n    \"number_input\",\n    \"number_select\",\n    \"multi_number_select\",\n    \"file_upload\",\n    \"multi_file_upload\",\n    \"reference\",\n    \"multi_references\",\n    \"switch\",\n    \"date_time\",\n    \"group\",\n    \"key_value\",\n    \"repeat\",\n    \"block\"\n];\n\nexport const supportedFields: Record<string, PropertyConfig> = Object.entries(DEFAULT_FIELD_CONFIGS)\n    .filter(([id]) => supportedFieldsIds.includes(id as PropertyConfigId))\n    .map(([id, config]) => ({ [id]: config }))\n    .reduce((a, b) => ({ ...a, ...b }), {});\n","import React, { useDeferredValue, useEffect, useRef, useState } from \"react\";\nimport equal from \"react-fast-compare\"\n\nimport { Formex, FormexController, getIn, useCreateFormex } from \"@firecms/formex\";\nimport {\n    DEFAULT_FIELD_CONFIGS,\n    DeleteConfirmationDialog,\n    PropertyConfigId,\n    getFieldConfig,\n    getFieldId,\n    isPropertyBuilder,\n    isValidRegExp,\n    mergeDeep,\n    Property,\n    PropertyConfig,\n    PropertyConfigBadge,\n} from \"@firecms/core\";\nimport {\n    Button,\n    cn,\n    DeleteIcon,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    IconButton,\n    InfoLabel,\n    Select,\n    Typography\n} from \"@firecms/ui\";\nimport { EnumPropertyField } from \"./properties/EnumPropertyField\";\nimport { StoragePropertyField } from \"./properties/StoragePropertyField\";\nimport { MapPropertyField } from \"./properties/MapPropertyField\";\nimport { RepeatPropertyField } from \"./properties/RepeatPropertyField\";\nimport { CommonPropertyFields } from \"./properties/CommonPropertyFields\";\nimport { StringPropertyField } from \"./properties/StringPropertyField\";\nimport { BooleanPropertyField } from \"./properties/BooleanPropertyField\";\nimport { BlockPropertyField } from \"./properties/BlockPropertyField\";\nimport { NumberPropertyField } from \"./properties/NumberPropertyField\";\nimport { ReferencePropertyField } from \"./properties/ReferencePropertyField\";\nimport { DateTimePropertyField } from \"./properties/DateTimePropertyField\";\nimport { AdvancedPropertyValidation } from \"./properties/advanced/AdvancedPropertyValidation\";\nimport { editableProperty } from \"../../utils/entities\";\nimport { KeyValuePropertyField } from \"./properties/KeyValuePropertyField\";\nimport { updatePropertyFromWidget } from \"./utils/update_property_for_widget\";\nimport { PropertySelectItem } from \"./PropertySelectItem\";\nimport { UrlPropertyField } from \"./properties/UrlPropertyField\";\nimport { supportedFields } from \"./utils/supported_fields\";\n\nexport type PropertyWithId = Property & {\n    id?: string\n};\n\nexport type OnPropertyChangedParams = {\n    id?: string,\n    property: Property,\n    namespace?: string,\n    previousId?: string\n};\n\nexport type PropertyFormProps = {\n    includeIdAndName?: boolean;\n    existingProperty: boolean;\n    autoUpdateId?: boolean;\n    autoOpenTypeSelect: boolean;\n    inArray: boolean;\n    propertyKey?: string;\n    propertyNamespace?: string;\n    property?: Property;\n    onPropertyChanged?: (params: OnPropertyChangedParams) => void;\n    onPropertyChangedImmediate?: boolean;\n    onDelete?: (id?: string, namespace?: string) => void;\n    onError?: (id: string, namespace?: string, error?: Record<string, any>) => void;\n    initialErrors?: Record<string, any>;\n    existingPropertyKeys?: string[];\n    forceShowErrors?: boolean;\n    allowDataInference: boolean;\n    getData?: () => Promise<object[]>;\n    getController?: (formex: FormexController<PropertyWithId>) => void;\n    propertyConfigs: Record<string, PropertyConfig>;\n    collectionEditable: boolean;\n};\n\nexport const PropertyForm = React.memo(\n    function PropertyForm(props: PropertyFormProps) {\n\n        const {\n            includeIdAndName = true,\n            autoOpenTypeSelect,\n            existingProperty,\n            autoUpdateId,\n            inArray,\n            propertyKey,\n            existingPropertyKeys,\n            propertyNamespace,\n            property,\n            onPropertyChanged,\n            onPropertyChangedImmediate = true,\n            onDelete,\n            onError,\n            initialErrors,\n            forceShowErrors,\n            allowDataInference,\n            getController,\n            getData,\n            propertyConfigs,\n            collectionEditable\n        } = props;\n\n        const initialValue: PropertyWithId = {\n            id: \"\",\n            name: \"\"\n        } as PropertyWithId;\n\n        const disabled = (Boolean(property && !editableProperty(property)) && !collectionEditable);\n\n        const lastSubmittedProperty = useRef<OnPropertyChangedParams | undefined>(property ? {\n            id: propertyKey,\n            previousId: propertyKey,\n            property\n        } : undefined);\n\n        const doOnPropertyChanged = ({\n                                         id,\n                                         property\n                                     }: OnPropertyChangedParams) => {\n            const params = {\n                id,\n                previousId: lastSubmittedProperty.current?.id,\n                property,\n                namespace: propertyNamespace\n            };\n            lastSubmittedProperty.current = params;\n            onPropertyChanged?.(params);\n        };\n\n        const formexController = useCreateFormex<PropertyWithId>({\n            initialValues: property\n                ? { id: propertyKey, ...property } as PropertyWithId\n                : initialValue,\n            initialErrors,\n            validateOnChange: true,\n            validateOnInitialRender: true,\n            onSubmit: (newPropertyWithId, controller) => {\n                console.debug(\"onSubmit\", newPropertyWithId);\n                const {\n                    id,\n                    ...property\n                } = newPropertyWithId;\n                doOnPropertyChanged({\n                    id,\n                    property: { ...property, editable: property.editable ?? true }\n                });\n                if (!existingProperty)\n                    controller.resetForm({ values: initialValue });\n            },\n            validation: (values) => {\n                const errors: Record<string, any> = {};\n                if (includeIdAndName) {\n                    if (!values.name) {\n                        errors.name = \"Required\";\n                    } else {\n                        const nameError = validateName(values.name);\n                        if (nameError)\n                            errors.name = nameError;\n                    }\n                    if (!values.id) {\n                        errors.id = \"Required\";\n                    } else {\n                        const idError = validateId(values.id, existingPropertyKeys);\n                        if (idError)\n                            errors.id = idError;\n                    }\n                }\n\n                if (values.dataType === \"string\") {\n                    if (values.validation?.matches && !isValidRegExp(values.validation?.matches.toString())) {\n                        errors.validation = {\n                            matches: \"Invalid regular expression\"\n                        }\n                    }\n                }\n                if (values.dataType === \"reference\" && !values.path) {\n                    errors.path = \"You must specify a target collection for the field\";\n                }\n                if (values.propertyConfig === \"repeat\") {\n                    if (!(values as any).of) {\n                        errors.of = \"You need to specify a repeat field\";\n                    }\n                }\n                if (values.propertyConfig === \"block\") {\n                    if (!(values as any).oneOf) {\n                        errors.oneOf = \"You need to specify the properties of this block\";\n                    }\n                }\n                return errors;\n            }\n        });\n\n        useEffect(() => {\n            getController?.(formexController);\n        }, [formexController, getController]);\n\n        return <Formex value={formexController}>\n            <PropertyEditFormFields\n                onPropertyChanged={onPropertyChangedImmediate\n                    ? doOnPropertyChanged\n                    : undefined}\n                onDelete={onDelete}\n                includeIdAndTitle={includeIdAndName}\n                propertyNamespace={propertyNamespace}\n                onError={onError}\n                showErrors={forceShowErrors || formexController.submitCount > 0}\n                existing={existingProperty}\n                autoUpdateId={autoUpdateId}\n                inArray={inArray}\n                autoOpenTypeSelect={autoOpenTypeSelect}\n                disabled={disabled}\n                getData={getData}\n                allowDataInference={allowDataInference}\n                propertyConfigs={propertyConfigs}\n                collectionEditable={collectionEditable}\n                {...formexController}/>\n        </Formex>;\n    }, (a, b) =>\n        a.getData === b.getData &&\n        a.propertyKey === b.propertyKey &&\n        a.propertyNamespace === b.propertyNamespace &&\n        a.includeIdAndName === b.includeIdAndName &&\n        a.autoOpenTypeSelect === b.autoOpenTypeSelect &&\n        a.autoUpdateId === b.autoUpdateId &&\n        a.existingProperty === b.existingProperty\n);\n\nexport function PropertyFormDialog({\n                                       open,\n                                       onCancel,\n                                       onOkClicked,\n                                       onPropertyChanged,\n                                       getData,\n                                       collectionEditable,\n                                       ...formProps\n                                   }: PropertyFormProps & {\n    open?: boolean;\n    onOkClicked?: () => void;\n    onCancel?: () => void;\n}) {\n    const formexRef = useRef<FormexController<PropertyWithId>>();\n    const getController = (helpers: FormexController<PropertyWithId>) => {\n        formexRef.current = helpers;\n    };\n\n    return <Dialog\n        open={open ?? false}\n        maxWidth={\"xl\"}\n        fullWidth={true}\n    >\n        <form noValidate={true}\n              autoComplete={\"off\"}\n              onSubmit={(e) => {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  formexRef.current?.handleSubmit(e)\n              }}>\n            <DialogContent>\n                <PropertyForm {...formProps}\n                              onPropertyChanged={(params) => {\n                                  onPropertyChanged?.(params);\n                                  onOkClicked?.();\n                              }}\n                              collectionEditable={collectionEditable}\n                              onPropertyChangedImmediate={false}\n                              getController={getController}\n                              getData={getData}\n                />\n            </DialogContent>\n\n            <DialogActions>\n\n                {onCancel && <Button\n                    variant={\"text\"}\n                    onClick={() => {\n                        onCancel();\n                        formexRef.current?.resetForm();\n                    }}>\n                    Cancel\n                </Button>}\n\n                <Button variant=\"outlined\"\n                        type={\"submit\"}\n                        color=\"primary\">\n                    Ok\n                </Button>\n            </DialogActions>\n        </form>\n    </Dialog>;\n\n}\n\nfunction PropertyEditFormFields({\n                                    values,\n                                    errors,\n                                    setValues,\n                                    existing,\n                                    autoUpdateId = false,\n                                    autoOpenTypeSelect,\n                                    includeIdAndTitle,\n                                    onPropertyChanged,\n                                    onDelete,\n                                    propertyNamespace,\n                                    onError,\n                                    showErrors,\n                                    disabled,\n                                    inArray,\n                                    getData,\n                                    allowDataInference,\n                                    propertyConfigs,\n                                    collectionEditable\n                                }: {\n    includeIdAndTitle?: boolean;\n    existing: boolean;\n    autoUpdateId?: boolean;\n    autoOpenTypeSelect: boolean;\n    propertyNamespace?: string;\n    onPropertyChanged?: (params: OnPropertyChangedParams) => void;\n    onDelete?: (id?: string, namespace?: string) => void;\n    onError?: (id: string, namespace?: string, error?: Record<string, any>) => void;\n    showErrors: boolean;\n    inArray: boolean;\n    disabled: boolean;\n    getData?: () => Promise<object[]>;\n    allowDataInference: boolean;\n    propertyConfigs: Record<string, PropertyConfig>;\n    collectionEditable: boolean;\n} & FormexController<PropertyWithId>) {\n\n    const [selectOpen, setSelectOpen] = useState(autoOpenTypeSelect);\n    const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n    const [selectedFieldConfigId, setSelectedFieldConfigId] = useState<string | undefined>(values?.dataType ? getFieldId(values) : undefined);\n\n    const allSupportedFields = Object.entries(supportedFields).concat(Object.entries(propertyConfigs));\n\n    const displayedWidgets = inArray\n        ? allSupportedFields.filter(([_, propertyConfig]) => !isPropertyBuilder(propertyConfig.property) && propertyConfig.property?.dataType !== \"array\")\n        : allSupportedFields;\n\n    const deferredValues = useDeferredValue(values);\n    const nameFieldRef = useRef<HTMLInputElement>(null);\n\n    const lastSubmittedProperty = useRef<object>(values);\n\n    const selectedWidgetError = showErrors && getIn(errors, \"selectedWidget\");\n\n    useEffect(() => {\n        if (onPropertyChanged) {\n            if ((!includeIdAndTitle || deferredValues.id)) {\n                const {\n                    id,\n                    ...property\n                } = deferredValues;\n                if (!equal(deferredValues, lastSubmittedProperty.current)) {\n                    onPropertyChanged({\n                        id,\n                        property,\n                        namespace: propertyNamespace\n                    });\n                    lastSubmittedProperty.current = deferredValues;\n                }\n            }\n        }\n    }, [deferredValues, includeIdAndTitle, onPropertyChanged, propertyNamespace]);\n\n    useEffect(() => {\n        if (values?.id && onError) {\n            onError(values?.id, propertyNamespace, errors);\n        }\n    }, [errors, onError, propertyNamespace, values?.id]);\n\n    const onWidgetSelectChanged = (newSelectedWidgetId: PropertyConfigId) => {\n        setSelectedFieldConfigId(newSelectedWidgetId);\n        setValues(updatePropertyFromWidget(values, newSelectedWidgetId, propertyConfigs));\n        // Ugly hack to autofocus the name field\n        setTimeout(() => {\n            nameFieldRef.current?.focus();\n        }, 0);\n    };\n\n    let childComponent;\n    if (selectedFieldConfigId === \"text_field\" ||\n        selectedFieldConfigId === \"multiline\" ||\n        selectedFieldConfigId === \"markdown\" ||\n        selectedFieldConfigId === \"email\") {\n        childComponent =\n            <StringPropertyField widgetId={selectedFieldConfigId}\n                                 disabled={disabled}\n                                 showErrors={showErrors}/>;\n    } else if (selectedFieldConfigId === \"url\") {\n        childComponent =\n            <UrlPropertyField disabled={disabled}\n                              showErrors={showErrors}/>;\n    } else if (selectedFieldConfigId === \"select\" ||\n        selectedFieldConfigId === \"number_select\") {\n        childComponent = <EnumPropertyField\n            multiselect={false}\n            allowDataInference={allowDataInference}\n            updateIds={!existing}\n            disabled={disabled}\n            getData={getData}\n            showErrors={showErrors}/>;\n    } else if (selectedFieldConfigId === \"multi_select\" ||\n        selectedFieldConfigId === \"multi_number_select\") {\n        childComponent = <EnumPropertyField\n            multiselect={true}\n            updateIds={!existing}\n            disabled={disabled}\n            allowDataInference={allowDataInference}\n            getData={getData}\n            showErrors={showErrors}/>;\n    } else if (selectedFieldConfigId === \"file_upload\") {\n        childComponent =\n            <StoragePropertyField existing={existing}\n                                  multiple={false}\n                                  disabled={disabled}/>;\n    } else if (selectedFieldConfigId === \"multi_file_upload\") {\n        childComponent =\n            <StoragePropertyField existing={existing}\n                                  multiple={true}\n                                  disabled={disabled}/>;\n    } else if (selectedFieldConfigId === \"switch\") {\n        childComponent = <BooleanPropertyField disabled={disabled}/>;\n    } else if (selectedFieldConfigId === \"number_input\") {\n        childComponent = <NumberPropertyField disabled={disabled}/>;\n    } else if (selectedFieldConfigId === \"group\") {\n        childComponent =\n            <MapPropertyField disabled={disabled} getData={getData} allowDataInference={allowDataInference}\n                              collectionEditable={collectionEditable}\n                              propertyConfigs={propertyConfigs}/>;\n    } else if (selectedFieldConfigId === \"block\") {\n        childComponent =\n            <BlockPropertyField disabled={disabled} getData={getData} allowDataInference={allowDataInference}\n                                collectionEditable={collectionEditable}\n                                propertyConfigs={propertyConfigs}/>;\n    } else if (selectedFieldConfigId === \"reference\") {\n        childComponent =\n            <ReferencePropertyField showErrors={showErrors}\n                                    existing={existing}\n                                    multiple={false}\n                                    disabled={disabled}/>;\n    } else if (selectedFieldConfigId === \"date_time\") {\n        childComponent = <DateTimePropertyField disabled={disabled}/>;\n    } else if (selectedFieldConfigId === \"multi_references\") {\n        childComponent =\n            <ReferencePropertyField showErrors={showErrors}\n                                    existing={existing}\n                                    multiple={true}\n                                    disabled={disabled}/>;\n    } else if (selectedFieldConfigId === \"repeat\") {\n        childComponent =\n            <RepeatPropertyField showErrors={showErrors}\n                                 existing={existing}\n                                 getData={getData}\n                                 allowDataInference={allowDataInference}\n                                 disabled={disabled}\n                                 collectionEditable={collectionEditable}\n                                 propertyConfigs={propertyConfigs}/>;\n    } else if (selectedFieldConfigId === \"key_value\") {\n        childComponent =\n            <KeyValuePropertyField disabled={disabled}/>;\n    } else {\n        childComponent = null;\n    }\n\n    return (\n        <>\n            {disabled && <InfoLabel mode={\"warn\"}>\n                <Typography>This property can&apos;t be edited</Typography>\n                <Typography variant={\"caption\"}>\n                    You may not have permission to\n                    edit it or it is defined in code with no <code>editable</code> flag\n                </Typography>\n            </InfoLabel>}\n\n            <div className=\"flex mt-2 justify-between\">\n                <div className={\"w-full flex flex-col gap-2\"}>\n                    <Select\n                        // className={\"w-full\"}\n                        error={Boolean(selectedWidgetError)}\n                        value={selectedFieldConfigId ?? \"\"}\n                        placeholder={\"Select a property widget\"}\n                        open={selectOpen}\n                        onOpenChange={setSelectOpen}\n                        position={\"item-aligned\"}\n                        disabled={disabled}\n                        renderValue={(value) => {\n                            if (!value) {\n                                return <em>Select a property\n                                    widget</em>;\n                            }\n                            const key = value as PropertyConfigId;\n                            const propertyConfig = DEFAULT_FIELD_CONFIGS[key] ?? propertyConfigs[key];\n                            const baseProperty = propertyConfig.property;\n                            const baseFieldConfig = baseProperty && !isPropertyBuilder(baseProperty) ? getFieldConfig(baseProperty, propertyConfigs) : undefined;\n                            const optionDisabled = isPropertyBuilder(baseProperty) || (existing && baseProperty.dataType !== values?.dataType);\n                            const computedFieldConfig = baseFieldConfig ? mergeDeep(baseFieldConfig, propertyConfig) : propertyConfig;\n                            return <div\n                                onClick={(e) => {\n                                    if (optionDisabled) {\n                                        e.stopPropagation();\n                                        e.preventDefault();\n                                    }\n                                }}\n                                className={cn(\n                                    \"flex items-center\",\n                                    optionDisabled ? \"w-full pointer-events-none opacity-50\" : \"\")}>\n                                <div className={\"mr-8\"}>\n                                    <PropertyConfigBadge propertyConfig={computedFieldConfig}/>\n                                </div>\n                                <div className={\"flex flex-col items-start text-base text-left\"}>\n                                    <div>{computedFieldConfig.name}</div>\n                                    <Typography variant={\"caption\"}\n                                                color={\"disabled\"}>\n                                        {optionDisabled ? \"You can only switch to widgets that use the same data type\" : computedFieldConfig.description}\n                                    </Typography>\n                                </div>\n                            </div>\n                        }}\n                        onValueChange={(value) => {\n                            onWidgetSelectChanged(value as PropertyConfigId);\n                        }}>\n                        {displayedWidgets.map(([key, propertyConfig]) => {\n                            const baseProperty = propertyConfig.property;\n                            const optionDisabled = existing && !isPropertyBuilder(baseProperty) && baseProperty.dataType !== values?.dataType;\n                            return <PropertySelectItem\n                                key={key}\n                                value={key}\n                                optionDisabled={optionDisabled}\n                                propertyConfig={propertyConfig}\n                                existing={existing}/>;\n                        })}\n                    </Select>\n\n                    {selectedWidgetError &&\n                        <Typography variant=\"caption\"\n                                    className={\"ml-3.5\"}\n                                    color={\"error\"}>Required</Typography>}\n\n                    {/*<Typography variant=\"caption\" className={\"ml-3.5\"}>Define your own custom properties and*/}\n                    {/*    components</Typography>*/}\n\n                </div>\n\n                {onDelete && values?.id &&\n                    <IconButton\n                        variant={\"ghost\"}\n                        className=\"m-4\"\n                        disabled={disabled}\n                        onClick={() => setDeleteDialogOpen(true)}>\n                        <DeleteIcon/>\n                    </IconButton>}\n            </div>\n\n            <div className={\"grid grid-cols-12 gap-y-12 mt-8 mb-8\"}>\n                {includeIdAndTitle &&\n                    <CommonPropertyFields showErrors={showErrors}\n                                          disabledId={existing}\n                                          isNewProperty={!existing}\n                                          disabled={disabled}\n                                          autoUpdateId={autoUpdateId}\n                                          ref={nameFieldRef}/>}\n\n                {childComponent}\n\n                <div className={\"col-span-12\"}>\n                    <AdvancedPropertyValidation disabled={disabled}/>\n                </div>\n            </div>\n\n            {onDelete &&\n                <DeleteConfirmationDialog open={deleteDialogOpen}\n                                          onAccept={() => onDelete(values?.id, propertyNamespace)}\n                                          onCancel={() => setDeleteDialogOpen(false)}\n                                          title={<div>Delete this property?</div>}\n                                          body={\n                                              <div> This will <b>not delete any\n                                                  data</b>, only modify the\n                                                  collection.</div>\n                                          }/>}\n\n        </>\n    );\n}\n\nconst idRegEx = /^[a-zA-Z_][a-zA-Z0-9_]*$/;\n\nfunction validateId(value?: string, existingPropertyKeys?: string[]) {\n\n    let error;\n    if (!value) {\n        error = \"You must specify an id for the field\";\n    }\n    if (value && !value.match(idRegEx)) {\n        error = \"The id can only contain letters, numbers and underscores (_), and not start with a number\";\n    }\n    if (value && existingPropertyKeys && existingPropertyKeys.includes(value)) {\n        error = \"There is another field with this ID already\";\n    }\n    return error;\n}\n\nfunction validateName(value: string) {\n    let error;\n    if (!value) {\n        error = \"You must specify a title for the field\";\n    }\n    return error;\n}\n","export function camelCase(str: string): string {\n    if (!str) return \"\";\n    return (str.slice(0, 1).toLowerCase() + str.slice(1))\n        .replace(/([-_ ]){1,}/g, \" \")\n        .split(/[-_ ]/)\n        .reduce((cur, acc) => {\n            return cur + acc[0].toUpperCase() + acc.substring(1);\n        }, \"\");\n}\n","import { EntityCollection, useSnackbarController } from \"@firecms/core\";\nimport { Button, ContentCopyIcon, Dialog, DialogActions, DialogContent, Typography, } from \"@firecms/ui\";\nimport React from \"react\";\nimport JSON5 from \"json5\";\nimport { Highlight, themes } from \"prism-react-renderer\"\nimport { camelCase } from \"./utils/strings\";\n\nexport function GetCodeDialog({\n                                  collection,\n                                  onOpenChange,\n                                  open\n                              }: { onOpenChange: (open: boolean) => void, collection: any, open: any }) {\n\n    const snackbarController = useSnackbarController();\n\n    const code = collection\n        ? \"import { EntityCollection } from \\\"firecms\\\";\\n\\nconst \" + (collection?.name ? camelCase(collection.name) : \"my\") + \"Collection:EntityCollection = \" + JSON5.stringify(collectionToCode(collection), null, \"\\t\")\n        : \"No collection selected\";\n    return <Dialog open={open}\n                   onOpenChange={onOpenChange}\n                   maxWidth={\"4xl\"}>\n        <DialogContent>\n            <Typography variant={\"h6\"} className={\"my-4\"}>\n                Code for {collection.name}\n            </Typography>\n            <Typography variant={\"body2\"} className={\"my-4 mb-8\"}>\n                If you want to customise the collection in code, you can add this collection code to your CMS\n                app configuration.\n                More info in the <a\n                rel=\"noopener noreferrer\"\n                href={\"https://firecms.co/docs/customization_quickstart\"}>docs</a>.\n            </Typography>\n            <Highlight\n                theme={themes.vsDark}\n                code={code}\n                language=\"typescript\"\n            >\n                {({\n                      className,\n                      style,\n                      tokens,\n                      getLineProps,\n                      getTokenProps\n                  }) => (\n                    <pre style={style} className={\"p-4 rounded text-sm\"}>\n        {tokens.map((line, i) => (\n            <div key={i} {...getLineProps({ line })}>\n                {line.map((token, key) => (\n                    <span key={key} {...getTokenProps({ token })} />\n                ))}\n            </div>\n        ))}\n      </pre>\n                )}\n            </Highlight>\n\n        </DialogContent>\n        <DialogActions>\n            <Button\n                variant={\"text\"}\n                size={\"small\"}\n                onClick={(e) => {\n                    e.stopPropagation();\n                    e.preventDefault();\n                    snackbarController.open({\n                        type: \"success\",\n                        message: `Copied`\n                    })\n                    return navigator.clipboard.writeText(code);\n                }}>\n                <ContentCopyIcon size={\"small\"}/>\n                Copy to clipboard\n            </Button>\n            <Button onClick={() => onOpenChange(false)}>Close</Button>\n        </DialogActions>\n    </Dialog>;\n}\n\nfunction collectionToCode(collection: EntityCollection): object {\n\n    const propertyCleanup = (property: any) => {\n\n        const updatedProperty = {\n            ...property\n        };\n\n        delete updatedProperty.fromBuilder;\n        delete updatedProperty.resolved;\n        delete updatedProperty.propertiesOrder;\n        delete updatedProperty.editable;\n\n        if (updatedProperty.type === \"map\") {\n            return {\n                ...updatedProperty,\n                properties: updatedProperty.properties.map(propertyCleanup)\n            }\n        }\n        return updatedProperty;\n    }\n\n    return {\n        id: collection.id,\n        name: collection.name,\n        singularName: collection.singularName,\n        path: collection.path,\n        description: collection.description,\n        editable: true,\n        collectionGroup: collection.collectionGroup,\n        icon: collection.icon,\n        group: collection.group,\n        customId: collection.customId,\n        initialFilter: collection.initialFilter,\n        initialSort: collection.initialSort,\n        properties: Object.entries(collection.properties ?? {})\n            .map(([key, value]) => ({\n                [key]: propertyCleanup(value)\n            }))\n            .reduce((a, b) => ({ ...a, ...b }), {}),\n        subcollections: (collection.subcollections ?? []).map(collectionToCode)\n    }\n\n}\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n\nimport { Field, getIn, useFormex } from \"@firecms/formex\";\nimport {\n    EntityCollection,\n    ErrorBoundary,\n    isPropertyBuilder,\n    makePropertiesEditable,\n    Properties,\n    Property,\n    PropertyConfig,\n    PropertyOrBuilder,\n    useLargeLayout,\n    User,\n    useSnackbarController\n} from \"@firecms/core\";\nimport {\n    AddIcon,\n    AutoAwesomeIcon,\n    Button,\n    CircularProgress,\n    cn,\n    CodeIcon,\n    DebouncedTextField,\n    defaultBorderMixin,\n    IconButton,\n    Paper,\n    Tooltip,\n    Typography,\n} from \"@firecms/ui\";\n\nimport { getFullId, idToPropertiesPath, namespaceToPropertiesOrderPath } from \"./util\";\nimport { OnPropertyChangedParams, PropertyForm, PropertyFormDialog } from \"./PropertyEditView\";\nimport { PropertyTree } from \"./PropertyTree\";\nimport { PersistedCollection } from \"../../types/persisted_collection\";\nimport { GetCodeDialog } from \"./GetCodeDialog\";\n\ntype CollectionEditorFormProps = {\n    showErrors: boolean;\n    isNewCollection: boolean;\n    propertyErrorsRef?: React.MutableRefObject<any>;\n    onPropertyError: (propertyKey: string, namespace: string | undefined, error?: Record<string, any>) => void;\n    setDirty?: (dirty: boolean) => void;\n    reservedGroups?: string[];\n    extraIcon: React.ReactNode;\n    getUser?: (uid: string) => User | null;\n    getData?: () => Promise<object[]>;\n    doCollectionInference: (collection: PersistedCollection) => Promise<Partial<EntityCollection> | null> | undefined;\n    propertyConfigs: Record<string, PropertyConfig>;\n    collectionEditable: boolean;\n};\n\nexport function CollectionPropertiesEditorForm({\n                                                   showErrors,\n                                                   isNewCollection,\n                                                   propertyErrorsRef,\n                                                   onPropertyError,\n                                                   setDirty,\n                                                   reservedGroups,\n                                                   extraIcon,\n                                                   getUser,\n                                                   getData,\n                                                   doCollectionInference,\n                                                   propertyConfigs,\n                                                   collectionEditable\n                                               }: CollectionEditorFormProps) {\n\n    const {\n        values,\n        setFieldValue,\n        setFieldError,\n        setFieldTouched,\n        errors,\n        dirty\n    } = useFormex<PersistedCollection>();\n\n    const snackbarController = useSnackbarController();\n\n    const largeLayout = useLargeLayout();\n    const asDialog = !largeLayout\n\n    // index of the selected property within the namespace\n    const [selectedPropertyIndex, setSelectedPropertyIndex] = useState<number | undefined>();\n    const [selectedPropertyKey, setSelectedPropertyKey] = useState<string | undefined>();\n    const [selectedPropertyNamespace, setSelectedPropertyNamespace] = useState<string | undefined>();\n\n    const selectedPropertyFullId = selectedPropertyKey ? getFullId(selectedPropertyKey, selectedPropertyNamespace) : undefined;\n    const selectedProperty = selectedPropertyFullId ? getIn(values.properties, selectedPropertyFullId.replaceAll(\".\", \".properties.\")) : undefined;\n    const [codeDialogOpen, setCodeDialogOpen] = useState<boolean>(false);\n\n    const [inferringProperties, setInferringProperties] = useState<boolean>(false);\n\n    const [newPropertyDialogOpen, setNewPropertyDialogOpen] = useState<boolean>(false);\n    const [inferredPropertyKeys, setInferredPropertyKeys] = useState<string[]>([]);\n\n    const currentPropertiesOrderRef = React.useRef<{\n        [key: string]: string[]\n    }>(values.propertiesOrder ? { \"\": values.propertiesOrder } : {});\n\n    useEffect(() => {\n        if (setDirty)\n            setDirty(dirty);\n    }, [dirty]);\n\n    const inferPropertiesFromData = doCollectionInference\n        ? (): void => {\n            if (!doCollectionInference)\n                return;\n\n            setInferringProperties(true);\n            // @ts-ignore\n            doCollectionInference(values)\n                .then((newCollection) => {\n\n                    if (newCollection)\n                        makePropertiesEditable(newCollection.properties as Properties);\n\n                    if (!newCollection) {\n                        snackbarController.open({\n                            type: \"error\",\n                            message: \"Could not infer properties from data\"\n                        });\n                        return;\n                    }\n                    // find properties in the new collection, not present in the current one\n                    const newPropertyKeys = (newCollection.properties ? Object.keys(newCollection.properties) : [])\n                        .filter((propertyKey) => !values.properties[propertyKey]);\n                    if (newPropertyKeys.length === 0) {\n                        snackbarController.open({\n                            type: \"info\",\n                            message: \"No new properties found in existing data\"\n                        });\n                        return;\n                    }\n                    // add them to the current collection\n                    const updatedProperties = {\n                        ...newPropertyKeys.reduce((acc, propertyKey) => {\n                            acc[propertyKey] = (newCollection.properties ?? {})[propertyKey];\n                            return acc;\n                        }, {} as {\n                            [key: string]: PropertyOrBuilder\n                        }),\n                        ...values.properties\n                    };\n                    const updatedPropertiesOrder = [\n                        ...newPropertyKeys,\n                        ...(values.propertiesOrder ?? [])\n                    ];\n                    setFieldValue(\"properties\", updatedProperties, false);\n\n                    updatePropertiesOrder(updatedPropertiesOrder);\n\n                    setInferredPropertyKeys(newPropertyKeys);\n                })\n                .finally(() => {\n                    setInferringProperties(false);\n                })\n        }\n        : undefined;\n\n    const getCurrentPropertiesOrder = useCallback((namespace?: string) => {\n        if (!namespace) return currentPropertiesOrderRef.current[\"\"];\n        return currentPropertiesOrderRef.current[namespace] ?? getIn(values, namespaceToPropertiesOrderPath(namespace));\n    }, [values]);\n\n    const updatePropertiesOrder = useCallback((newPropertiesOrder: string[], namespace?: string) => {\n        const propertiesOrderPath = namespaceToPropertiesOrderPath(namespace);\n\n        setFieldValue(propertiesOrderPath, newPropertiesOrder, false);\n        currentPropertiesOrderRef.current[namespace ?? \"\"] = newPropertiesOrder;\n\n    }, [setFieldValue]);\n\n    const deleteProperty = useCallback((propertyKey?: string, namespace?: string) => {\n        const fullId = propertyKey ? getFullId(propertyKey, namespace) : undefined;\n        if (!fullId)\n            throw Error(\"collection editor miss config\");\n\n        setFieldValue(idToPropertiesPath(fullId), undefined, false);\n\n        const currentPropertiesOrder = getCurrentPropertiesOrder(namespace);\n        const newPropertiesOrder = currentPropertiesOrder.filter((p) => p !== propertyKey);\n        updatePropertiesOrder(newPropertiesOrder, namespace);\n\n        setNewPropertyDialogOpen(false);\n\n        setSelectedPropertyIndex(undefined);\n        setSelectedPropertyKey(undefined);\n        setSelectedPropertyNamespace(undefined);\n    }, [getCurrentPropertiesOrder, setFieldValue, updatePropertiesOrder]);\n\n    const onPropertyMove = (propertiesOrder: string[], namespace?: string) => {\n        setFieldValue(namespaceToPropertiesOrderPath(namespace), propertiesOrder, false);\n    };\n\n    const onPropertyCreated = ({\n                                   id,\n                                   property\n                               }: {\n        id?: string,\n        property: Property\n    }) => {\n        if (!id) {\n            throw Error(\"Need to include an ID when creating a new property\")\n        }\n        setFieldValue(\"properties\", {\n            ...(values.properties ?? {}),\n            [id]: property\n        }, false);\n        const newPropertiesOrder = [...(values.propertiesOrder ?? Object.keys(values.properties)), id];\n\n        updatePropertiesOrder(newPropertiesOrder);\n\n        setNewPropertyDialogOpen(false);\n        if (largeLayout) {\n            setSelectedPropertyIndex(newPropertiesOrder.indexOf(id));\n            setSelectedPropertyKey(id);\n        }\n        setSelectedPropertyNamespace(undefined);\n    };\n\n    const onPropertyChanged = ({\n                                   id,\n                                   property,\n                                   previousId,\n                                   namespace\n                               }: OnPropertyChangedParams) => {\n\n        const fullId = id ? getFullId(id, namespace) : undefined;\n        const propertyPath = fullId ? idToPropertiesPath(fullId) : undefined;\n\n        // If the id has changed we need to a little cleanup\n        if (previousId && previousId !== id) {\n            console.debug(\"onPropertyChanged, id change\", {\n                id,\n                property,\n                previousId,\n                namespace\n            })\n\n            const previousFullId = getFullId(previousId, namespace);\n            const previousPropertyPath = idToPropertiesPath(previousFullId);\n\n            const currentPropertiesOrder = getCurrentPropertiesOrder(namespace);\n\n            // replace previousId with id in propertiesOrder\n            const newPropertiesOrder = currentPropertiesOrder\n                .map((p) => p === previousId ? id : p)\n                .filter((p) => p !== undefined) as string[];\n\n            updatePropertiesOrder(newPropertiesOrder, namespace);\n\n            if (id) {\n                setSelectedPropertyIndex(newPropertiesOrder.indexOf(id));\n                setSelectedPropertyKey(id);\n            }\n            setFieldValue(previousPropertyPath, undefined, false);\n            setFieldTouched(previousPropertyPath, false, false);\n        }\n\n        console.debug(\"onPropertyChanged\", {\n            id,\n            property,\n            previousId,\n            namespace,\n            propertyPath\n        })\n\n        if (propertyPath) {\n            setFieldValue(propertyPath, property, false);\n            setFieldTouched(propertyPath, true, false);\n        }\n\n    };\n\n    const onPropertyErrorInternal = useCallback((id: string, namespace?: string, error?: Record<string, any>) => {\n        const propertyPath = id ? getFullId(id, namespace) : undefined;\n        console.debug(\"onPropertyErrorInternal\", {\n            id,\n            namespace,\n            error,\n            propertyPath\n        });\n        if (propertyPath) {\n            const hasError = error && Object.keys(error).length > 0;\n            onPropertyError(id, namespace, hasError ? error : undefined);\n            setFieldError(idToPropertiesPath(propertyPath), hasError ? \"Property error\" : undefined);\n        }\n    }, [])\n\n    const closePropertyDialog = () => {\n        setSelectedPropertyIndex(undefined);\n        setSelectedPropertyKey(undefined);\n    };\n\n    const initialErrors = selectedPropertyKey && propertyErrorsRef?.current?.properties ? propertyErrorsRef.current.properties[selectedPropertyKey] : undefined;\n\n    const emptyCollection = values?.propertiesOrder === undefined || values.propertiesOrder.length === 0;\n\n    const usedPropertiesOrder = (values.propertiesOrder\n        ? values.propertiesOrder\n        : Object.keys(values.properties)) as string[];\n\n    const owner = useMemo(() => values.ownerId && getUser ? getUser(values.ownerId) : null, [getUser, values.ownerId]);\n\n    const onPropertyClick = useCallback((propertyKey: string, namespace?: string) => {\n        console.debug(\"CollectionEditor: onPropertyClick\", {\n            propertyKey,\n            namespace\n        });\n        setSelectedPropertyIndex(usedPropertiesOrder.indexOf(propertyKey));\n        setSelectedPropertyKey(propertyKey);\n        setSelectedPropertyNamespace(namespace);\n    }, [usedPropertiesOrder]);\n\n    const body = (\n        <div className={\"grid grid-cols-12 gap-2 h-full bg-gray-50 dark:bg-gray-900\"}>\n            <div className={cn(\n                \"p-4 md:p-8 pb-20 md:pb-20\",\n                \"col-span-12 lg:col-span-5 h-full overflow-auto\",\n                !asDialog && \"border-r \" + defaultBorderMixin\n            )}>\n\n                <div className=\"flex my-2\">\n\n                    <div className=\"flex-grow mb-4\">\n\n                        <Field\n                            name={\"name\"}\n                            as={DebouncedTextField}\n                            invisible={true}\n                            className=\"-ml-1\"\n                            inputClassName=\"text-2xl font-headers\"\n                            placeholder={\"Collection name\"}\n                            size={\"small\"}\n                            required\n                            error={Boolean(errors?.name)}/>\n\n                        {owner &&\n                            <Typography variant={\"body2\"}\n                                        className={\"ml-2\"}\n                                        color={\"secondary\"}>\n                                Created by {owner.displayName}\n                            </Typography>}\n                    </div>\n\n                    {extraIcon && <div className=\"ml-4\">\n                        {extraIcon}\n                    </div>}\n\n                    <div className=\"ml-1 mt-2 flex flex-row gap-2\">\n                        <Tooltip title={\"Get the code for this collection\"}>\n                            <IconButton\n                                variant={\"filled\"}\n                                disabled={inferringProperties}\n                                onClick={() => setCodeDialogOpen(true)}>\n                                <CodeIcon/>\n                            </IconButton>\n                        </Tooltip>\n                        {inferPropertiesFromData && <Tooltip title={\"Add new properties based on data\"}>\n                            <IconButton\n                                variant={\"filled\"}\n                                disabled={inferringProperties}\n                                onClick={inferPropertiesFromData}>\n                                {inferringProperties ? <CircularProgress size={\"small\"}/> : <AutoAwesomeIcon/>}\n                            </IconButton>\n                        </Tooltip>}\n                        <Tooltip title={\"Add new property\"}>\n                            <Button\n                                variant={\"outlined\"}\n                                onClick={() => setNewPropertyDialogOpen(true)}>\n                                <AddIcon/>\n                            </Button>\n                        </Tooltip>\n                    </div>\n                </div>\n\n                <ErrorBoundary>\n                    <PropertyTree\n                        className={\"pl-8\"}\n                        inferredPropertyKeys={inferredPropertyKeys}\n                        selectedPropertyKey={selectedPropertyKey ? getFullId(selectedPropertyKey, selectedPropertyNamespace) : undefined}\n                        properties={values.properties}\n                        additionalFields={values.additionalFields}\n                        propertiesOrder={usedPropertiesOrder}\n                        onPropertyClick={onPropertyClick}\n                        onPropertyMove={onPropertyMove}\n                        onPropertyRemove={isNewCollection ? deleteProperty : undefined}\n                        collectionEditable={collectionEditable}\n                        errors={errors}/>\n                </ErrorBoundary>\n\n                <Button className={\"mt-8 w-full\"}\n                        color=\"primary\"\n                        variant={\"outlined\"}\n                        size={\"large\"}\n                        onClick={() => setNewPropertyDialogOpen(true)}\n                        startIcon={<AddIcon/>}>\n                    Add new property\n                </Button>\n            </div>\n\n            {!asDialog &&\n                <div className={\"col-span-12 lg:col-span-7 p-4 md:py-8 md:px-4 h-full overflow-auto pb-20 md:pb-20\"}>\n                    <Paper\n                        className=\"sticky top-8 p-4 min-h-full border border-transparent w-full flex flex-col justify-center \">\n\n                        {selectedPropertyFullId &&\n                            selectedProperty &&\n                            !isPropertyBuilder(selectedProperty) &&\n                            <PropertyForm\n                                inArray={false}\n                                key={`edit_view_${selectedPropertyIndex}`}\n                                existingProperty={!isNewCollection}\n                                autoUpdateId={false}\n                                allowDataInference={!isNewCollection}\n                                autoOpenTypeSelect={false}\n                                propertyKey={selectedPropertyKey}\n                                propertyNamespace={selectedPropertyNamespace}\n                                property={selectedProperty}\n                                onPropertyChanged={onPropertyChanged}\n                                onDelete={deleteProperty}\n                                onError={onPropertyErrorInternal}\n                                forceShowErrors={showErrors}\n                                initialErrors={initialErrors}\n                                getData={getData}\n                                propertyConfigs={propertyConfigs}\n                                collectionEditable={collectionEditable}\n                            />}\n\n                        {!selectedProperty &&\n                            <div className={\"w-full flex flex-col items-center justify-center h-full gap-4\"}>\n                                <Typography variant={\"label\"} className=\"\">\n                                    {emptyCollection\n                                        ? \"Now you can add your first property\"\n                                        : \"Select a property to edit it\"}\n                                </Typography>\n                                <Button variant={\"outlined\"}\n                                        onClick={() => setNewPropertyDialogOpen(true)}\n                                >\n                                    <AddIcon/>\n                                    Add new property\n                                </Button>\n                            </div>}\n\n                        {selectedProperty && isPropertyBuilder(selectedProperty) &&\n                            <Typography variant={\"label\"} className=\"flex items-center justify-center\">\n                                {\"This property is defined as a property builder in code\"}\n                            </Typography>}\n                    </Paper>\n                </div>}\n\n            {asDialog && <PropertyFormDialog\n                inArray={false}\n                open={selectedPropertyIndex !== undefined}\n                key={`edit_view_${selectedPropertyIndex}`}\n                autoUpdateId={!selectedProperty}\n                allowDataInference={!isNewCollection}\n                existingProperty={true}\n                autoOpenTypeSelect={false}\n                propertyKey={selectedPropertyKey}\n                propertyNamespace={selectedPropertyNamespace}\n                property={selectedProperty}\n                onPropertyChanged={onPropertyChanged}\n                onDelete={deleteProperty}\n                onError={onPropertyErrorInternal}\n                forceShowErrors={showErrors}\n                initialErrors={initialErrors}\n                getData={getData}\n                propertyConfigs={propertyConfigs}\n                collectionEditable={collectionEditable}\n                onOkClicked={asDialog\n                    ? closePropertyDialog\n                    : undefined\n                }/>}\n\n        </div>);\n\n    return (<>\n\n            {body}\n\n            {/* This is the dialog used for new properties*/}\n            <PropertyFormDialog\n                inArray={false}\n                existingProperty={false}\n                autoOpenTypeSelect={true}\n                autoUpdateId={true}\n                forceShowErrors={showErrors}\n                open={newPropertyDialogOpen}\n                onCancel={() => setNewPropertyDialogOpen(false)}\n                onPropertyChanged={onPropertyCreated}\n                getData={getData}\n                allowDataInference={!isNewCollection}\n                propertyConfigs={propertyConfigs}\n                collectionEditable={collectionEditable}\n                existingPropertyKeys={values.propertiesOrder as string[]}/>\n\n            <ErrorBoundary>\n                <GetCodeDialog\n                    collection={values}\n                    open={codeDialogOpen}\n                    onOpenChange={setCodeDialogOpen}/>\n            </ErrorBoundary>\n        </>\n    );\n}\n","import React from \"react\";\nimport { Button, Dialog, DialogActions, DialogContent, Typography } from \"@firecms/ui\";\n\nexport interface UnsavedChangesDialogProps {\n    open: boolean;\n    body?: React.ReactNode;\n    title?: string;\n    handleOk: () => void;\n    handleCancel: () => void;\n}\n\nexport function UnsavedChangesDialog({\n                                         open,\n                                         handleOk,\n                                         handleCancel,\n                                         body,\n                                         title\n                                     }: UnsavedChangesDialogProps) {\n\n    return (\n        <Dialog\n            open={open}\n            onOpenChange={(open) => open ? handleCancel() : handleOk()}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n        >\n            <DialogContent>\n                <Typography variant={\"h6\"}>\n                    {title ?? \"Unsaved changes\"}\n                </Typography>\n\n                {body && <Typography>\n                    {body}\n                </Typography>}\n                <Typography>\n                    Are you sure?\n                </Typography>\n\n            </DialogContent>\n\n            <DialogActions>\n                <Button variant=\"text\" onClick={handleCancel} autoFocus> Cancel </Button>\n                <Button onClick={handleOk}> Ok </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import { useCustomizationController } from \"@firecms/core\";\nimport { Button, Dialog, DialogActions, DialogContent, Typography } from \"@firecms/ui\";\nimport React from \"react\";\n\nexport function EntityCustomViewsSelectDialog({ open, onClose }: { open: boolean, onClose: (selectedViewKey?: string) => void }) {\n    const {\n        entityViews,\n    } = useCustomizationController();\n\n    return <Dialog\n        maxWidth={\"md\"}\n        open={open}>\n        <DialogContent className={\"flex flex-col gap-4\"}>\n            <Typography variant={\"h6\"}>\n                Select view\n            </Typography>\n            {entityViews?.map((view) => {\n                return <Button\n                    key={view.key}\n                    onClick={() => onClose(view.key)}\n                    fullWidth\n                    variant={\"text\"}\n                >\n                    {view.name} ({view.key})\n                </Button>;\n            })}\n            {(entityViews ?? []).length === 0 &&\n                <Typography variant={\"body2\"}>\n                    No custom views defined\n                </Typography>\n            }\n        </DialogContent>\n        <DialogActions>\n            <Button variant={\"outlined\"} onClick={() => onClose()}>Cancel</Button>\n        </DialogActions>\n    </Dialog>\n}\n","import React from \"react\";\nimport {\n    DeleteConfirmationDialog,\n    EntityCollection,\n    EntityCustomView,\n    resolveEntityView,\n    useCustomizationController,\n    User\n} from \"@firecms/core\";\nimport {\n    AddIcon,\n    Alert,\n    Button,\n    Container,\n    DeleteIcon,\n    IconButton,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableRow,\n    Tooltip,\n    Typography,\n} from \"@firecms/ui\";\nimport { CollectionEditorDialog } from \"./CollectionEditorDialog\";\nimport { CollectionsConfigController } from \"../../types/config_controller\";\nimport { PersistedCollection } from \"../../types/persisted_collection\";\nimport { CollectionInference } from \"../../types/collection_inference\";\nimport { EntityCustomViewsSelectDialog } from \"./EntityCustomViewsSelectDialog\";\nimport { useFormex } from \"@firecms/formex\";\n\nexport function SubcollectionsEditTab({\n                                          collection,\n                                          parentCollection,\n                                          configController,\n                                          collectionInference,\n                                          getUser,\n                                          parentCollectionIds\n                                      }: {\n    collection: PersistedCollection,\n    parentCollection?: EntityCollection,\n    configController: CollectionsConfigController;\n    collectionInference?: CollectionInference;\n    getUser?: (uid: string) => User | null;\n    parentCollectionIds?: string[];\n}) {\n\n    const { entityViews: contextEntityViews } = useCustomizationController();\n\n    const [subcollectionToDelete, setSubcollectionToDelete] = React.useState<string | undefined>();\n    const [addEntityViewDialogOpen, setAddEntityViewDialogOpen] = React.useState<boolean>(false);\n    const [viewToDelete, setViewToDelete] = React.useState<string | undefined>();\n\n    const [currentDialog, setCurrentDialog] = React.useState<{\n        isNewCollection: boolean,\n        editedCollectionId?: string,\n    }>();\n\n    const {\n        values,\n        setFieldValue,\n    } = useFormex<EntityCollection>();\n\n    const subcollections = collection.subcollections ?? [];\n    const resolvedEntityViews = values.entityViews?.filter(e => typeof e === \"string\")\n        .map(e => resolveEntityView(e, contextEntityViews))\n        .filter(Boolean) as EntityCustomView[] ?? [];\n    const hardCodedEntityViews = collection.entityViews?.filter(e => typeof e !== \"string\") as EntityCustomView[] ?? [];\n    const totalEntityViews = resolvedEntityViews.length + hardCodedEntityViews.length;\n\n    return (\n        <div className={\"overflow-auto my-auto\"}>\n            <Container maxWidth={\"2xl\"} className={\"flex flex-col gap-4 p-8 m-auto\"}>\n                <div className={\"flex  flex-col gap-16\"}>\n\n                    <div className={\"flex-grow flex flex-col gap-4 items-start\"}>\n                        <Typography variant={\"h5\"}>\n                            Subcollections of {values.name}\n                        </Typography>\n\n                        <Paper className={\"flex flex-col gap-4 p-2 w-full\"}>\n                            {subcollections && subcollections.length > 0 && <Table>\n                                <TableBody>\n                                    {subcollections.map((subcollection) => (\n                                        <TableRow key={subcollection.path}\n                                                  onClick={() => setCurrentDialog({\n                                                      isNewCollection: false,\n                                                      editedCollectionId: subcollection.id\n                                                  })}>\n                                            <TableCell\n                                                align=\"left\">\n                                                <Typography variant={\"subtitle2\"} className={\"flex-grow\"}>\n                                                    {subcollection.name}\n                                                </Typography>\n                                            </TableCell>\n                                            <TableCell\n                                                align=\"right\">\n                                                <Tooltip title={\"Remove\"}>\n                                                    <IconButton size=\"small\"\n                                                                onClick={(e) => {\n                                                                    e.preventDefault();\n                                                                    e.stopPropagation();\n                                                                    setSubcollectionToDelete(subcollection.id);\n                                                                }}\n                                                                color=\"inherit\">\n                                                        <DeleteIcon size={\"small\"}/>\n                                                    </IconButton>\n                                                </Tooltip>\n                                            </TableCell>\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>}\n\n                            <Button\n                                onClick={() => {\n                                    setCurrentDialog({\n                                        isNewCollection: true\n                                    });\n                                }}\n                                variant={\"text\"}\n                                startIcon={<AddIcon/>}>\n                                Add subcollection\n                            </Button>\n\n                        </Paper>\n\n                    </div>\n\n                    <div className={\"flex-grow  flex flex-col gap-4 items-start\"}>\n                        <Typography variant={\"h5\"}>\n                            Custom views\n                        </Typography>\n\n                        {totalEntityViews === 0 &&\n                            <Alert action={<Button variant=\"text\"\n                                                   size={\"small\"}\n                                                   href={\"https://firecms.co/docs/customization_quickstart\"}\n                                                   component={\"a\"}\n                                                   rel=\"noopener noreferrer\"\n                                                   target=\"_blank\">More info</Button>}>\n                                Define your own custom views by uploading them with the CLI.\n                            </Alert>\n                        }\n\n                        {<>\n                            <Paper className={\"flex flex-col gap-4 p-2 w-full\"}>\n                                <Table>\n                                    <TableBody>\n                                        {resolvedEntityViews.map((view) => (\n                                            <TableRow key={view.key}>\n                                                <TableCell\n                                                    align=\"left\">\n                                                    <Typography variant={\"subtitle2\"} className={\"flex-grow\"}>\n                                                        {view.name}\n                                                    </Typography>\n                                                </TableCell>\n                                                <TableCell\n                                                    align=\"right\">\n                                                    <Tooltip title={\"Remove\"}>\n                                                        <IconButton size=\"small\"\n                                                                    onClick={(e) => {\n                                                                        e.preventDefault();\n                                                                        e.stopPropagation();\n                                                                        setViewToDelete(view.key);\n                                                                    }}\n                                                                    color=\"inherit\">\n                                                            <DeleteIcon size={\"small\"}/>\n                                                        </IconButton>\n                                                    </Tooltip>\n                                                </TableCell>\n                                            </TableRow>\n                                        ))}\n                                        {hardCodedEntityViews.map((view) => (\n                                            <TableRow key={view.key}>\n                                                <TableCell\n                                                    align=\"left\">\n                                                    <Typography variant={\"subtitle2\"} className={\"flex-grow\"}>\n                                                        {view.name}\n                                                    </Typography>\n                                                    <Typography variant={\"caption\"} className={\"flex-grow\"}>\n                                                        This view is defined in code with\n                                                        key <code>{view.key}</code>\n                                                    </Typography>\n                                                </TableCell>\n                                            </TableRow>\n                                        ))}\n                                    </TableBody>\n                                </Table>\n\n                                <Button\n                                    onClick={() => {\n                                        setAddEntityViewDialogOpen(true);\n                                    }}\n                                    variant={\"text\"}\n                                    startIcon={<AddIcon/>}>\n                                    Add custom entity view\n                                </Button>\n                            </Paper>\n\n                        </>}\n\n\n                    </div>\n\n                </div>\n            </Container>\n\n            <div style={{ height: \"52px\" }}/>\n\n            {subcollectionToDelete &&\n                <DeleteConfirmationDialog open={Boolean(subcollectionToDelete)}\n                                          onAccept={() => {\n                                              const props = {\n                                                  id: subcollectionToDelete,\n                                                  parentCollectionIds: [...(parentCollectionIds ?? []), collection.id]\n                                              };\n                                              console.debug(\"Deleting subcollection\", props)\n                                              configController.deleteCollection(props);\n                                              setSubcollectionToDelete(undefined);\n                                          }}\n                                          onCancel={() => setSubcollectionToDelete(undefined)}\n                                          title={<>Delete this subcollection?</>}\n                                          body={<> This will <b>not\n                                              delete any data</b>, only\n                                              the collection in the CMS</>}/>}\n            {viewToDelete &&\n                <DeleteConfirmationDialog open={Boolean(viewToDelete)}\n                                          onAccept={() => {\n                                              setFieldValue(\"entityViews\", values.entityViews?.filter(e => e !== viewToDelete));\n                                              setViewToDelete(undefined);\n                                          }}\n                                          onCancel={() => setViewToDelete(undefined)}\n                                          title={<>Remove this view?</>}\n                                          body={<>This will <b>not\n                                              delete any data</b>, only\n                                              the view in the CMS</>}/>}\n\n            <CollectionEditorDialog\n                open={Boolean(currentDialog)}\n                configController={configController}\n                parentCollection={collection}\n                collectionInference={collectionInference}\n                parentCollectionIds={[...parentCollectionIds ?? [], values.id]}\n                isNewCollection={false}\n                {...currentDialog}\n                getUser={getUser}\n                handleClose={() => {\n                    setCurrentDialog(undefined);\n                }}/>\n\n            <EntityCustomViewsSelectDialog\n                open={addEntityViewDialogOpen}\n                onClose={(selectedViewKey) => {\n                    if (selectedViewKey) {\n                        setFieldValue(\"entityViews\", [...(values.entityViews ?? []), selectedViewKey]);\n                    }\n                    setAddEntityViewDialogOpen(false);\n                }}/>\n        </div>\n    );\n}\n","import { EntityCollection, makePropertiesEditable } from \"@firecms/core\";\n\nexport const productsCollectionTemplate: EntityCollection = {\n    id: \"products\",\n    path: \"products\",\n    name: \"Products\",\n    singularName: \"Product\",\n    icon: \"shopping_cart\",\n    description: \"List of the products currently sold in your shop\",\n    properties: makePropertiesEditable({\n        name: {\n            dataType: \"string\",\n            name: \"Name\",\n            description: \"Name of this product\",\n            validation: {\n                required: true\n            }\n        },\n        brand: {\n            dataType: \"string\",\n            name: \"Brand\",\n            validation: {\n                required: true\n            }\n        },\n        description: {\n            dataType: \"string\",\n            name: \"Description\",\n            description: \"Description of this product, supports markdown\",\n            markdown: true\n        },\n        main_image: {\n            dataType: \"string\",\n            name: \"Image\",\n            storage: {\n                storagePath: \"images\",\n                acceptedFiles: [\"image/*\"],\n            },\n            description: \"Upload field for images\"\n        },\n        available: {\n            dataType: \"boolean\",\n            name: \"Available\",\n            columnWidth: 100,\n            description: \"Is this product available in the website\"\n        },\n        price: {\n            dataType: \"number\",\n            name: \"Price\",\n            validation: {\n                requiredMessage: \"You must set a positive price\",\n                min: 0\n            }\n        },\n        images: {\n            dataType: \"array\",\n            name: \"Images\",\n            hideFromCollection: true,\n            of: {\n                dataType: \"string\",\n                storage: {\n                    storagePath: \"images\",\n                    acceptedFiles: [\"image/*\"]\n                }\n            }\n        },\n        related_products: {\n            dataType: \"array\",\n            name: \"Related products\",\n            description: \"Products related to this one\",\n            of: {\n                dataType: \"reference\",\n                path: \"products\"\n            }\n        },\n        metadata: {\n            name: \"Metadata\",\n            description: \"This is an example of a map property\",\n            dataType: \"map\",\n            keyValue: true\n        },\n        added_on: {\n            dataType: \"date\",\n            name: \"Added on\",\n            autoValue: \"on_create\"\n        }\n    })\n};\n","import { EntityCollection, makePropertiesEditable } from \"@firecms/core\";\n\nexport const blogCollectionTemplate:EntityCollection = {\n    id: \"blog\",\n    path: \"blog\",\n    name: \"Blog\",\n    singularName: \"Blog entry\",\n    icon: \"article\",\n    description: \"A collection of blog entries\",\n    defaultSize: \"l\",\n    properties: makePropertiesEditable({\n        name: {\n            name: \"Name\",\n            validation: { required: true },\n            dataType: \"string\"\n        },\n        header_image: {\n            name: \"Header image\",\n            dataType: \"string\",\n            storage: {\n                storagePath: \"images\",\n                acceptedFiles: [\"image/*\"],\n                metadata: {\n                    cacheControl: \"max-age=1000000\"\n                }\n            }\n        },\n        content: {\n            name: \"Content\",\n            description: \"Content blocks for the blog entry\",\n            validation: { required: true },\n            dataType: \"array\",\n            oneOf: {\n                typeField: \"type\",\n                valueField: \"value\",\n                properties: {\n                    text: {\n                        dataType: \"string\",\n                        name: \"Text\",\n                        markdown: true\n                    },\n                    quote: {\n                        dataType: \"string\",\n                        name: \"Quote\",\n                        multiline: true\n                    },\n                    images: {\n                        name: \"Images\",\n                        dataType: \"array\",\n                        of: {\n                            dataType: \"string\",\n                            storage: {\n                                storagePath: \"images\",\n                                acceptedFiles: [\"image/*\"],\n                                metadata: {\n                                    cacheControl: \"max-age=1000000\"\n                                }\n                            }\n                        },\n                        description: \"This fields allows uploading multiple images at once and reordering\"\n                    },\n                    products: {\n                        name: \"Products\",\n                        dataType: \"array\",\n                        of: {\n                            dataType: \"reference\",\n                            path: \"products\",\n                            previewProperties: [\"name\", \"main_image\"]\n                        }\n                    }\n                },\n                propertiesOrder: [\"text\", \"quote\", \"images\", \"products\"]\n            }\n        },\n        created_on: {\n            name: \"Created on\",\n            dataType: \"date\",\n            autoValue: \"on_create\"\n        },\n        status: {\n            name: \"Status\",\n            validation: { required: true },\n            dataType: \"string\",\n            enumValues: {\n                published: {\n                    id: \"published\",\n                    label: \"Published\",\n                },\n                draft: \"Draft\"\n            },\n            defaultValue: \"draft\"\n        },\n        publish_date: {\n            name: \"Publish date\",\n            dataType: \"date\",\n            clearable: true\n        },\n        reviewed: {\n            name: \"Reviewed\",\n            dataType: \"boolean\"\n        },\n        tags: {\n            name: \"Tags\",\n            description: \"Example of generic array\",\n            dataType: \"array\",\n            of: {\n                dataType: \"string\",\n                previewAsTag: true\n            }\n        }\n    }),\n    initialFilter: {\n        status: [\"==\", \"published\"]\n    }\n};\n","import { EntityCollection, makePropertiesEditable } from \"@firecms/core\";\n\nexport const usersCollectionTemplate: EntityCollection = {\n    id: \"users\",\n    path: \"users\",\n    name: \"Users\",\n    singularName: \"User\",\n    description: \"Registered users in the app/web\",\n    icon: \"person\",\n    properties: makePropertiesEditable({\n        displayName: {\n            name: \"Display name\",\n            dataType: \"string\"\n        },\n        email: {\n            name: \"Email\",\n            dataType: \"string\",\n            email: true\n        },\n        emailVerified: {\n            name: \"Email verified\",\n            dataType: \"boolean\"\n        },\n        phone: {\n            name: \"Phone\",\n            dataType: \"string\"\n        },\n        favourite_products: {\n            name: \"Favourite products\",\n            dataType: \"array\",\n            of: {\n                dataType: \"reference\",\n                path: \"products\"\n            }\n        },\n        photoURL: {\n            name: \"Photo URL\",\n            dataType: \"string\",\n            url: \"image\"\n        }\n    }),\n};\n","import { EntityCollection } from \"@firecms/core\";\n\nexport const pagesCollectionTemplate: EntityCollection = {\n    id: \"pages\",\n    path: \"pages\",\n    name: \"Pages\",\n    singularName: \"Page\",\n    icon: \"insert_drive_file\",\n    description: \"List of website pages that can be edited here\",\n    properties: {\n        title: {\n            dataType: \"string\",\n            name: \"Page Title\",\n            validation: { required: true }\n        },\n        slug: {\n            dataType: \"string\",\n            name: \"URL Slug\",\n            validation: {\n                required: true,\n                unique: true,\n                matches: /^[a-z0-9]+(?:-[a-z0-9]+)*$/,\n                matchesMessage: \"Must be lowercase, alphanumeric, and hyphenated\"\n            }\n        },\n        hero_section: {\n            dataType: \"map\",\n            name: \"Hero Section\",\n            properties: {\n                headline: {\n                    dataType: \"string\",\n                    name: \"Headline\",\n                    validation: { required: true }\n                },\n                subhead: {\n                    dataType: \"string\",\n                    name: \"Subheadline\"\n                },\n                background_image: {\n                    dataType: \"string\",\n                    name: \"Background Image\",\n                    storage: {\n                        storagePath: \"page_hero/images\",\n                        acceptedFiles: [\"image/*\"],\n                    }\n                },\n                call_to_action: {\n                    dataType: \"string\",\n                    name: \"Call to Action\"\n                },\n                call_to_action_link: {\n                    dataType: \"string\",\n                    name: \"CTA Link\",\n                    url: true\n                }\n            }\n        },\n        content: {\n            dataType: \"array\",\n            name: \"Content\",\n            oneOf: {\n                properties: {\n                    section: {\n                        dataType: \"map\",\n                        name: \"Section\",\n                        properties: {\n                            title: {\n                                dataType: \"string\",\n                                name: \"Section Title\",\n                                validation: { required: true }\n                            },\n                            content: {\n                                dataType: \"string\",\n                                name: \"Section Content\",\n                                markdown: true\n                            },\n                            image: {\n                                dataType: \"string\",\n                                name: \"Section Image\",\n                                storage: {\n                                    storagePath: \"page_sections/images\",\n                                    acceptedFiles: [\"image/*\"]\n                                }\n                            },\n                            link: {\n                                dataType: \"string\",\n                                name: \"Section Link\",\n                                url: true\n                            }\n                        }\n                    },\n                    image: {\n                        dataType: \"string\",\n                        name: \"Image\",\n                        storage: {\n                            storagePath: \"page_sections/images\",\n                            acceptedFiles: [\"image/*\"]\n                        }\n                    },\n                    slider: {\n                        dataType: \"array\",\n                        name: \"Slider\",\n                        of: {\n                            dataType: \"map\",\n                            properties: {\n                                title: {\n                                    dataType: \"string\",\n                                    name: \"Title\",\n                                    validation: { required: true }\n                                },\n                                image: {\n                                    dataType: \"string\",\n                                    storage: {\n                                        storagePath: \"page_sections/images\",\n                                        acceptedFiles: [\"image/*\"]\n                                    }\n                                }\n                            }\n                        }\n                    },\n                }\n            }\n        },\n        sidebar: {\n            dataType: \"map\",\n            name: \"Sidebar\",\n            properties: {\n                title: {\n                    dataType: \"string\",\n                    name: \"Sidebar Title\",\n                    validation: { required: false }\n                },\n                content: {\n                    dataType: \"string\",\n                    name: \"Sidebar Content\",\n                    markdown: true\n                }\n            }\n        },\n        seo_metadata: {\n            dataType: \"map\",\n            name: \"SEO Metadata\",\n            properties: {\n                meta_title: {\n                    dataType: \"string\",\n                    name: \"Meta Title\"\n                },\n                meta_description: {\n                    dataType: \"string\",\n                    name: \"Meta Description\"\n                },\n                focus_keywords: {\n                    dataType: \"array\",\n                    name: \"Focus Keywords\",\n                    of: {\n                        dataType: \"string\"\n                    }\n                }\n            }\n        },\n        footer_override: {\n            dataType: \"string\",\n            name: \"Footer Override\",\n            markdown: true\n        },\n        publish_date: {\n            dataType: \"date\",\n            name: \"Publish Date\",\n            validation: { required: true }\n        },\n        last_updated: {\n            dataType: \"date\",\n            name: \"Last Updated\",\n            autoValue: \"on_update\"\n        },\n        is_published: {\n            dataType: \"boolean\",\n            name: \"Is Published\",\n            columnWidth: 100,\n            description: \"Should this page be live on the site?\"\n        },\n        author_uid: {\n            dataType: \"reference\",\n            name: \"Author\",\n            path: \"users\"\n        }\n    }\n};\n","import React, { useEffect, useState } from \"react\";\nimport { EntityCollection, unslugify, } from \"@firecms/core\";\nimport { Button, Card, Chip, CircularProgress, cn, Container, Icon, Tooltip, Typography, } from \"@firecms/ui\";\n\nimport { productsCollectionTemplate } from \"./templates/products_template\";\nimport { blogCollectionTemplate } from \"./templates/blog_template\";\nimport { usersCollectionTemplate } from \"./templates/users_template\";\nimport { ImportFileUpload } from \"@firecms/data_import_export\";\nimport { pagesCollectionTemplate } from \"./templates/pages_template\";\nimport { useFormex } from \"@firecms/formex\";\n\nexport function CollectionEditorWelcomeView({\n                                                path,\n                                                pathSuggestions,\n                                                parentCollection,\n                                                onContinue,\n                                                existingCollectionPaths\n                                            }: {\n    path: string;\n    pathSuggestions?: (path: string) => Promise<string[]>;\n    parentCollection?: EntityCollection;\n    onContinue: (importData?: object[], propertiesOrder?: string[]) => void;\n    existingCollectionPaths?: string[];\n}) {\n\n    const [loadingPathSuggestions, setLoadingPathSuggestions] = useState(false);\n    const [filteredPathSuggestions, setFilteredPathSuggestions] = useState<string[] | undefined>();\n    useEffect(() => {\n        if (pathSuggestions && existingCollectionPaths) {\n            setLoadingPathSuggestions(true);\n            pathSuggestions(path)\n                .then(suggestions => {\n                    const filteredSuggestions = suggestions.filter(s => !(existingCollectionPaths ?? []).find(c => c.trim().toLowerCase() === s.trim().toLowerCase()));\n                    setFilteredPathSuggestions(filteredSuggestions);\n                })\n                .finally(() => setLoadingPathSuggestions(false));\n        }\n    }, [existingCollectionPaths, path, pathSuggestions]);\n\n    // const {\n    //     values,\n    //     setFieldValue,\n    //     setValues,\n    //     handleChange,\n    //     touched,\n    //     errors,\n    //     setFieldTouched,\n    //     isSubmitting,\n    //     submitCount\n    // } = useFormex<EntityCollection>();\n\n    const {\n        values,\n        setFieldValue,\n        setValues,\n        submitCount\n    } = useFormex<EntityCollection>();\n\n    return (\n        <div className={\"overflow-auto my-auto\"}>\n            <Container maxWidth={\"4xl\"} className={\"flex flex-col gap-4 p-8 m-auto\"}>\n\n                <div\n                    className=\"flex flex-row py-2 pt-3 items-center\">\n                    <Typography variant={\"h4\"} className={\"flex-grow\"}>\n                        New collection\n                    </Typography>\n                </div>\n\n                {parentCollection && <Chip colorScheme={\"tealDarker\"}>\n                    <Typography variant={\"caption\"}>\n                        This is a subcollection of <b>{parentCollection.name}</b>\n                    </Typography>\n                </Chip>}\n\n                <div className={\"my-2\"}>\n                    <Typography variant={\"caption\"}\n                                color={\"secondary\"}>\n                        ● Use one of the existing paths in your database:\n                    </Typography>\n                    <div className={\"flex flex-wrap gap-x-2 gap-y-1 items-center my-2 min-h-7\"}>\n\n                        {loadingPathSuggestions && !filteredPathSuggestions && <CircularProgress size={\"small\"}/>}\n\n                        {filteredPathSuggestions?.map((suggestion, index) => (\n                            <Chip key={suggestion}\n                                  colorScheme={\"cyanLighter\"}\n                                  onClick={() => {\n                                      setFieldValue(\"name\", unslugify(suggestion));\n                                      setFieldValue(\"id\", suggestion);\n                                      setFieldValue(\"path\", suggestion);\n                                      setFieldValue(\"properties\", undefined);\n                                      onContinue();\n                                  }}\n                                  size=\"small\">\n                                {suggestion}\n                            </Chip>\n                        ))}\n\n                        {!loadingPathSuggestions && (filteredPathSuggestions ?? [])?.length === 0 &&\n                            <Typography variant={\"caption\"}>\n                                No suggestions\n                            </Typography>\n                        }\n\n                    </div>\n\n                </div>\n\n                <div className={\"my-2\"}>\n                    <Typography variant={\"caption\"}\n                                color={\"secondary\"}>\n                        ● Select a template:\n                    </Typography>\n\n                    <div className={\"flex gap-4\"}>\n                        <TemplateButton title={\"Products\"}\n                                        subtitle={\"A collection of products with images, prices and stock\"}\n                                        icon={<Icon size={\"small\"} iconKey={productsCollectionTemplate.icon!}/>}\n                                        onClick={() => {\n                                            setValues(productsCollectionTemplate);\n                                            onContinue();\n                                        }}/>\n                        <TemplateButton title={\"Users\"}\n                                        subtitle={\"A collection of users with emails, names and roles\"}\n                                        icon={<Icon size={\"small\"} iconKey={usersCollectionTemplate.icon!}/>}\n                                        onClick={() => {\n                                            setValues(usersCollectionTemplate);\n                                            onContinue();\n                                        }}/>\n                        <TemplateButton title={\"Blog posts\"}\n                                        subtitle={\"A collection of blog posts with images, authors and complex content\"}\n                                        icon={<Icon size={\"small\"} iconKey={blogCollectionTemplate.icon!}/>}\n                                        onClick={() => {\n                                            setValues(blogCollectionTemplate);\n                                            onContinue();\n                                        }}/>\n                        <TemplateButton title={\"Pages\"}\n                                        subtitle={\"A collection of pages with images, authors and complex content\"}\n                                        icon={<Icon size={\"small\"} iconKey={pagesCollectionTemplate.icon!}/>}\n                                        onClick={() => {\n                                            setValues(pagesCollectionTemplate);\n                                            onContinue();\n                                        }}/>\n                    </div>\n\n                </div>\n\n                {!parentCollection && <div>\n\n                    <Typography variant={\"caption\"}\n                                color={\"secondary\"}\n                                className={\"mb-2\"}>\n                        ● Create a collection from a file (csv, json, xls, xslx...)\n                    </Typography>\n\n                    <ImportFileUpload onDataAdded={(data, propertiesOrder) => onContinue(data, propertiesOrder)}/>\n\n                </div>}\n\n                <div>\n\n                    <Button variant={\"text\"} onClick={() => onContinue()} className={\"my-2\"}>\n                        Continue from scratch\n                    </Button>\n                </div>\n\n                {/*<div style={{ height: \"52px\" }}/>*/}\n\n            </Container>\n        </div>\n    );\n}\n\nexport function TemplateButton({\n                                   title,\n                                   subtitle,\n                                   icon,\n                                   onClick\n                               }: {\n    title: string,\n    icon: React.ReactNode,\n    subtitle: string,\n    onClick?: () => void\n}) {\n\n    return (\n        <Tooltip title={subtitle}>\n            <Card\n                onClick={onClick}\n                className={cn(\n                    \"my-2 rounded-md border mx-0 p-6 px-4 focus:outline-none transition ease-in-out duration-150 flex flex-row gap-4 items-center\",\n                    \"text-gray-700 dark:text-slate-300\",\n                    \"hover:border-primary-dark hover:text-primary-dark dark:hover:text-primary focus:ring-primary hover:ring-1 hover:ring-primary\",\n                    \"border-gray-400 dark:border-gray-600 \"\n                )}\n            >\n                {icon}\n                <div className={\"flex flex-col items-start\"}>\n\n                    <Typography variant={\"subtitle1\"}>\n                        {title}\n                    </Typography>\n                    {/*<Typography>*/}\n                    {/*    {subtitle}*/}\n                    {/*</Typography>*/}\n\n                </div>\n            </Card>\n        </Tooltip>\n    );\n\n}\n","import {\n    DataNewPropertiesMapping,\n    getInferenceType,\n    ImportConfig,\n    ImportNewPropertyFieldPreview\n} from \"@firecms/data_import_export\";\nimport { getIn, useFormex } from \"@firecms/formex\";\n\nimport { getFieldConfig, getFieldId, Properties, Property, PropertyConfig, PropertyConfigBadge, } from \"@firecms/core\";\nimport { Container, Select, Tooltip, Typography } from \"@firecms/ui\";\nimport React, { useState } from \"react\";\nimport { OnPropertyChangedParams, PropertyFormDialog, PropertyWithId } from \"../PropertyEditView\";\nimport { getFullId, idToPropertiesPath, namespaceToPropertiesOrderPath } from \"../util\";\nimport { PersistedCollection } from \"../../../types/persisted_collection\";\nimport { updatePropertyFromWidget } from \"../utils/update_property_for_widget\";\nimport { PropertySelectItem } from \"../PropertySelectItem\";\nimport { supportedFields } from \"../utils/supported_fields\";\nimport { buildPropertyFromData } from \"@firecms/schema_inference\";\n\nexport function CollectionEditorImportMapping({\n                                                  importConfig,\n                                                  propertyConfigs,\n                                                  collectionEditable\n                                              }:\n                                                  {\n                                                      importConfig: ImportConfig,\n                                                      propertyConfigs: Record<string, PropertyConfig>,\n                                                      collectionEditable: boolean\n                                                  }) {\n\n    // const {\n    //     values,\n    //     setFieldValue,\n    //     setFieldTouched,\n    //     setValues,\n    //     submitCount\n    // } = useFormex();\n\n    const {\n        setFieldValue,\n        setFieldTouched,\n        values\n    } = useFormex<PersistedCollection>();\n    const [selectedProperty, setSelectedProperty] = useState<PropertyWithId | undefined>(undefined);\n\n    const currentPropertiesOrderRef = React.useRef<{\n        [key: string]: string[]\n    }>(values.propertiesOrder ? { \"\": values.propertiesOrder } : {});\n\n    const propertyKey = selectedProperty ? selectedProperty.id : undefined;\n    const property = selectedProperty || undefined;\n\n    const onPropertyChanged = ({\n                                   id,\n                                   property,\n                                   previousId,\n                                   namespace\n                               }: OnPropertyChangedParams) => {\n\n        const fullId = id ? getFullId(id, namespace) : undefined;\n        const propertyPath = fullId ? idToPropertiesPath(fullId) : undefined;\n\n        // setSelectedProperty(property);\n        const getCurrentPropertiesOrder = (namespace?: string) => {\n            if (!namespace) return currentPropertiesOrderRef.current[\"\"];\n            return currentPropertiesOrderRef.current[namespace] ?? getIn(values, namespaceToPropertiesOrderPath(namespace));\n        }\n\n        const updatePropertiesOrder = (newPropertiesOrder: string[], namespace?: string) => {\n            const propertiesOrderPath = namespaceToPropertiesOrderPath(namespace);\n\n            setFieldValue(propertiesOrderPath, newPropertiesOrder, false);\n            currentPropertiesOrderRef.current[namespace ?? \"\"] = newPropertiesOrder;\n\n        };\n\n        // If the id has changed we need to a little cleanup\n        if (previousId && previousId !== id) {\n            const previousFullId = getFullId(previousId, namespace);\n            const previousPropertyPath = idToPropertiesPath(previousFullId);\n\n            const currentPropertiesOrder = getCurrentPropertiesOrder(namespace);\n\n            // replace previousId with id in propertiesOrder\n            const newPropertiesOrder = currentPropertiesOrder\n                .map((p) => p === previousId ? id : p)\n                .filter((p) => p !== undefined) as string[];\n            updatePropertiesOrder(newPropertiesOrder, namespace);\n\n            // replace previousId with id in headersMapping\n            const newHeadersMapping = { ...importConfig.headersMapping };\n            Object.keys(newHeadersMapping).forEach((key) => {\n                if (newHeadersMapping[key] === previousId) {\n                    newHeadersMapping[key] = id ?? \"\";\n                }\n            });\n            importConfig.setHeadersMapping(newHeadersMapping);\n\n            // if (id) {\n            //     setSelectedPropertyIndex(newPropertiesOrder.indexOf(id));\n            //     setSelectedPropertyKey(id);\n            // }\n            setFieldValue(previousPropertyPath, undefined, false);\n            setFieldTouched(previousPropertyPath, false, false);\n        }\n\n        if (propertyPath) {\n            setFieldValue(propertyPath, property, false);\n            setFieldTouched(propertyPath, true, false);\n        }\n    };\n    const onPropertyTypeChanged = async ({\n                                             id,\n                                             importKey,\n                                             property,\n                                             namespace\n                                         }: OnPropertyChangedParams & {\n        importKey: string\n    }) => {\n\n        const fullId = id ? getFullId(id, namespace) : undefined;\n        const propertyPath = fullId ? idToPropertiesPath(fullId) : undefined;\n\n        // we try to infer the rest of the properties of a property, from the type and the data\n        const propertyData = importConfig.importData.map((d) => getIn(d, importKey));\n        const inferredNewProperty = {\n            ...buildPropertyFromData(propertyData, property, getInferenceType),\n            editable: true\n        };\n\n        if (propertyPath) {\n            if (inferredNewProperty) {\n                setFieldValue(propertyPath, inferredNewProperty, false);\n            } else {\n                setFieldValue(propertyPath, property, false);\n            }\n            setFieldTouched(propertyPath, true, false);\n        }\n    };\n\n    return (\n\n        <div className={\"overflow-auto my-auto\"}>\n            <Container maxWidth={\"6xl\"} className={\"flex flex-col gap-4 p-8 m-auto\"}>\n\n                <Typography variant=\"h6\" className={\"my-4 ml-3.5\"}>Data property mapping</Typography>\n\n                <DataNewPropertiesMapping importConfig={importConfig}\n                                          destinationProperties={values.properties as Properties}\n                                          buildPropertyView={({\n                                                                  property,\n                                                                  propertyKey,\n                                                                  importKey,\n                                                                  isIdColumn\n                                                              }) => {\n                                              if (isIdColumn) {\n                                                  return <Typography> This column will be used as ID</Typography>\n                                              }\n\n                                              return <ImportNewPropertyFieldPreview\n                                                  property={property}\n                                                  propertyKey={propertyKey}\n                                                  onPropertyNameChanged={(propertyKey: string, value: string) => setFieldValue(`properties.${propertyKey}.name`, value, false)}\n                                                  onEditClick={() => {\n                                                      if (!propertyKey || !property) return;\n                                                      setSelectedProperty({\n                                                          ...property,\n                                                          id: propertyKey,\n                                                          editable: true\n                                                      });\n                                                  }}\n                                                  propertyTypeView={<PropertySelect property={property}\n                                                                                    disabled={false}\n                                                                                    onPropertyChanged={(props) => onPropertyTypeChanged({\n                                                                                        ...props,\n                                                                                        importKey\n                                                                                    })}\n                                                                                    propertyKey={propertyKey}\n                                                                                    propertyConfigs={propertyConfigs}/>}\n                                              />;\n                                          }}/>\n            </Container>\n\n            <PropertyFormDialog\n                open={selectedProperty !== undefined}\n                propertyKey={propertyKey}\n                property={property}\n                inArray={false}\n                autoUpdateId={false}\n                onPropertyChanged={onPropertyChanged}\n                allowDataInference={false}\n                collectionEditable={collectionEditable}\n                onOkClicked={() => {\n                    setSelectedProperty(undefined);\n                }}\n                onCancel={() => {\n                    setSelectedProperty(undefined);\n                }}\n                autoOpenTypeSelect={false}\n                existingProperty={false}\n                propertyConfigs={propertyConfigs}/>\n\n            <div style={{ height: \"52px\" }}/>\n        </div>\n    );\n\n}\n\nfunction PropertySelect({\n                            property,\n                            onPropertyChanged,\n                            propertyKey,\n                            propertyConfigs,\n                            disabled\n                        }: {\n    property: Property | null,\n    propertyKey: string | null,\n    onPropertyChanged: ({\n                            id,\n                            property,\n                            previousId,\n                            namespace\n                        }: OnPropertyChangedParams) => void,\n    propertyConfigs: Record<string, PropertyConfig>,\n    disabled?: boolean\n}) {\n\n    const fieldId = property ? getFieldId(property) : null;\n    const widget = property ? getFieldConfig(property, propertyConfigs) : null;\n\n    const [selectOpen, setSelectOpen] = useState(false);\n\n    return <Tooltip title={property && widget ? `${widget?.name} - ${property.dataType}` : undefined}\n                    open={selectOpen ? false : undefined}>\n        <Select\n            open={selectOpen}\n            onOpenChange={setSelectOpen}\n            invisible={true}\n            className={\"w-full\"}\n            disabled={disabled}\n            error={!widget}\n            value={fieldId ?? \"\"}\n            placeholder={\"Select a property widget\"}\n            position={\"item-aligned\"}\n            renderValue={(value) => {\n                if (!widget) return null;\n                return <PropertyConfigBadge propertyConfig={widget}/>\n            }}\n            onValueChange={(newSelectedWidgetId) => {\n                const newProperty = updatePropertyFromWidget(property, newSelectedWidgetId, propertyConfigs)\n                if (!propertyKey) return;\n                onPropertyChanged({\n                    id: propertyKey,\n                    property: newProperty,\n                    previousId: propertyKey,\n                    namespace: undefined\n                });\n            }}>\n            {Object.entries(supportedFields).map(([key, widget]) => {\n                return <PropertySelectItem\n                    key={key}\n                    value={key}\n                    optionDisabled={false}\n                    propertyConfig={widget}\n                    existing={false}/>;\n            })\n            }\n        </Select>\n    </Tooltip>;\n}\n","import { convertDataToEntity, ImportConfig } from \"@firecms/data_import_export\";\nimport { CircularProgressCenter, EntityCollectionTable, Properties, useSelectionController } from \"@firecms/core\";\nimport { useEffect, useState } from \"react\";\nimport { Typography } from \"@firecms/ui\";\n\nexport function CollectionEditorImportDataPreview({\n                                                      importConfig,\n                                                      properties,\n                                                      propertiesOrder\n                                                  }: {\n    importConfig: ImportConfig,\n    properties: Properties,\n    propertiesOrder: string[]\n}) {\n\n    const [loading, setLoading] = useState<boolean>(false);\n\n    async function loadEntities() {\n        // const propertiesMapping = getPropertiesMapping(importConfig.originProperties, properties, importConfig.headersMapping);\n        const mappedData = importConfig.importData.map(d => convertDataToEntity(d, importConfig.idColumn, importConfig.headersMapping, properties, \"TEMP_PATH\", importConfig.defaultValues));\n        importConfig.setEntities(mappedData);\n    }\n\n    useEffect(() => {\n        loadEntities().finally(() => setLoading(false));\n    }, []);\n\n    const selectionController = useSelectionController();\n    if (loading)\n        return <CircularProgressCenter/>\n\n    return <EntityCollectionTable\n        title={<div>\n            <Typography variant={\"subtitle2\"}>Imported data preview</Typography>\n            <Typography variant={\"caption\"}>Entities with the same id will be overwritten</Typography>\n        </div>}\n        tableController={{\n            data: importConfig.entities,\n            dataLoading: false,\n            noMoreToLoad: false\n        }}\n        endAdornment={<div className={\"h-12\"}/>}\n        filterable={false}\n        sortable={false}\n        selectionController={selectionController}\n        displayedColumnIds={propertiesOrder.map(p => ({\n            key: p,\n            disabled: false\n        }))}\n        properties={properties}/>\n\n}\n","import { Properties, slugify } from \"@firecms/core\";\nimport { ImportConfig } from \"@firecms/data_import_export\";\n\nexport function cleanPropertiesFromImport(properties: Properties, parentSlug = \"\"): {\n    headersMapping: ImportConfig[\"headersMapping\"],\n    properties: Properties,\n    idColumn?: ImportConfig[\"idColumn\"],\n} {\n\n    const result = Object.keys(properties).reduce((acc, key) => {\n        const property = properties[key];\n        const slug = slugify(key);\n        const fullSlug = parentSlug ? `${parentSlug}.${slug}` : slug;\n\n        if (property.dataType === \"map\" && property.properties) {\n            const slugifiedResult = cleanPropertiesFromImport(property.properties as Properties, fullSlug);\n            return {\n                headersMapping: { ...acc.headersMapping, [key]: fullSlug },\n                properties: {\n                    ...acc.properties,\n                    [slug]: {\n                        ...property,\n                        properties: slugifiedResult.properties,\n                        propertiesOrder: Object.keys(slugifiedResult.properties)\n                    }\n                }\n            }\n        }\n\n        const updatedProperties = {\n            ...acc.properties,\n            [slug]: property\n        } as Properties;\n\n        const headersMapping = { ...acc.headersMapping, [key]: fullSlug } as Record<string, string>;\n\n        return {\n            headersMapping,\n            properties: updatedProperties,\n        }\n    }, { headersMapping: {}, properties: {} });\n\n    const firstKey = Object.keys(result.headersMapping)?.[0];\n    let idColumn: string | undefined;\n    if (firstKey?.includes(\"id\") || firstKey?.includes(\"key\")) {\n        idColumn = firstKey;\n    }\n\n    return {\n        ...result,\n        idColumn\n    };\n}\n","import * as React from \"react\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport {\n    CircularProgressCenter,\n    EntityCollection,\n    ErrorView,\n    isPropertyBuilder,\n    MapProperty,\n    mergeDeep,\n    Properties,\n    PropertiesOrBuilders,\n    Property,\n    PropertyConfig,\n    PropertyOrBuilder,\n    randomString,\n    removeInitialAndTrailingSlashes,\n    removeUndefined,\n    TopNavigationResult,\n    useAuthController,\n    useCustomizationController,\n    useNavigationController,\n    User,\n    useSnackbarController\n} from \"@firecms/core\";\nimport {\n    ArrowBackIcon,\n    Button,\n    cn,\n    coolIconKeys,\n    defaultBorderMixin,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DoneIcon,\n    IconButton,\n    LoadingButton,\n    Tab,\n    Tabs\n} from \"@firecms/ui\";\nimport { YupSchema } from \"./CollectionYupValidation\";\nimport { CollectionDetailsForm } from \"./CollectionDetailsForm\";\nimport { CollectionPropertiesEditorForm } from \"./CollectionPropertiesEditorForm\";\nimport { UnsavedChangesDialog } from \"./UnsavedChangesDialog\";\nimport { SubcollectionsEditTab } from \"./SubcollectionsEditTab\";\nimport { CollectionsConfigController } from \"../../types/config_controller\";\nimport { CollectionEditorWelcomeView } from \"./CollectionEditorWelcomeView\";\nimport { CollectionInference } from \"../../types/collection_inference\";\nimport { getInferenceType, ImportSaveInProgress, useImportConfig } from \"@firecms/data_import_export\";\nimport { buildEntityPropertiesFromData } from \"@firecms/schema_inference\";\nimport { CollectionEditorImportMapping } from \"./import/CollectionEditorImportMapping\";\nimport { CollectionEditorImportDataPreview } from \"./import/CollectionEditorImportDataPreview\";\nimport { cleanPropertiesFromImport } from \"./import/clean_import_data\";\nimport { PersistedCollection } from \"../../types/persisted_collection\";\nimport { Formex, FormexController, useCreateFormex } from \"@firecms/formex\";\nimport { getFullIdPath } from \"./util\";\n\nexport interface CollectionEditorDialogProps {\n    open: boolean;\n    isNewCollection: boolean;\n    initialValues?: {\n        group?: string,\n        path?: string,\n        name?: string,\n    }\n    editedCollectionId?: string;\n    fullPath?: string; // full path of this particular collection, like `products/123/locales`\n    parentCollectionIds?: string[]; // path ids of the parent collection, like [`products`]\n    handleClose: (collection?: EntityCollection) => void;\n    configController: CollectionsConfigController;\n    reservedGroups?: string[];\n    collectionInference?: CollectionInference;\n    extraView?: {\n        View: React.ComponentType<{\n            path: string\n        }>,\n        icon: React.ReactNode\n    };\n    pathSuggestions?: (path?: string) => Promise<string[]>;\n    getUser?: (uid: string) => User | null;\n    getData?: (path: string, parentPaths: string[]) => Promise<object[]>;\n    parentCollection?: PersistedCollection;\n}\n\nexport function CollectionEditorDialog(props: CollectionEditorDialogProps) {\n\n    const open = props.open;\n\n    const [formDirty, setFormDirty] = React.useState<boolean>(false);\n    const [unsavedChangesDialogOpen, setUnsavedChangesDialogOpen] = React.useState<boolean>(false);\n\n    const handleCancel = useCallback(() => {\n        if (!formDirty) {\n            props.handleClose(undefined);\n        } else {\n            setUnsavedChangesDialogOpen(true);\n        }\n    }, [formDirty, props.handleClose]);\n\n    useEffect(() => {\n        if (!open) {\n            setFormDirty(false);\n            setUnsavedChangesDialogOpen(false);\n        }\n    }, [open]);\n\n    return (\n        <Dialog\n            open={open}\n            fullWidth={true}\n            fullHeight={true}\n            scrollable={false}\n            maxWidth={\"7xl\"}\n            onOpenChange={(open) => !open ? handleCancel() : undefined}\n        >\n            {open && <CollectionEditor {...props}\n                                       handleCancel={handleCancel}\n                                       setFormDirty={setFormDirty}/>}\n\n            <UnsavedChangesDialog\n                open={unsavedChangesDialogOpen}\n                handleOk={() => props.handleClose(undefined)}\n                handleCancel={() => setUnsavedChangesDialogOpen(false)}\n                body={\"There are unsaved changes in this collection\"}/>\n\n        </Dialog>\n    );\n}\n\ntype EditorView = \"welcome\"\n    | \"details\"\n    | \"import_data_mapping\"\n    | \"import_data_preview\"\n    | \"import_data_saving\"\n    | \"properties\"\n    | \"loading\"\n    | \"extra_view\"\n    | \"subcollections\";\n\nexport function CollectionEditor(props: CollectionEditorDialogProps & {\n    handleCancel: () => void,\n    setFormDirty: (dirty: boolean) => void\n}) {\n    const { propertyConfigs } = useCustomizationController();\n    const navigation = useNavigationController();\n    const authController = useAuthController();\n\n    const {\n        topLevelNavigation,\n        collections\n    } = navigation;\n\n    const initialValuesProp = props.initialValues;\n    const includeTemplates = !initialValuesProp?.path && (props.parentCollectionIds ?? []).length === 0;\n    const collectionsInThisLevel = (props.parentCollection ? props.parentCollection.subcollections : collections) ?? [];\n    const existingPaths = collectionsInThisLevel.map(col => col.path.trim().toLowerCase());\n    const existingIds = collectionsInThisLevel.map(col => col.id?.trim().toLowerCase()).filter(Boolean) as string[];\n    const [collection, setCollection] = React.useState<PersistedCollection<any> | undefined>();\n    const [initialLoadingCompleted, setInitialLoadingCompleted] = React.useState(false);\n\n    useEffect(() => {\n        try {\n            if (navigation.initialised) {\n                if (props.editedCollectionId) {\n                    setCollection(navigation.getCollectionFromPaths([...(props.parentCollectionIds ?? []), props.editedCollectionId]));\n                } else {\n                    setCollection(undefined);\n                }\n                setInitialLoadingCompleted(true);\n            }\n        } catch (e) {\n            console.error(e);\n        }\n    }, [props.editedCollectionId, props.parentCollectionIds, navigation]);\n\n    if (!topLevelNavigation) {\n        throw Error(\"Internal: Navigation not ready in collection editor\");\n    }\n\n    const {\n        groups\n    }: TopNavigationResult = topLevelNavigation;\n\n    const initialCollection = collection\n        ? {\n            ...collection,\n            id: collection.id ?? collection.path ?? randomString(16)\n        }\n        : undefined;\n\n    const initialValues: PersistedCollection<any> = initialCollection\n        ? applyPropertyConfigs(initialCollection, propertyConfigs)\n        : {\n            id: initialValuesProp?.path ?? randomString(16),\n            path: initialValuesProp?.path ?? \"\",\n            name: initialValuesProp?.name ?? \"\",\n            group: initialValuesProp?.group ?? \"\",\n            properties: {} as PropertiesOrBuilders,\n            propertiesOrder: [],\n            icon: coolIconKeys[Math.floor(Math.random() * coolIconKeys.length)],\n            ownerId: authController.user?.uid ?? \"\"\n        };\n\n    if (!initialLoadingCompleted) {\n        return <CircularProgressCenter/>;\n    }\n\n    if (!props.isNewCollection && (!navigation.initialised || !initialLoadingCompleted)) {\n        return <CircularProgressCenter/>;\n    }\n\n    return <CollectionEditorInternal\n        {...props}\n        initialValues={initialValues}\n        existingPaths={existingPaths}\n        existingIds={existingIds}\n        includeTemplates={includeTemplates}\n        collection={collection}\n        setCollection={setCollection}\n        groups={groups}\n        propertyConfigs={propertyConfigs}/>\n\n}\n\nfunction CollectionEditorInternal<M extends Record<string, any>>({\n                                                                     isNewCollection,\n                                                                     configController,\n                                                                     editedCollectionId,\n                                                                     parentCollectionIds,\n                                                                     fullPath,\n                                                                     collectionInference,\n                                                                     handleClose,\n                                                                     reservedGroups,\n                                                                     extraView,\n                                                                     handleCancel,\n                                                                     setFormDirty,\n                                                                     pathSuggestions,\n                                                                     getUser,\n                                                                     parentCollection,\n                                                                     getData,\n                                                                     existingPaths,\n                                                                     existingIds,\n                                                                     includeTemplates,\n                                                                     collection,\n                                                                     setCollection,\n                                                                     initialValues,\n                                                                     propertyConfigs,\n                                                                     groups\n                                                                 }: CollectionEditorDialogProps & {\n                                                                     handleCancel: () => void,\n                                                                     setFormDirty: (dirty: boolean) => void,\n                                                                     initialValues: PersistedCollection<M>,\n                                                                     existingPaths: string[],\n                                                                     existingIds: string[],\n                                                                     includeTemplates: boolean,\n                                                                     collection: PersistedCollection<M> | undefined,\n                                                                     setCollection: (collection: PersistedCollection<M>) => void,\n                                                                     propertyConfigs: Record<string, PropertyConfig<any>>,\n                                                                     groups: string[],\n                                                                 }\n) {\n\n    const importConfig = useImportConfig();\n    const navigation = useNavigationController();\n    const snackbarController = useSnackbarController();\n\n    // Use this ref to store which properties have errors\n    const propertyErrorsRef = useRef({});\n\n    const initialView = isNewCollection ? (includeTemplates ? \"welcome\" : \"details\") : \"properties\";\n    const [currentView, setCurrentView] = useState<EditorView>(initialView); // this view can edit either the details view or the properties one\n\n    const [error, setError] = React.useState<Error | undefined>();\n\n    const saveCollection = (updatedCollection: PersistedCollection<M>): Promise<boolean> => {\n        const id = updatedCollection.id || updatedCollection.path;\n        return configController.saveCollection({\n            id,\n            collectionData: updatedCollection,\n            previousId: editedCollectionId,\n            parentCollectionIds\n        })\n            .then(() => {\n                setError(undefined);\n                return true;\n            })\n            .catch((e) => {\n                setError(e);\n                console.error(e);\n                snackbarController.open({\n                    type: \"error\",\n                    message: \"Error persisting collection: \" + (e.message ?? \"Details in the console\")\n                });\n                return false;\n            });\n    };\n\n    const setNextMode = useCallback(() => {\n        if (currentView === \"details\") {\n            if (importConfig.inUse) {\n                setCurrentView(\"import_data_saving\");\n            } else if (extraView) {\n                setCurrentView(\"extra_view\");\n            } else {\n                setCurrentView(\"properties\");\n            }\n        } else if (currentView === \"welcome\") {\n            setCurrentView(\"details\");\n        } else if (currentView === \"import_data_mapping\") {\n            setCurrentView(\"import_data_preview\");\n        } else if (currentView === \"import_data_preview\") {\n            setCurrentView(\"details\");\n        } else if (currentView === \"extra_view\") {\n            setCurrentView(\"properties\");\n        } else {\n            setCurrentView(\"details\");\n        }\n\n    }, [currentView, importConfig.inUse, extraView]);\n\n    const doCollectionInference = useCallback((collection: PersistedCollection<any>) => {\n        if (!collectionInference) return undefined;\n        return collectionInference?.(collection.path, collection.collectionGroup ?? false, parentCollectionIds ?? []);\n    }, [collectionInference, parentCollectionIds]);\n\n    const inferCollectionFromData = useCallback(async (newCollection: PersistedCollection<M>) => {\n\n        try {\n            if (!doCollectionInference) {\n                setCollection(newCollection);\n                return Promise.resolve(newCollection);\n            }\n\n            setCurrentView(\"loading\");\n\n            const inferredCollection = await doCollectionInference?.(newCollection);\n\n            if (!inferredCollection) {\n                setCollection(newCollection);\n                return Promise.resolve(newCollection);\n            }\n            const values = {\n                ...(newCollection ?? {})\n            };\n\n            if (Object.keys(inferredCollection.properties ?? {}).length > 0) {\n                values.properties = inferredCollection.properties as PropertiesOrBuilders<M>;\n                values.propertiesOrder = inferredCollection.propertiesOrder as Extract<keyof M, string>[];\n            }\n\n            if (!values.propertiesOrder) {\n                values.propertiesOrder = Object.keys(values.properties) as Extract<keyof M, string>[];\n                return values;\n            }\n\n            setCollection(values);\n            console.debug(\"Inferred collection\", {\n                newCollection: newCollection ?? {},\n                values\n            });\n            return values;\n        } catch (e: any) {\n            console.error(e);\n            snackbarController.open({\n                type: \"error\",\n                message: \"Error inferring collection: \" + (e.message ?? \"Details in the console\")\n            });\n            return newCollection;\n        }\n    }, [parentCollectionIds, doCollectionInference]);\n\n    const onSubmit = (newCollectionState: PersistedCollection<M>, formexController: FormexController<PersistedCollection<M>>) => {\n        console.log(\"Submitting collection\", newCollectionState);\n        try {\n\n            if (!isNewCollection) {\n                saveCollection(newCollectionState).then(() => {\n                    formexController.resetForm({ values: initialValues });\n                    handleClose(newCollectionState);\n                });\n                return;\n            }\n\n            if (currentView === \"welcome\") {\n                setNextMode();\n                formexController.resetForm({ values: newCollectionState });\n            } else if (currentView === \"details\") {\n                if (extraView || importConfig.inUse) {\n                    formexController.resetForm({ values: newCollectionState });\n                    setNextMode();\n                } else if (isNewCollection) {\n                    inferCollectionFromData(newCollectionState)\n                        .then((values) => {\n                            formexController.resetForm({\n                                values: values ?? newCollectionState,\n                                touched: {\n                                    path: true,\n                                    name: true\n                                }\n                            });\n                        }).finally(() => {\n                        setNextMode();\n                    });\n                } else {\n                    formexController.resetForm({ values: newCollectionState });\n                    setNextMode();\n                }\n            } else if (currentView === \"extra_view\") {\n                setNextMode();\n                formexController.resetForm({ values: newCollectionState });\n            } else if (currentView === \"import_data_mapping\") {\n                setNextMode();\n            } else if (currentView === \"import_data_preview\") {\n                setNextMode();\n            } else if (currentView === \"properties\") {\n                saveCollection(newCollectionState).then(() => {\n                    formexController.resetForm({ values: initialValues });\n                    setNextMode();\n                    handleClose(newCollectionState);\n                });\n            } else {\n                setNextMode();\n                formexController.resetForm({ values: newCollectionState });\n            }\n        } catch (e: any) {\n            snackbarController.open({\n                type: \"error\",\n                message: \"Error persisting collection: \" + (e.message ?? \"Details in the console\")\n            });\n            console.error(e);\n            formexController.resetForm({ values: newCollectionState });\n        }\n    };\n\n    const validation = (col: PersistedCollection) => {\n\n        let errors: Record<string, any> = {};\n        const schema = (currentView === \"properties\" || currentView === \"subcollections\" || currentView === \"details\") && YupSchema;\n        if (schema) {\n            try {\n                schema.validateSync(col, { abortEarly: false });\n            } catch (e: any) {\n                e.inner.forEach((err: any) => {\n                    errors[err.path] = err.message;\n                });\n            }\n        }\n        if (currentView === \"properties\") {\n            errors = { ...errors, ...propertyErrorsRef.current };\n        }\n        if (currentView === \"details\") {\n            const pathError = validatePath(col.path, isNewCollection, existingPaths, col.id);\n            if (pathError) {\n                errors.path = pathError;\n            }\n            const idError = validateId(col.id, isNewCollection, existingPaths, existingIds);\n            if (idError) {\n                errors.id = idError;\n            }\n        }\n        return errors;\n    };\n\n    const formController = useCreateFormex<PersistedCollection<M>>({\n        initialValues,\n        onSubmit,\n        validation\n    });\n\n    const {\n        values,\n        setFieldValue,\n        isSubmitting,\n        dirty,\n        submitCount\n    } = formController;\n\n    // TODO: getting data is only working in root collections with this code\n    const path = values.path;\n    const updatedFullPath = fullPath?.includes(\"/\") ? fullPath?.split(\"/\").slice(0, -1).join(\"/\") + \"/\" + path : path; // TODO: this path is wrong\n    const pathError = validatePath(path, isNewCollection, existingPaths, values.id);\n\n    const parentPaths = !pathError && parentCollectionIds ? navigation.convertIdsToPaths(parentCollectionIds) : undefined;\n    const resolvedPath = !pathError ? navigation.resolveAliasesFrom(updatedFullPath) : undefined;\n    const getDataWithPath = resolvedPath && getData ? () => getData(resolvedPath, parentPaths ?? []) : undefined;\n\n    useEffect(() => {\n        setFormDirty(dirty);\n    }, [dirty]);\n\n    function onImportDataSet(data: object[], propertiesOrder?: string[]) {\n        importConfig.setInUse(true);\n        buildEntityPropertiesFromData(data, getInferenceType)\n            .then((properties) => {\n                const res = cleanPropertiesFromImport(properties);\n\n                importConfig.setIdColumn(res.idColumn);\n                importConfig.setImportData(data);\n                importConfig.setHeadersMapping(res.headersMapping);\n                const filteredHeadingsOrder = ((propertiesOrder ?? [])\n                    .filter((key) => res.headersMapping[key]) as string[]) ?? Object.keys(res.properties);\n                importConfig.setHeadingsOrder(filteredHeadingsOrder);\n                importConfig.setOriginProperties(res.properties);\n\n                const mappedHeadings = (propertiesOrder ?? []).map((key) => res.headersMapping[key]).filter(Boolean) as string[] ?? Object.keys(res.properties);\n                setFieldValue(\"properties\", res.properties);\n                setFieldValue(\"propertiesOrder\", mappedHeadings);\n            });\n    }\n\n    const validValues = Boolean(values.name) && Boolean(values.id);\n\n    const onImportMappingComplete = () => {\n        const updatedProperties = { ...values.properties };\n        if (importConfig.idColumn)\n            delete updatedProperties[importConfig.idColumn];\n        setFieldValue(\"properties\", updatedProperties);\n        // setFieldValue(\"propertiesOrder\", Object.values(importConfig.headersMapping));\n        setNextMode();\n    };\n\n    const editable = collection?.editable === undefined || collection?.editable === true;\n    const collectionEditable = editable || isNewCollection;\n\n    return <DialogContent fullHeight={true}>\n        <Formex value={formController}>\n\n            <>\n                {!isNewCollection && <Tabs value={currentView}\n                                           className={cn(defaultBorderMixin, \"justify-end bg-gray-50 dark:bg-gray-950 border-b\")}\n                                           onValueChange={(v) => setCurrentView(v as EditorView)}>\n                    <Tab value={\"details\"}>\n                        Details\n                    </Tab>\n                    <Tab value={\"properties\"}>\n                        Properties\n                    </Tab>\n                    <Tab value={\"subcollections\"}>\n                        Additional views\n                    </Tab>\n                </Tabs>}\n\n                <form noValidate\n                      onSubmit={formController.handleSubmit}\n                      className={cn(\n                          isNewCollection ? \"h-full\" : \"h-[calc(100%-48px)]\",\n                          \"flex-grow flex flex-col relative\")}>\n\n                    {currentView === \"loading\" &&\n                        <CircularProgressCenter/>}\n\n                    {currentView === \"extra_view\" &&\n                        path &&\n                        extraView?.View &&\n                        <extraView.View path={path}/>}\n\n                    {currentView === \"welcome\" &&\n                        <CollectionEditorWelcomeView\n                            path={path}\n                            onContinue={(importData, propertiesOrder) => {\n                                // console.log(\"Import data\", importData, propertiesOrder)\n                                if (importData) {\n                                    onImportDataSet(importData, propertiesOrder);\n                                    setCurrentView(\"import_data_mapping\");\n                                } else {\n                                    setCurrentView(\"details\");\n                                }\n                            }}\n                            existingCollectionPaths={existingPaths}\n                            parentCollection={parentCollection}\n                            pathSuggestions={pathSuggestions}/>}\n\n                    {currentView === \"import_data_mapping\" && importConfig &&\n                        <CollectionEditorImportMapping importConfig={importConfig}\n                                                       collectionEditable={collectionEditable}\n                                                       propertyConfigs={propertyConfigs}/>}\n\n                    {currentView === \"import_data_preview\" && importConfig &&\n                        <CollectionEditorImportDataPreview importConfig={importConfig}\n                                                           properties={values.properties as Properties}\n                                                           propertiesOrder={values.propertiesOrder as string[]}/>}\n\n                    {currentView === \"import_data_saving\" && importConfig &&\n                        <ImportSaveInProgress importConfig={importConfig}\n                                              collection={values}\n                                              path={path}\n                                              onImportSuccess={async (importedCollection) => {\n                                                  snackbarController.open({\n                                                      type: \"info\",\n                                                      message: \"Data imported successfully\"\n                                                  });\n                                                  await saveCollection(values);\n                                                  handleClose(importedCollection);\n                                              }}\n                        />}\n\n                    {currentView === \"details\" &&\n                        <CollectionDetailsForm\n                            existingPaths={existingPaths}\n                            existingIds={existingIds}\n                            groups={groups}\n                            parentCollectionIds={parentCollectionIds}\n                            parentCollection={parentCollection}\n                            isNewCollection={isNewCollection}/>}\n\n                    {currentView === \"subcollections\" && collection &&\n                        <SubcollectionsEditTab\n                            parentCollection={parentCollection}\n                            configController={configController}\n                            getUser={getUser}\n                            collectionInference={collectionInference}\n                            parentCollectionIds={parentCollectionIds}\n                            collection={collection}/>}\n\n                    {currentView === \"properties\" &&\n                        <CollectionPropertiesEditorForm\n                            showErrors={submitCount > 0}\n                            isNewCollection={isNewCollection}\n                            reservedGroups={reservedGroups}\n                            onPropertyError={(propertyKey, namespace, error) => {\n                                const current = removeUndefined({\n                                    ...propertyErrorsRef.current,\n                                    [getFullIdPath(propertyKey, namespace)]: removeUndefined(error, true)\n                                }, true);\n                                propertyErrorsRef.current = current;\n                                formController.validate();\n                            }}\n                            getUser={getUser}\n                            getData={getDataWithPath}\n                            doCollectionInference={doCollectionInference}\n                            propertyConfigs={propertyConfigs}\n                            collectionEditable={collectionEditable}\n                            extraIcon={extraView?.icon &&\n                                <IconButton\n                                    color={\"primary\"}\n                                    onClick={() => setCurrentView(\"extra_view\")}>\n                                    {extraView.icon}\n                                </IconButton>}/>\n                    }\n\n                    {currentView !== \"welcome\" && <DialogActions\n                        position={\"absolute\"}>\n                        {error && <ErrorView error={error}/>}\n\n                        {isNewCollection && includeTemplates && currentView === \"import_data_mapping\" &&\n                            <Button variant={\"text\"}\n                                    type=\"button\"\n                                    onClick={() => {\n                                        importConfig.setInUse(false);\n                                        return setCurrentView(\"welcome\");\n                                    }}>\n                                <ArrowBackIcon/>\n                                Back\n                            </Button>}\n\n                        {isNewCollection && includeTemplates && currentView === \"import_data_preview\" &&\n                            <Button variant={\"text\"}\n                                    type=\"button\"\n                                    onClick={() => {\n                                        setCurrentView(\"import_data_mapping\");\n                                    }}>\n                                <ArrowBackIcon/>\n                                Back\n                            </Button>}\n\n                        {isNewCollection && includeTemplates && currentView === \"details\" &&\n                            <Button variant={\"text\"}\n                                    type=\"button\"\n                                    onClick={() => setCurrentView(\"welcome\")}>\n                                <ArrowBackIcon/>\n                                Back\n                            </Button>}\n\n                        {isNewCollection && currentView === \"properties\" && <Button variant={\"text\"}\n                                                                                    type=\"button\"\n                                                                                    onClick={() => setCurrentView(\"details\")}>\n                            <ArrowBackIcon/>\n                            Back\n                        </Button>}\n\n                        <Button variant={\"text\"}\n                                onClick={() => {\n                                    handleCancel();\n                                }}>\n                            Cancel\n                        </Button>\n\n                        {isNewCollection && currentView === \"import_data_mapping\" &&\n                            <Button\n                                variant={\"filled\"}\n                                color=\"primary\"\n                                onClick={onImportMappingComplete}\n                            >\n                                Next\n                            </Button>}\n\n                        {isNewCollection && currentView === \"import_data_preview\" &&\n                            <Button\n                                variant={\"filled\"}\n                                color=\"primary\"\n                                onClick={() => {\n                                    setNextMode();\n                                }}\n                            >\n                                Next\n                            </Button>}\n\n                        {isNewCollection && (currentView === \"details\" || currentView === \"properties\") &&\n                            <LoadingButton\n                                variant={\"filled\"}\n                                color=\"primary\"\n                                type=\"submit\"\n                                loading={isSubmitting}\n                                disabled={isSubmitting || (currentView === \"details\" && !validValues)}\n                                startIcon={currentView === \"properties\"\n                                    ? <DoneIcon/>\n                                    : undefined}\n                            >\n                                {currentView === \"details\" && \"Next\"}\n                                {currentView === \"properties\" && \"Create collection\"}\n                            </LoadingButton>}\n\n                        {!isNewCollection && <LoadingButton\n                            variant=\"filled\"\n                            color=\"primary\"\n                            type=\"submit\"\n                            loading={isSubmitting}\n                        >\n                            Update collection\n                        </LoadingButton>}\n\n                    </DialogActions>}\n                </form>\n            </>\n\n        </Formex>\n\n    </DialogContent>\n\n}\n\nfunction applyPropertyConfigs<M extends Record<string, any> = any>(collection: PersistedCollection<M>, propertyConfigs: Record<string, PropertyConfig<any>>): PersistedCollection<M> {\n    const {\n        properties,\n        ...rest\n    } = collection;\n    const propertiesResult: PropertiesOrBuilders<any> = {};\n    if (properties) {\n        Object.keys(properties).forEach((key) => {\n            propertiesResult[key] = applyPropertiesConfig(properties[key] as PropertyOrBuilder, propertyConfigs);\n        });\n    }\n\n    return {\n        ...rest,\n        properties: propertiesResult\n    };\n}\n\nfunction applyPropertiesConfig(property: PropertyOrBuilder, propertyConfigs: Record<string, PropertyConfig<any>>) {\n    let internalProperty = property;\n    if (propertyConfigs && typeof internalProperty === \"object\" && internalProperty.propertyConfig) {\n        const propertyConfig = propertyConfigs[internalProperty.propertyConfig];\n        if (propertyConfig && isPropertyBuilder(propertyConfig.property)) {\n            internalProperty = propertyConfig.property;\n        } else {\n\n            if (propertyConfig) {\n                internalProperty = mergeDeep(propertyConfig.property, internalProperty);\n            }\n\n            if (!isPropertyBuilder(internalProperty) && internalProperty.dataType === \"map\" && internalProperty.properties) {\n                const properties: Record<string, PropertyOrBuilder> = {};\n                Object.keys(internalProperty.properties).forEach((key) => {\n                    properties[key] = applyPropertiesConfig(((internalProperty as MapProperty).properties as Properties)[key] as Property, propertyConfigs);\n                });\n                internalProperty = {\n                    ...internalProperty,\n                    properties\n                };\n            }\n\n        }\n    }\n    return internalProperty;\n\n}\n\nconst validatePath = (value: string, isNewCollection: boolean, existingPaths: string[], idValue?: string) => {\n    let error;\n    if (!value) {\n        error = \"You must specify a path in the database for this collection\";\n    }\n    // if (isNewCollection && existingIds?.includes(value.trim().toLowerCase()))\n    //     error = \"There is already a collection which uses this path as an id\";\n    if (isNewCollection && existingPaths?.includes(value.trim().toLowerCase()) && !idValue)\n        error = \"There is already a collection with the specified path. If you want to have multiple collections referring to the same database path, make sure the have different ids\";\n\n    const subpaths = removeInitialAndTrailingSlashes(value).split(\"/\");\n    if (subpaths.length % 2 === 0) {\n        error = `Collection paths must have an odd number of segments: ${value}`;\n    }\n    return error;\n};\n\nconst validateId = (value: string, isNewCollection: boolean, existingPaths: string[], existingIds: string[]) => {\n    if (!value) return undefined;\n    let error;\n    if (isNewCollection && existingPaths?.includes(value.trim().toLowerCase()))\n        error = \"There is already a collection that uses this value as a path\";\n    if (isNewCollection && existingIds?.includes(value.trim().toLowerCase()))\n        error = \"There is already a collection which uses this id\";\n    // if (error) {\n    //     setAdvancedPanelExpanded(true);\n    // }\n    return error;\n};\n","import React, { PropsWithChildren, useCallback } from \"react\";\nimport equal from \"react-fast-compare\"\n\nimport { CollectionsConfigController } from \"./types/config_controller\";\nimport {\n    Property,\n    useCustomizationController,\n    useNavigationController,\n    User,\n    useSnackbarController\n} from \"@firecms/core\";\nimport { CollectionEditorDialog } from \"./ui/collection_editor/CollectionEditorDialog\";\nimport { useNavigate } from \"react-router\";\nimport { CollectionEditorController } from \"./types/collection_editor_controller\";\nimport { CollectionEditorPermissionsBuilder } from \"./types/config_permissions\";\nimport { CollectionInference } from \"./types/collection_inference\";\nimport { PropertyFormDialog } from \"./ui/collection_editor/PropertyEditView\";\nimport { PersistedCollection } from \"./types/persisted_collection\";\n\nexport const ConfigControllerContext = React.createContext<CollectionsConfigController>({} as any);\nexport const CollectionEditorContext = React.createContext<CollectionEditorController>({} as any);\n\nexport interface ConfigControllerProviderProps {\n    /**\n     * Controller for managing the collections' config.\n     */\n    collectionConfigController: CollectionsConfigController;\n\n    /**\n     * Callback used to infer the schema from the data.\n     */\n    collectionInference?: CollectionInference;\n\n    /**\n     * Use this builder to define the permissions for the configuration per user.\n     */\n    configPermissions?: CollectionEditorPermissionsBuilder;\n\n    /**\n     * Groups that cannot be used to create new collections.\n     */\n    reservedGroups?: string[];\n\n    extraView?: {\n        View: React.ComponentType<{\n            path: string\n        }>,\n        icon: React.ReactNode\n    };\n\n    getPathSuggestions?: (path?: string) => Promise<string[]>;\n\n    getUser?: (uid: string) => User | null\n\n    getData?: (path: string, parentPaths: string[]) => Promise<object[]>;\n\n    onAnalyticsEvent?: (event: string, params?: object) => void;\n\n}\n\nexport const ConfigControllerProvider = React.memo(\n    function ConfigControllerProvider({\n                                          children,\n                                          collectionConfigController,\n                                          configPermissions,\n                                          reservedGroups,\n                                          collectionInference,\n                                          extraView,\n                                          getPathSuggestions,\n                                          getUser,\n                                          getData,\n                                          onAnalyticsEvent\n                                      }: PropsWithChildren<ConfigControllerProviderProps>) {\n\n        const navigation = useNavigationController();\n        const navigate = useNavigate();\n        const snackbarController = useSnackbarController();\n        const { propertyConfigs } = useCustomizationController();\n\n        const [currentDialog, setCurrentDialog] = React.useState<{\n            isNewCollection: boolean,\n            parentCollection?: PersistedCollection,\n            editedCollectionId?: string,\n            fullPath?: string,\n            parentCollectionIds: string[],\n            initialValues?: {\n                path?: string,\n                group?: string,\n                name?: string\n            },\n            redirect: boolean\n        }>();\n\n        const [currentPropertyDialog, setCurrentPropertyDialog] = React.useState<{\n            propertyKey?: string,\n            property?: Property,\n            namespace?: string,\n            parentCollection?: PersistedCollection,\n            currentPropertiesOrder?: string[],\n            editedCollectionId: string,\n            fullPath?: string,\n            parentCollectionIds: string[],\n            collectionEditable: boolean;\n        }>();\n\n        const defaultConfigPermissions: CollectionEditorPermissionsBuilder = useCallback(() => ({\n            createCollections: true,\n            editCollections: true,\n            deleteCollections: true\n        }), []);\n\n        const editCollection = useCallback(({\n                                                id,\n                                                fullPath,\n                                                parentCollectionIds,\n                                                parentCollection\n                                            }: {\n            id?: string,\n            fullPath?: string,\n            parentCollectionIds: string[],\n            parentCollection?: PersistedCollection\n        }) => {\n            console.debug(\"Edit collection\", id, fullPath, parentCollectionIds, parentCollection);\n            onAnalyticsEvent?.(\"edit_collection\", {\n                id,\n                fullPath\n            });\n            setCurrentDialog({\n                editedCollectionId: id,\n                fullPath,\n                parentCollectionIds,\n                isNewCollection: false,\n                parentCollection,\n                redirect: false\n            });\n        }, []);\n\n        const editProperty = useCallback(({\n                                              propertyKey,\n                                              property,\n                                              editedCollectionId,\n                                              currentPropertiesOrder,\n                                              parentCollectionIds,\n                                              collection\n                                          }: {\n            propertyKey?: string,\n            property?: Property,\n            currentPropertiesOrder?: string[],\n            editedCollectionId: string,\n            parentCollectionIds: string[],\n            collection: PersistedCollection,\n        }) => {\n            console.debug(\"Edit property\", propertyKey, property, editedCollectionId, currentPropertiesOrder, parentCollectionIds, collection);\n            onAnalyticsEvent?.(\"edit_property\", {\n                propertyKey,\n                editedCollectionId\n            });\n            // namespace is all the path until the last dot\n            const namespace = propertyKey && propertyKey.includes(\".\")\n                ? propertyKey.substring(0, propertyKey.lastIndexOf(\".\"))\n                : undefined;\n            const propertyKeyWithoutNamespace = propertyKey && propertyKey.includes(\".\")\n                ? propertyKey.substring(propertyKey.lastIndexOf(\".\") + 1)\n                : propertyKey;\n            setCurrentPropertyDialog({\n                propertyKey: propertyKeyWithoutNamespace,\n                property,\n                namespace,\n                currentPropertiesOrder,\n                editedCollectionId,\n                parentCollectionIds,\n                collectionEditable: collection?.editable ?? false\n            });\n        }, []);\n\n        const createCollection = React.useCallback(({\n                                                        parentCollectionIds,\n                                                        parentCollection,\n                                                        initialValues,\n                                                        redirect,\n                                                        sourceClick\n                                                    }: {\n            parentCollectionIds: string[],\n            parentCollection?: PersistedCollection\n            initialValues?: {\n                group?: string,\n                path?: string,\n                name?: string\n            },\n            redirect: boolean,\n            sourceClick?: string\n        }) => {\n            console.debug(\"Create collection\", {\n                parentCollectionIds,\n                parentCollection,\n                initialValues,\n                redirect,\n                sourceClick\n            });\n            onAnalyticsEvent?.(\"create_collection\", {\n                parentCollectionIds,\n                parentCollection,\n                initialValues,\n                redirect,\n                sourceClick\n            });\n            setCurrentDialog({\n                isNewCollection: true,\n                parentCollectionIds,\n                parentCollection,\n                initialValues,\n                redirect\n            });\n        }, []);\n\n        return (\n            <ConfigControllerContext.Provider value={collectionConfigController}>\n                <CollectionEditorContext.Provider\n                    value={{\n                        editCollection,\n                        createCollection,\n                        editProperty,\n                        configPermissions: configPermissions ?? defaultConfigPermissions,\n                        getPathSuggestions\n                    }}>\n\n                    {children}\n\n                    <CollectionEditorDialog\n                        open={Boolean(currentDialog)}\n                        configController={collectionConfigController}\n                        isNewCollection={false}\n                        collectionInference={collectionInference}\n                        {...currentDialog}\n                        getData={getData}\n                        reservedGroups={reservedGroups}\n                        extraView={extraView}\n                        pathSuggestions={getPathSuggestions}\n                        getUser={getUser}\n                        handleClose={(collection) => {\n                            if (currentDialog?.redirect) {\n                                if (collection && currentDialog?.isNewCollection && !currentDialog.parentCollectionIds.length) {\n                                    const url = navigation.buildUrlCollectionPath(collection.id ?? collection.path);\n                                    navigate(url);\n                                }\n                            }\n                            setCurrentDialog(undefined);\n                        }}/>\n\n                    {/* Used for editing properties*/}\n                    <PropertyFormDialog\n                        open={Boolean(currentPropertyDialog)}\n                        includeIdAndName={true}\n                        existingProperty={Boolean(currentPropertyDialog?.propertyKey)}\n                        autoUpdateId={!currentPropertyDialog ? false : !currentPropertyDialog?.propertyKey}\n                        autoOpenTypeSelect={!currentPropertyDialog ? false : !currentPropertyDialog?.propertyKey}\n                        inArray={false}\n                        collectionEditable={currentPropertyDialog?.collectionEditable ?? false}\n                        getData={getData && currentPropertyDialog?.editedCollectionId\n                            ? () => {\n                                console.debug(\"get data for property\", currentPropertyDialog?.editedCollectionId);\n                                const resolvedPath = navigation.resolveAliasesFrom(currentPropertyDialog.editedCollectionId!)\n                                return getData(resolvedPath, []);\n                            }\n                            : undefined}\n                        onPropertyChanged={({\n                                                id,\n                                                property\n                                            }) => {\n                            if (!currentPropertyDialog) return;\n                            if (!id) return;\n                            const newProperty = !(currentPropertyDialog.propertyKey);\n                            return collectionConfigController.saveProperty({\n                                path: currentPropertyDialog?.editedCollectionId,\n                                property,\n                                propertyKey: id,\n                                newPropertiesOrder: newProperty && currentPropertyDialog.currentPropertiesOrder ? [...currentPropertyDialog.currentPropertiesOrder, id] : undefined,\n                                namespace: currentPropertyDialog.namespace,\n                                parentCollectionIds: currentPropertyDialog.parentCollectionIds\n                            })\n                                .catch((e) => {\n                                    console.error(e);\n                                    snackbarController.open({\n                                        type: \"error\",\n                                        message: \"Error persisting property: \" + (e.message ?? \"Details in the console\")\n                                    });\n                                    return false;\n                                });\n                        }}\n                        onPropertyChangedImmediate={false}\n                        onDelete={() => {\n                            if (!currentPropertyDialog?.propertyKey) return;\n                            const newPropertiesOrder = currentPropertyDialog?.currentPropertiesOrder?.filter(p => p !== currentPropertyDialog?.propertyKey);\n                            return collectionConfigController.deleteProperty({\n                                path: currentPropertyDialog?.editedCollectionId,\n                                propertyKey: currentPropertyDialog?.propertyKey,\n                                namespace: currentPropertyDialog?.namespace,\n                                newPropertiesOrder,\n                                parentCollectionIds: currentPropertyDialog?.parentCollectionIds\n                            })\n                                .then(() => {\n                                    setCurrentPropertyDialog(undefined);\n                                }).catch((e) => {\n                                    console.error(e);\n                                    snackbarController.open({\n                                        type: \"error\",\n                                        message: \"Error deleting property: \" + (e.message ?? \"Details in the console\")\n                                    });\n                                    return false;\n                                });\n                        }}\n                        onError={() => {\n                        }}\n                        onOkClicked={() => {\n                            setCurrentPropertyDialog(undefined);\n                        }}\n                        onCancel={() => {\n                            setCurrentPropertyDialog(undefined);\n                        }}\n                        initialErrors={{}}\n                        forceShowErrors={false}\n                        existingPropertyKeys={[]}\n                        allowDataInference={true}\n                        propertyConfigs={propertyConfigs}\n                        property={currentPropertyDialog?.property}\n                        propertyKey={currentPropertyDialog?.propertyKey}/>\n\n                </CollectionEditorContext.Provider>\n\n            </ConfigControllerContext.Provider>\n        );\n    }, equal);\n","import { useContext } from \"react\";\nimport { CollectionEditorController } from \"./types/collection_editor_controller\";\nimport { CollectionEditorContext } from \"./ConfigControllerProvider\";\n\n/**\n * Hook to access the collection editor controller.\n * The methods in this controller can be used to open the collection editor dialog.\n */\nexport const useCollectionEditorController = (): CollectionEditorController => useContext(CollectionEditorContext);\n","import equal from \"react-fast-compare\"\n\nimport {\n    CollectionActionsProps,\n    mergeDeep,\n    useAuthController,\n    useNavigationController,\n    useSnackbarController\n} from \"@firecms/core\";\nimport { Button, IconButton, SaveIcon, SettingsIcon, Tooltip, UndoIcon, } from \"@firecms/ui\";\n\nimport { useCollectionEditorController } from \"../useCollectionEditorController\";\nimport { useCollectionsConfigController } from \"../useCollectionsConfigController\";\nimport { PersistedCollection } from \"../types/persisted_collection\";\n\nexport function EditorCollectionAction({\n                                           path: fullPath,\n                                           parentCollectionIds,\n                                           collection,\n                                           tableController\n                                       }: CollectionActionsProps) {\n\n    const authController = useAuthController();\n    const navigationController = useNavigationController();\n    const collectionEditorController = useCollectionEditorController();\n\n    const parentCollection = navigationController.getCollectionFromIds(parentCollectionIds);\n\n    const canEditCollection = collectionEditorController.configPermissions\n        ? collectionEditorController.configPermissions({\n            user: authController.user,\n            collection\n        }).editCollections\n        : true;\n\n    const editorButton = <Tooltip\n        title={canEditCollection ? \"Edit collection\" : \"You don't have permissions to edit this collection\"}>\n        <IconButton\n            color={\"primary\"}\n            disabled={!canEditCollection}\n            onClick={canEditCollection\n                ? () => collectionEditorController?.editCollection({ id: collection.id, fullPath, parentCollectionIds, parentCollection: parentCollection as PersistedCollection })\n                : undefined}>\n            <SettingsIcon/>\n        </IconButton>\n    </Tooltip>;\n\n    return <>\n        {editorButton}\n    </>\n\n}\n\nfunction getObjectOrNull(o?: object): object | null {\n    if (o && Object.keys(o).length === 0)\n        return o\n    return o ?? null;\n}\n","import { useContext } from \"react\";\nimport { CollectionsConfigController } from \"./types/config_controller\";\nimport { ConfigControllerContext } from \"./ConfigControllerProvider\";\n\n/**\n * Use this hook to access the configuration controller.\n * You can use it to get the list of collections, and to save/delete collections.\n */\nexport const useCollectionsConfigController = (): CollectionsConfigController => useContext(ConfigControllerContext);\n","import {\n    DeleteConfirmationDialog,\n    PluginHomePageActionsProps,\n    useAuthController,\n    useSnackbarController\n} from \"@firecms/core\";\nimport { DeleteIcon, IconButton, Menu, MenuItem, MoreVertIcon, SettingsIcon, } from \"@firecms/ui\";\nimport { useCollectionEditorController } from \"../useCollectionEditorController\";\nimport { useCallback, useState } from \"react\";\nimport { useCollectionsConfigController } from \"../useCollectionsConfigController\";\n\nexport function HomePageEditorCollectionAction({\n                                                   path,\n                                                   collection\n                                               }: PluginHomePageActionsProps) {\n\n    const snackbarController = useSnackbarController();\n    const authController = useAuthController();\n    const configController = useCollectionsConfigController();\n    const collectionEditorController = useCollectionEditorController();\n\n    const permissions = collectionEditorController.configPermissions({\n        user: authController.user,\n        collection\n    });\n\n    const onEditCollectionClicked = useCallback(() => {\n        collectionEditorController?.editCollection({ id: collection.id, parentCollectionIds: [] });\n    }, [collectionEditorController, path]);\n\n    const [deleteRequested, setDeleteRequested] = useState(false);\n\n    const deleteCollection = useCallback(() => {\n        configController?.deleteCollection({ id: collection.id }).then(() => {\n            setDeleteRequested(false);\n            snackbarController.open({\n                message: \"Collection deleted\",\n                type: \"success\"\n            });\n        });\n    }, [path, configController]);\n\n    return <>\n\n        <div>\n            {permissions.deleteCollections &&\n                <Menu\n                    trigger={<IconButton>\n                        <MoreVertIcon size={\"small\"}/>\n                    </IconButton>}\n                >\n                    <MenuItem onClick={(event) => {\n                        event.preventDefault();\n                        event.stopPropagation();\n                        setDeleteRequested(true);\n                    }}>\n                        <DeleteIcon/>\n                        Delete\n                    </MenuItem>\n\n                </Menu>\n\n            }\n\n            {permissions.editCollections &&\n                <IconButton\n                    onClick={(event) => {\n                        onEditCollectionClicked();\n                    }}>\n                    <SettingsIcon size={\"small\"}/>\n                </IconButton>}\n        </div>\n\n        <DeleteConfirmationDialog\n            open={deleteRequested}\n            onAccept={deleteCollection}\n            onCancel={() => setDeleteRequested(false)}\n            title={<>Delete this collection?</>}\n            body={<> This will <b>not\n                delete any data</b>, only\n                the collection in the CMS</>}/>\n    </>;\n\n}\n","import { ResolvedProperty } from \"@firecms/core\";\nimport { IconButton, SettingsIcon, Tooltip } from \"@firecms/ui\";\nimport React from \"react\";\nimport { useCollectionEditorController } from \"../useCollectionEditorController\";\nimport { PersistedCollection } from \"../types/persisted_collection\";\n\nexport function CollectionViewHeaderAction({\n                                               propertyKey,\n                                               onHover,\n                                               property,\n                                               fullPath,\n                                               parentCollectionIds,\n                                               collection\n                                           }: {\n    property: ResolvedProperty,\n    propertyKey: string,\n    onHover: boolean,\n    fullPath: string,\n    parentCollectionIds: string[],\n    collection: PersistedCollection;\n}) {\n\n    const collectionEditorController = useCollectionEditorController();\n\n    return (\n        <Tooltip title={\"Edit\"}>\n            <IconButton\n                className={onHover ? \"bg-white dark:bg-gray-950\" : \"hidden\"}\n                onClick={() => {\n                    collectionEditorController.editProperty({\n                        propertyKey,\n                        property,\n                        editedCollectionId: collection.id,\n                        parentCollectionIds,\n                        collection\n                    });\n                }}\n                size={\"small\"}>\n                <SettingsIcon size={\"small\"}/>\n            </IconButton>\n        </Tooltip>\n    )\n}\n","import { getDefaultPropertiesOrder, useAuthController } from \"@firecms/core\";\nimport { AddIcon, Tooltip } from \"@firecms/ui\";\nimport { useCollectionEditorController } from \"../useCollectionEditorController\";\nimport { PersistedCollection } from \"../types/persisted_collection\";\n\nexport function PropertyAddColumnComponent({\n                                               fullPath,\n                                               parentCollectionIds,\n                                               collection\n                                           }: {\n    fullPath: string,\n    parentCollectionIds: string[],\n    collection: PersistedCollection;\n}) {\n\n    const authController = useAuthController();\n    const collectionEditorController = useCollectionEditorController();\n    const canEditCollection = collectionEditorController.configPermissions\n        ? collectionEditorController.configPermissions({\n            user: authController.user,\n            collection\n        }).editCollections\n        : true;\n\n    return (\n        <Tooltip title={canEditCollection ? \"Add new property\" : \"You don't have permission to add new properties\"}>\n            <div\n                className={\"p-0.5 w-20 h-full flex items-center justify-center cursor-pointer bg-gray-100 bg-opacity-40 hover:bg-gray-100 dark:bg-gray-950 dark:bg-opacity-40 dark:hover:bg-gray-950\"}\n                // className={onHover ? \"bg-white dark:bg-gray-950\" : undefined}\n                onClick={() => {\n                    collectionEditorController.editProperty({\n                        editedCollectionId: collection.id,\n                        parentCollectionIds,\n                        currentPropertiesOrder: getDefaultPropertiesOrder(collection),\n                        collection\n                    });\n                }}>\n                <AddIcon color={\"inherit\"}/>\n            </div>\n        </Tooltip>\n    )\n}\n","import { AddIcon, Button } from \"@firecms/ui\";\nimport { useCollectionEditorController } from \"../useCollectionEditorController\";\n\nexport function NewCollectionButton() {\n    const collectionEditorController = useCollectionEditorController();\n    return <div className={\"bg-gray-50 dark:bg-gray-900 min-w-fit rounded\"}>\n        <Button className={\"min-w-fit\"}\n                variant={\"outlined\"}\n                onClick={() => collectionEditorController.createCollection({\n                    parentCollectionIds: [],\n                    redirect: true,\n                    sourceClick: \"new_collection_button\"\n                })}>\n            <AddIcon/>\n            New collection\n        </Button>\n    </div>\n}\n","import equal from \"react-fast-compare\"\n\nimport { CollectionActionsProps, mergeDeep, useAuthController, useSnackbarController } from \"@firecms/core\";\nimport { Button, SaveIcon, Tooltip, UndoIcon, } from \"@firecms/ui\";\n\nimport { useCollectionEditorController } from \"../useCollectionEditorController\";\nimport { useCollectionsConfigController } from \"../useCollectionsConfigController\";\nimport { PersistedCollection } from \"../types/persisted_collection\";\n\nexport function EditorCollectionActionStart({\n                                           path: fullPath,\n                                           parentCollectionIds,\n                                           collection,\n                                           tableController\n                                       }: CollectionActionsProps) {\n\n    const authController = useAuthController();\n    const collectionEditorController = useCollectionEditorController();\n    const configController = useCollectionsConfigController();\n    const snackbarController = useSnackbarController();\n\n    const canEditCollection = collectionEditorController.configPermissions\n        ? collectionEditorController.configPermissions({\n            user: authController.user,\n            collection\n        }).editCollections\n        : true;\n\n    let saveDefaultFilterButton = null;\n    if (!equal(getObjectOrNull(tableController.filterValues), getObjectOrNull(collection.initialFilter)) ||\n        !equal(getObjectOrNull(tableController.sortBy), getObjectOrNull(collection.initialSort))) {\n        saveDefaultFilterButton = <>\n            <Tooltip\n                title={tableController.sortBy || tableController.filterValues ? \"Save default filter and sort\" : \"Clear default filter and sort\"}>\n                <Button\n                    color={\"primary\"}\n                    size={\"small\"}\n                    variant={\"outlined\"}\n                    onClick={() => configController\n                        ?.saveCollection({\n                            id: collection.id,\n                            parentCollectionIds,\n                            collectionData: mergeDeep(collection as PersistedCollection,\n                                {\n                                    initialFilter: tableController.filterValues ?? null,\n                                    initialSort: tableController.sortBy ?? null\n                                })\n                        }).then(() => {\n                            snackbarController.open({\n                                type: \"success\",\n                                message: \"Default config saved\"\n                            });\n                        })}>\n                    <SaveIcon/>\n                </Button>\n            </Tooltip>\n\n            {(collection.initialFilter || collection.initialSort) && <Tooltip\n                title={\"Reset to default filter and sort\"}>\n                <Button\n                    color={\"primary\"}\n                    size={\"small\"}\n                    variant={\"text\"}\n                    onClick={() => {\n                        tableController.clearFilter?.();\n                        if (collection?.initialFilter)\n                            tableController.setFilterValues?.(collection?.initialFilter);\n                        if (collection?.initialSort)\n                            tableController.setSortBy?.(collection?.initialSort);\n                    }}>\n                    <UndoIcon/>\n                </Button>\n            </Tooltip>}\n        </>;\n    }\n\n    return <>\n        {canEditCollection && saveDefaultFilterButton}\n    </>\n\n}\n\nfunction getObjectOrNull(o?: object): object | null {\n    if (o && Object.keys(o).length === 0)\n        return o\n    return o ?? null;\n}\n","import { PluginHomePageAdditionalCardsProps, useAuthController } from \"@firecms/core\";\nimport { AddIcon, Card, cn, Typography } from \"@firecms/ui\";\nimport { useCollectionEditorController } from \"../useCollectionEditorController\";\n\nexport function NewCollectionCard({\n                                      group,\n                                      context\n                                  }: PluginHomePageAdditionalCardsProps) {\n\n    if (!context.navigation.topLevelNavigation)\n        throw Error(\"Navigation not ready in FireCMSHomePage\");\n\n    const authController = useAuthController();\n\n    const collectionEditorController = useCollectionEditorController();\n    const canCreateCollections = collectionEditorController.configPermissions\n        ? collectionEditorController.configPermissions({\n            user: authController.user,\n        }).createCollections\n        : true;\n\n    return (\n        <Card className={cn(\"h-full p-4 min-h-[124px]\")}\n              onClick={collectionEditorController && canCreateCollections\n                  ? () => collectionEditorController.createCollection({\n                      initialValues: group ? { group } : undefined,\n                      parentCollectionIds: [],\n                      redirect: true,\n                      sourceClick: \"new_collection_card\"\n                  })\n                  : undefined}>\n\n            <div\n                className=\"flex flex-col items-start h-full w-full items-center justify-center h-full w-full flex-grow flex-col\">\n                <AddIcon color=\"primary\" size={\"large\"}/>\n                <Typography color=\"primary\"\n                            variant={\"caption\"}\n                            className={\"font-medium\"}>{\"Add new collection\".toUpperCase()}</Typography>\n\n                {!canCreateCollections &&\n                    <Typography variant={\"caption\"}>You don&apos;t have permissions to create\n                        collections</Typography>\n                }\n            </div>\n\n        </Card>\n    );\n}\n","import React from \"react\";\nimport { FireCMSPlugin, useAuthController, useNavigationController, User } from \"@firecms/core\";\nimport { ConfigControllerProvider } from \"./ConfigControllerProvider\";\nimport { CollectionEditorPermissionsBuilder } from \"./types/config_permissions\";\nimport { EditorCollectionAction } from \"./ui/EditorCollectionAction\";\nimport { HomePageEditorCollectionAction } from \"./ui/HomePageEditorCollectionAction\";\nimport { PersistedCollection } from \"./types/persisted_collection\";\nimport { CollectionInference } from \"./types/collection_inference\";\nimport { CollectionsConfigController } from \"./types/config_controller\";\nimport { CollectionViewHeaderAction } from \"./ui/CollectionViewHeaderAction\";\nimport { PropertyAddColumnComponent } from \"./ui/PropertyAddColumnComponent\";\nimport { NewCollectionButton } from \"./ui/NewCollectionButton\";\nimport { AddIcon, Button, Paper, Typography } from \"@firecms/ui\";\nimport { useCollectionEditorController } from \"./useCollectionEditorController\";\nimport { EditorCollectionActionStart } from \"./ui/EditorCollectionActionStart\";\nimport { NewCollectionCard } from \"./ui/NewCollectionCard\";\n\nexport interface CollectionConfigControllerProps<EC extends PersistedCollection = PersistedCollection, UserType extends User = User> {\n\n    /**\n     * Firebase app where the configuration is saved.\n     */\n    collectionConfigController: CollectionsConfigController;\n\n    /**\n     * Define what actions can be performed on the configuration.\n     */\n    configPermissions?: CollectionEditorPermissionsBuilder<UserType, EC>;\n\n    /**\n     * The words you define here will not be allowed to be used as group\n     * names when creating collections.\n     * e.g. [\"admin\"]\n     */\n    reservedGroups?: string[];\n\n    extraView?: {\n        View: React.ComponentType<{\n            path: string\n        }>,\n        icon: React.ReactNode\n    };\n\n    getPathSuggestions?: (path?: string) => Promise<string[]>;\n\n    collectionInference?: CollectionInference;\n\n    getData?: (path: string, parentPaths: string[]) => Promise<object[]>;\n\n    getUser?: (uid: string) => UserType | null;\n\n    onAnalyticsEvent?: (event: string, params?: object) => void;\n\n}\n\n/**\n * Use this hook to initialise the Collection Editor plugin.\n * This is likely the only hook you will need to use.\n * @param firebaseApp Firebase app where your project data lives.\n * @param configPermissions\n * @param reservedGroups\n * @param extraView\n * @param getPathsSuggestions\n * @param getUser\n * @param collectionInference\n */\nexport function useCollectionEditorPlugin<EC extends PersistedCollection = PersistedCollection, UserType extends User = User>\n({\n     collectionConfigController,\n     configPermissions,\n     reservedGroups,\n     extraView,\n     getPathSuggestions,\n     getUser,\n     collectionInference,\n     getData,\n     onAnalyticsEvent\n }: CollectionConfigControllerProps<EC, UserType>): FireCMSPlugin<any, any, PersistedCollection> {\n\n    return {\n        key: \"collection_editor\",\n        loading: collectionConfigController.loading,\n        provider: {\n            Component: ConfigControllerProvider,\n            props: {\n                collectionConfigController,\n                configPermissions,\n                collectionInference,\n                reservedGroups,\n                extraView,\n                getPathSuggestions,\n                getUser,\n                getData,\n                onAnalyticsEvent\n            }\n        },\n        homePage: {\n            additionalActions: <NewCollectionButton/>,\n            additionalChildrenStart: <IntroWidget/>,\n            // additionalChildrenEnd: <RootCollectionSuggestions introMode={introMode}/>,\n            CollectionActions: HomePageEditorCollectionAction,\n            AdditionalCards: NewCollectionCard,\n        },\n        collectionView: {\n            CollectionActionsStart: EditorCollectionActionStart,\n            CollectionActions: EditorCollectionAction,\n            HeaderAction: CollectionViewHeaderAction,\n            AddColumnComponent: PropertyAddColumnComponent\n        }\n    };\n}\n\nexport function IntroWidget({}: {}) {\n\n    const navigation = useNavigationController();\n    if (!navigation.topLevelNavigation)\n        throw Error(\"Navigation not ready in FireCMSHomePage\");\n\n    const authController = useAuthController();\n\n    const collectionEditorController = useCollectionEditorController();\n    const canCreateCollections = collectionEditorController.configPermissions\n        ? collectionEditorController.configPermissions({\n            user: authController.user,\n        }).createCollections\n        : true;\n\n    if (!navigation.initialised || navigation.collections === undefined || (navigation.collections ?? []).length > 0) {\n        return null;\n    }\n\n    return (\n        <Paper\n            className={\"my-4 px-4 py-6 flex flex-col  bg-white dark:bg-slate-800 gap-2\"}>\n            <Typography variant={\"subtitle2\"} className={\"uppercase\"}>No collections found</Typography>\n            <Typography>\n                Start building collections in FireCMS easily. Map them to your existing\n                database data, import from files, or use our templates.\n            </Typography>\n            {canCreateCollections && <Button\n                onClick={collectionEditorController && canCreateCollections\n                    ? () => collectionEditorController.createCollection({\n                        parentCollectionIds: [],\n                        redirect: true,\n                        sourceClick: \"new_collection_card\"\n                    })\n                    : undefined}>\n                <AddIcon/>Create your first collection\n            </Button>}\n            <Typography variant={\"caption\"} color={\"secondary\"}>\n                You can also define collections programmatically.\n            </Typography>\n        </Paper>\n    );\n}\n","import {\n    EntityCollection,\n    joinCollectionLists,\n    makePropertiesEditable,\n    ModifyCollectionProps,\n    Properties\n} from \"@firecms/core\";\nimport { PersistedCollection } from \"../types/persisted_collection\";\n\n/**\n * Function in charge of merging collections defined in code with those stored in the backend.\n */\nexport const mergeCollections = (baseCollections: EntityCollection[],\n                                 backendCollections: PersistedCollection[],\n                                 modifyCollection?: (props: ModifyCollectionProps) => EntityCollection | void\n) => {\n\n    const markAsEditable = (c: PersistedCollection) => {\n        makePropertiesEditable(c.properties as Properties);\n        c.subcollections?.forEach(markAsEditable);\n    };\n    const storedCollections = backendCollections ?? [];\n    storedCollections.forEach(markAsEditable);\n\n    console.debug(\"Collections specified in code:\", baseCollections);\n    console.debug(\"Collections stored in the backend\", storedCollections);\n    const result = joinCollectionLists(baseCollections, storedCollections, [], modifyCollection);\n    console.debug(\"Collections after joining:\", result);\n    return result;\n}\n","import { ErrorView, unslugify, useNavigationController } from \"@firecms/core\";\nimport { useCollectionEditorController } from \"../useCollectionEditorController\";\nimport { Button } from \"@firecms/ui\";\n\nexport function MissingReferenceWidget({ path: pathProp }: {\n    path: string\n}) {\n    const navigation = useNavigationController();\n    const path = getLastSegment(pathProp);\n    const parentCollectionIds = navigation.getParentCollectionIds(pathProp);\n    const collectionEditor = useCollectionEditorController();\n    return <div className={\"p-1 flex flex-col items-center\"}>\n        <ErrorView error={\"No collection for path: \" + path}/>\n        <Button className={\"mx-2\"} variant={\"outlined\"}\n                size={\"small\"}\n                onClick={() => {\n                    collectionEditor.createCollection({\n                        initialValues: { path, name: unslugify(path) },\n                        parentCollectionIds,\n                        redirect: false,\n                        sourceClick: \"missing_reference\"\n                    });\n                }}>\n            Create\n        </Button>\n    </div>;\n}\n\nfunction getParentPathSegments(path: string): string[] {\n    const segments = path.split(\"/\");\n    return segments.filter((segment, index) => index % 2 === 0 && index !== segments.length - 1);\n}\n\nfunction getLastSegment(path: string): string {\n    const segments = path.split(\"/\");\n    return segments[segments.length - 1];\n}\n"],"names":["YupSchema","Yup","CollectionDetailsForm","isNewCollection","reservedGroups","existingPaths","existingIds","groups","parentCollection","groupRef","React","values","setFieldValue","handleChange","touched","errors","setFieldTouched","isSubmitting","submitCount","useFormex","iconDialogOpen","setIconDialogOpen","useState","advancedPanelExpanded","setAdvancedPanelExpanded","updateName","name","getIn","toSnakeCase","singular","useEffect","collectionIcon","jsx","IconForView","groupOptions","group","inputFocused","autoCompleteOpen","setAutoCompleteOpen","useAutoComplete","isSubcollection","customIdValue","showErrors","Container","jsxs","Typography","Tooltip","IconButton","Chip","TextField","e","FieldCaption","cn","Field","DebouncedTextField","event","Autocomplete","index","AutocompleteItem","ExpandablePanel","SettingsIcon","Select","value","SelectItem","v","BooleanSwitchWithLabel","Dialog","SearchIconsView","icon","idToPropertiesPath","id","namespaceToPropertiesPath","namespace","namespaceToPropertiesOrderPath","getFullId","propertyKey","propertyNamespace","getFullIdPath","keyWithNamespace","EnumForm","enumValues","onValuesChanged","onError","updateIds","disabled","allowDataInference","getData","formex","useCreateFormex","enumValue","hasError","Formex","EnumFormFields","enumValuesPath","shouldUpdateId","lastInternalIdAdded","setLastInternalIdAdded","editDialogIndex","setEditDialogIndex","inferring","setInferring","inferredValues","buildEntry","internalId","justAdded","entryError","EnumEntry","inferValues","data","flatData","fieldData","currentEnumValues","newEnumValues","extractEnumFromValues","ListIcon","Button","CircularProgress","AutoAwesomeIcon","Paper","ArrayContainer","EnumEntryDialog","updateId","autoFocus","onDialogOpen","inferredEntry","shouldUpdateIdRef","idValue","labelValue","currentLabelRef","Fragment","Badge","prevProps","nextProps","equal","open","onClose","idError","DialogContent","DialogActions","SwitchControl","field","form","label","tooltip","size","allowIndeterminate","formControlLabel","checked","GeneralPropertyValidation","validationRequired","validationRequiredMessage","StringPropertyValidation","length","lowercase","matches","max","min","trim","uppercase","validationLength","validationMin","validationMax","validationTrim","validationMatches","validationLowercase","validationUppercase","matchesError","matchesValue","matchesStringValue","serializeRegExp","ArrayPropertyValidation","ValidationPanel","children","RuleIcon","EnumPropertyField","multiselect","setFieldError","snackbarContext","useSnackbarController","defaultValue","valuesEnumValues","useMemo","resolveEnumValues","enumIds","res","d","fileTypes","StoragePropertyField","multiple","existing","baseStoragePath","acceptedFiles","fileName","storagePath","storeUrl","fileNameValue","storagePathValue","storedValue","fileTypesValue","allFileTypesSelected","handleTypesChange","hasFilenameCallback","hasStoragePathCallback","FileUploadIcon","MultiSelect","selected","MultiSelectItem","Checkbox","editableProperty","property","isPropertyBuilder","eProperty","removeNonEditableProperties","properties","_","key","propertyOrBuilder","b","PropertyFieldPreview","onClick","includeName","includeEditButton","propertyConfigs","useCustomizationController","propertyConfig","getFieldConfig","borderColorClass","ErrorBoundary","PropertyConfigBadge","cardMixin","cardClickableMixin","cardSelectedMixin","NonEditablePropertyPreview","FunctionsIcon","RemoveCircleIcon","PropertyTree","selectedPropertyKey","onPropertyClick","propertiesOrderProp","additionalFields","onPropertyMove","onPropertyRemove","className","inferredPropertyKeys","collectionEditable","propertiesOrder","onDragEnd","useCallback","result","startIndex","endIndex","newPropertiesOrder","removed","DragDropContext","Droppable","droppableProvided","droppableSnapshot","additionalField","Draggable","provided","snapshot","PropertyTreeEntry","isSelected","wasSelected","isPropertyInferred","fullId","subtree","editable","defaultBorderMixin","RemoveIcon","DragHandleIcon","MapPropertyField","propertyDialogOpen","setPropertyDialogOpen","setSelectedPropertyKey","selectedPropertyNamespace","setSelectedPropertyNamespace","onPropertyCreated","currentPropertiesOrder","deleteProperty","propertiesPath","propertiesOrderPath","p","selectedPropertyFullId","selectedProperty","empty","AddIcon","PropertyFormDialog","RepeatPropertyField","ofProperty","ofPropertyError","onPropertyChanged","widget","CommonPropertyFields","disabledId","autoUpdateId","isNewProperty","ref","validate","nameError","description","descriptionError","newNameValue","newIdValue","unslugify","StringPropertyField","widgetId","BooleanPropertyField","BlockPropertyField","addChildButton","NumberPropertyValidation","validationLessThan","validationMoreThan","NumberPropertyField","ReferencePropertyField","useNavigationController","pathPath","pathValue","pathError","CollectionsSelect","error","props","navigation","collections","ungroupedCollections","col","selectedCollection","collection","SelectGroup","DateTimePropertyField","modePath","modeValue","modeError","autoValuePath","autoValueValue","autoValueError","AdvancedPropertyValidation","KeyValuePropertyField","updatePropertyFromWidget","propertyData","selectedWidgetId","updatedProperty","mergeDeep","PropertySelectItem","optionDisabled","UrlPropertyField","urlValue","supportedFieldsIds","supportedFields","DEFAULT_FIELD_CONFIGS","config","a","PropertyForm","includeIdAndName","autoOpenTypeSelect","existingProperty","inArray","existingPropertyKeys","onPropertyChangedImmediate","onDelete","initialErrors","forceShowErrors","getController","initialValue","lastSubmittedProperty","useRef","doOnPropertyChanged","params","formexController","newPropertyWithId","controller","validateName","validateId","isValidRegExp","PropertyEditFormFields","onCancel","onOkClicked","formProps","formexRef","helpers","setValues","includeIdAndTitle","selectOpen","setSelectOpen","deleteDialogOpen","setDeleteDialogOpen","selectedFieldConfigId","setSelectedFieldConfigId","getFieldId","allSupportedFields","displayedWidgets","deferredValues","useDeferredValue","nameFieldRef","selectedWidgetError","onWidgetSelectChanged","newSelectedWidgetId","childComponent","InfoLabel","baseProperty","baseFieldConfig","computedFieldConfig","DeleteIcon","DeleteConfirmationDialog","idRegEx","camelCase","str","cur","acc","GetCodeDialog","onOpenChange","snackbarController","code","JSON5","collectionToCode","Highlight","themes","style","tokens","getLineProps","getTokenProps","line","i","token","ContentCopyIcon","propertyCleanup","CollectionPropertiesEditorForm","propertyErrorsRef","onPropertyError","setDirty","extraIcon","getUser","doCollectionInference","dirty","largeLayout","useLargeLayout","asDialog","selectedPropertyIndex","setSelectedPropertyIndex","codeDialogOpen","setCodeDialogOpen","inferringProperties","setInferringProperties","newPropertyDialogOpen","setNewPropertyDialogOpen","setInferredPropertyKeys","currentPropertiesOrderRef","inferPropertiesFromData","newCollection","makePropertiesEditable","newPropertyKeys","updatedProperties","updatedPropertiesOrder","updatePropertiesOrder","getCurrentPropertiesOrder","previousId","propertyPath","previousFullId","previousPropertyPath","onPropertyErrorInternal","closePropertyDialog","emptyCollection","usedPropertiesOrder","owner","body","CodeIcon","UnsavedChangesDialog","handleOk","handleCancel","title","EntityCustomViewsSelectDialog","entityViews","view","SubcollectionsEditTab","configController","collectionInference","parentCollectionIds","contextEntityViews","subcollectionToDelete","setSubcollectionToDelete","addEntityViewDialogOpen","setAddEntityViewDialogOpen","viewToDelete","setViewToDelete","currentDialog","setCurrentDialog","subcollections","resolvedEntityViews","resolveEntityView","hardCodedEntityViews","totalEntityViews","Table","TableBody","subcollection","TableRow","TableCell","Alert","CollectionEditorDialog","selectedViewKey","productsCollectionTemplate","blogCollectionTemplate","usersCollectionTemplate","pagesCollectionTemplate","CollectionEditorWelcomeView","path","pathSuggestions","onContinue","existingCollectionPaths","loadingPathSuggestions","setLoadingPathSuggestions","filteredPathSuggestions","setFilteredPathSuggestions","suggestions","filteredSuggestions","s","c","suggestion","TemplateButton","Icon","ImportFileUpload","subtitle","Card","CollectionEditorImportMapping","importConfig","setSelectedProperty","newHeadersMapping","onPropertyTypeChanged","importKey","inferredNewProperty","buildPropertyFromData","getInferenceType","DataNewPropertiesMapping","isIdColumn","ImportNewPropertyFieldPreview","PropertySelect","fieldId","newProperty","CollectionEditorImportDataPreview","loading","setLoading","loadEntities","mappedData","convertDataToEntity","selectionController","useSelectionController","CircularProgressCenter","EntityCollectionTable","cleanPropertiesFromImport","parentSlug","slug","slugify","fullSlug","slugifiedResult","firstKey","idColumn","formDirty","setFormDirty","unsavedChangesDialogOpen","setUnsavedChangesDialogOpen","CollectionEditor","authController","useAuthController","topLevelNavigation","initialValuesProp","includeTemplates","collectionsInThisLevel","setCollection","initialLoadingCompleted","setInitialLoadingCompleted","initialCollection","randomString","initialValues","applyPropertyConfigs","coolIconKeys","CollectionEditorInternal","editedCollectionId","fullPath","handleClose","extraView","useImportConfig","initialView","currentView","setCurrentView","setError","saveCollection","updatedCollection","setNextMode","inferCollectionFromData","inferredCollection","onSubmit","newCollectionState","validation","schema","err","validatePath","formController","updatedFullPath","parentPaths","resolvedPath","getDataWithPath","onImportDataSet","buildEntityPropertiesFromData","filteredHeadingsOrder","mappedHeadings","validValues","onImportMappingComplete","Tabs","Tab","importData","ImportSaveInProgress","importedCollection","current","removeUndefined","ErrorView","ArrowBackIcon","LoadingButton","DoneIcon","rest","propertiesResult","applyPropertiesConfig","internalProperty","removeInitialAndTrailingSlashes","ConfigControllerContext","CollectionEditorContext","ConfigControllerProvider","collectionConfigController","configPermissions","getPathSuggestions","onAnalyticsEvent","navigate","useNavigate","currentPropertyDialog","setCurrentPropertyDialog","defaultConfigPermissions","editCollection","editProperty","propertyKeyWithoutNamespace","createCollection","redirect","sourceClick","url","useCollectionEditorController","useContext","EditorCollectionAction","tableController","navigationController","collectionEditorController","canEditCollection","editorButton","useCollectionsConfigController","HomePageEditorCollectionAction","permissions","onEditCollectionClicked","deleteRequested","setDeleteRequested","deleteCollection","Menu","MoreVertIcon","MenuItem","CollectionViewHeaderAction","onHover","PropertyAddColumnComponent","getDefaultPropertiesOrder","NewCollectionButton","EditorCollectionActionStart","saveDefaultFilterButton","getObjectOrNull","SaveIcon","UndoIcon","o","NewCollectionCard","context","canCreateCollections","useCollectionEditorPlugin","IntroWidget","mergeCollections","baseCollections","backendCollections","modifyCollection","markAsEditable","storedCollections","joinCollectionLists","MissingReferenceWidget","pathProp","getLastSegment","collectionEditor","segments"],"mappings":"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"}