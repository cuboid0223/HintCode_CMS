import { FirebaseApp } from "firebase/app";
import { UserManagement } from "../types";
export interface UserManagementParams {
    /**
     * The Firebase app to use for the user management. The config will be saved in the Firestore
     * collection indicated by `configPath`.
     */
    firebaseApp?: FirebaseApp;
    /**
     * Path where the plugin users configuration is stored.
     * Default: __FIRECMS/config/users
     * You can specify a different path if you want to store the user management configuration in a different place.
     * Please keep in mind that the FireCMS users are not necessarily the same as the Firebase users (but they can be).
     * The path should be relative to the root of the Firestore database, and should always have an odd number of segments.
     */
    usersPath?: string;
    /**
     * Path where the plugin roles configuration is stored.
     * Default: __FIRECMS/config/roles
     */
    rolesPath?: string;
    /**
     * Maximum number of users that can be created.
     */
    usersLimit?: number;
    /**
     * Can the logged user edit roles
     */
    canEditRoles?: boolean;
    /**
     * If there are no roles in the database, provide a button to create the default roles.
     */
    allowDefaultRolesCreation?: boolean;
    /**
     * Include the collection config permissions in the user management system.
     */
    includeCollectionConfigPermissions?: boolean;
}
/**
 * This hook is used to build a user management object that can be used to
 * manage users and roles in a Firestore backend.
 * @param backendFirebaseApp
 * @param usersPath
 * @param rolesPath
 * @param usersLimit
 * @param canEditRoles
 */
export declare function useFirestoreUserManagement({ firebaseApp, usersPath, rolesPath, usersLimit, canEditRoles, allowDefaultRolesCreation, includeCollectionConfigPermissions }: UserManagementParams): UserManagement;
