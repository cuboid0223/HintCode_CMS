{"version":3,"file":"index.es.js","sources":["../src/hooks/useFirebaseAuthController.ts","../src/hooks/useFirebaseStorageSource.ts","../src/hooks/useInitialiseFirebase.ts","../src/hooks/useAppCheck.ts","../src/utils/collections_firestore.ts","../src/utils/database.ts","../src/utils/algolia.ts","../src/utils/pinecone.ts","../src/utils/local_text_search_controller.ts","../src/hooks/useFirestoreDelegate.ts","../src/hooks/useFirebaseRealTimeDBDelegate.ts","../src/hooks/useRecaptcha.tsx","../src/components/social_icons.tsx","../src/components/FirebaseLoginView.tsx","../src/components/FireCMSFirebaseApp.tsx","../src/collection_editor/schema_inference/firestore.ts","../src/collection_editor/schema_inference/inference.ts","../src/collection_editor/infer_collection.ts"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\nimport equal from \"react-fast-compare\"\n\nimport {\n    ApplicationVerifier,\n    Auth,\n    ConfirmationResult,\n    createUserWithEmailAndPassword as createUserWithEmailAndPasswordFirebase,\n    FacebookAuthProvider,\n    fetchSignInMethodsForEmail as fetchSignInMethodsForEmailFirebase,\n    getAuth,\n    GithubAuthProvider,\n    GoogleAuthProvider,\n    OAuthProvider,\n    onAuthStateChanged,\n    signInAnonymously,\n    signInWithEmailAndPassword,\n    signInWithPhoneNumber,\n    signInWithPopup,\n    signOut,\n    TwitterAuthProvider,\n    User as FirebaseUser\n} from \"firebase/auth\";\nimport { FirebaseApp } from \"firebase/app\";\nimport { FirebaseAuthController, FirebaseSignInOption, FirebaseSignInProvider } from \"../types\";\nimport { Role, User } from \"@firecms/core\";\n\nexport interface FirebaseAuthControllerProps {\n    loading?: boolean;\n    firebaseApp?: FirebaseApp;\n    signInOptions?: Array<FirebaseSignInProvider | FirebaseSignInOption>;\n    onSignOut?: () => void;\n    defineRolesFor?: (user: User) => Promise<Role[] | undefined> | Role[] | undefined;\n}\n\n/**\n * Use this hook to build an {@link AuthController} based on Firebase Auth\n * @group Firebase\n */\nexport const useFirebaseAuthController = <ExtraData>({\n                                                         loading,\n                                                         firebaseApp,\n                                                         signInOptions,\n                                                         onSignOut: onSignOutProp,\n                                                         defineRolesFor\n                                                     }: FirebaseAuthControllerProps): FirebaseAuthController<ExtraData> => {\n\n    const [loggedUser, setLoggedUser] = useState<FirebaseUser | null | undefined>(undefined); // logged user, anonymous or logged out\n    const [authError, setAuthError] = useState<any>();\n    const [authProviderError, setAuthProviderError] = useState<any>();\n    const [initialLoading, setInitialLoading] = useState<boolean>(true);\n    const [authLoading, setAuthLoading] = useState(true);\n    const [loginSkipped, setLoginSkipped] = useState<boolean>(false);\n    const [confirmationResult, setConfirmationResult] = useState<undefined | ConfirmationResult>();\n    const [roles, setRoles] = useState<Role[] | undefined>();\n    const [extra, setExtra] = useState<any>();\n\n    const authRef = useRef(firebaseApp ? getAuth(firebaseApp) : null);\n\n    const updateUser = useCallback(async (user: FirebaseUser | null, initialize?: boolean) => {\n        console.log(\"Updating user\", user);\n        if (loading) return;\n        // if (defineRolesFor && user) {\n        //     const userRoles = await defineRolesFor(user);\n        //     setRoles(userRoles);\n        // }\n        setLoggedUser(user);\n        setAuthLoading(false);\n        if (initialize) {\n            setInitialLoading(false);\n        }\n    }, [loading]);\n\n    const updateRoles = useCallback(async (user: FirebaseUser | null) => {\n        if (defineRolesFor && user) {\n            const userRoles = await defineRolesFor(user);\n            if (!equal(userRoles, roles)) {\n                setRoles(userRoles);\n            }\n        }\n    }, [defineRolesFor, roles]);\n\n    useEffect(() => {\n        if (updateRoles && loggedUser) {\n            updateRoles(loggedUser);\n        }\n    }, [updateRoles, loggedUser]);\n\n    useEffect(() => {\n        if (!firebaseApp) return;\n        try {\n            const auth = getAuth(firebaseApp);\n            authRef.current = auth;\n            setAuthError(undefined);\n            updateUser(auth.currentUser, false)\n            return onAuthStateChanged(\n                auth,\n                async (user) => {\n                    console.log(\"User state changed\", user);\n                    await updateUser(user, true);\n                },\n                error => setAuthProviderError(error)\n            );\n        } catch (e) {\n            setAuthError(e);\n            setInitialLoading(false);\n            return () => {\n            };\n        }\n    }, [firebaseApp, updateUser]);\n\n    useEffect(() => {\n        if (!loading && authRef.current) {\n            updateUser(authRef.current.currentUser, false);\n        }\n    }, [loading, updateUser]);\n\n    const getProviderOptions = useCallback((providerId: FirebaseSignInProvider): FirebaseSignInOption | undefined => {\n        return signInOptions?.find((option) => {\n            if (option === null) throw Error(\"useFirebaseAuthController\");\n            if (typeof option === \"object\" && option.provider === providerId)\n                return option as FirebaseSignInOption;\n            return undefined;\n        }) as FirebaseSignInOption | undefined;\n    }, [signInOptions]);\n\n    const googleLogin = useCallback(() => {\n        const provider = new GoogleAuthProvider();\n        const options = getProviderOptions(\"google.com\");\n        if (options?.scopes)\n            options.scopes.forEach((scope) => provider.addScope(scope));\n        if (options?.customParameters) {\n            provider.setCustomParameters(options.customParameters);\n        } else {\n            provider.setCustomParameters({\n                prompt: \"select_account\"\n            });\n        }\n        const auth = authRef.current;\n        if (!auth) throw Error(\"No auth\");\n        signInWithPopup(auth, provider).catch(setAuthProviderError);\n    }, [getProviderOptions]);\n\n    const getAuthToken = useCallback(async (): Promise<string> => {\n        if (!loggedUser)\n            throw Error(\"No client user is logged in\");\n        return loggedUser.getIdToken();\n    }, [loggedUser]);\n\n    const emailPasswordLogin = useCallback((email: string, password: string) => {\n        const auth = authRef.current;\n        if (!auth) throw Error(\"No auth\");\n        setAuthLoading(true);\n        signInWithEmailAndPassword(auth, email, password)\n            .catch(setAuthProviderError)\n            .then(() => setAuthLoading(false));\n    }, []);\n\n    const createUserWithEmailAndPassword = useCallback((email: string, password: string) => {\n        const auth = authRef.current;\n        if (!auth) throw Error(\"No auth\");\n        setAuthLoading(true);\n        createUserWithEmailAndPasswordFirebase(auth, email, password)\n            .catch(setAuthProviderError)\n            .then(() => setAuthLoading(false));\n    }, []);\n\n    const fetchSignInMethodsForEmail = useCallback((email: string): Promise<string[]> => {\n        const auth = authRef.current;\n        if (!auth) throw Error(\"No auth\");\n        setAuthLoading(true);\n        return fetchSignInMethodsForEmailFirebase(auth, email)\n            .then((res) => {\n                setAuthLoading(false);\n                return res;\n            });\n    }, []);\n\n    const onSignOut = useCallback(() => {\n        const auth = authRef.current;\n        if (!auth) throw Error(\"No auth\");\n        signOut(auth)\n            .then(_ => {\n                setLoggedUser(null);\n                setRoles(undefined);\n                setAuthProviderError(null);\n                onSignOutProp && onSignOutProp();\n            });\n        setLoginSkipped(false);\n    }, [onSignOutProp]);\n\n    const doOauthLogin = useCallback((auth: Auth, provider: OAuthProvider | FacebookAuthProvider | GithubAuthProvider | TwitterAuthProvider) => {\n        setAuthLoading(true);\n        signInWithPopup(auth, provider)\n            .catch(setAuthProviderError).then(() => setAuthLoading(false));\n    }, []);\n\n    const anonymousLogin = useCallback(() => {\n        const auth = authRef.current;\n        if (!auth) throw Error(\"No auth\");\n        setAuthLoading(true);\n        signInAnonymously(auth)\n            .catch(setAuthProviderError)\n            .then(() => setAuthLoading(false));\n    }, []);\n\n    const phoneLogin = useCallback((phone: string, applicationVerifier: ApplicationVerifier) => {\n        const auth = authRef.current;\n        if (!auth) throw Error(\"No auth\");\n        setAuthLoading(true);\n        return signInWithPhoneNumber(auth, phone, applicationVerifier)\n            .catch(setAuthProviderError)\n            .then((res) => {\n                setAuthLoading(false);\n                setConfirmationResult(res ?? undefined);\n            });\n    }, []);\n\n    const appleLogin = useCallback(() => {\n        const provider = new OAuthProvider(\"apple.com\");\n        const options = getProviderOptions(\"apple.com\");\n        if (options?.scopes)\n            options.scopes.forEach((scope) => provider.addScope(scope));\n        if (options?.customParameters)\n            provider.setCustomParameters(options.customParameters);\n        const auth = authRef.current;\n        if (!auth) throw Error(\"No auth\");\n        doOauthLogin(auth, provider);\n    }, [doOauthLogin, getProviderOptions]);\n\n    const facebookLogin = useCallback(() => {\n        const provider = new FacebookAuthProvider();\n        const options = getProviderOptions(\"facebook.com\");\n        if (options?.scopes)\n            options.scopes.forEach((scope) => provider.addScope(scope));\n        if (options?.customParameters)\n            provider.setCustomParameters(options.customParameters);\n        const auth = authRef.current;\n        if (!auth) throw Error(\"No auth\");\n        doOauthLogin(auth, provider);\n    }, [doOauthLogin, getProviderOptions]);\n\n    const githubLogin = useCallback(() => {\n        const provider = new GithubAuthProvider();\n        const options = getProviderOptions(\"github.com\");\n        if (options?.scopes)\n            options.scopes.forEach((scope) => provider.addScope(scope));\n        if (options?.customParameters)\n            provider.setCustomParameters(options.customParameters);\n        const auth = authRef.current;\n        if (!auth) throw Error(\"No auth\");\n        doOauthLogin(auth, provider);\n    }, [doOauthLogin, getProviderOptions]);\n\n    const microsoftLogin = useCallback(() => {\n        const provider = new OAuthProvider(\"microsoft.com\");\n        const options = getProviderOptions(\"microsoft.com\");\n        if (options?.scopes)\n            options.scopes.forEach((scope) => provider.addScope(scope));\n        if (options?.customParameters)\n            provider.setCustomParameters(options.customParameters);\n        const auth = authRef.current;\n        if (!auth) throw Error(\"No auth\");\n        doOauthLogin(auth, provider);\n    }, [doOauthLogin, getProviderOptions]);\n\n    const twitterLogin = useCallback(() => {\n        const provider = new TwitterAuthProvider();\n        const options = getProviderOptions(\"twitter.com\");\n        if (options?.customParameters)\n            provider.setCustomParameters(options.customParameters);\n        const auth = authRef.current;\n        if (!auth) throw Error(\"No auth\");\n        doOauthLogin(auth, provider);\n    }, [doOauthLogin, getProviderOptions]);\n\n    const skipLogin = useCallback(() => {\n        setLoginSkipped(true);\n        setLoggedUser(null);\n        setRoles(undefined);\n    }, []);\n\n    const firebaseUserWrapper = loggedUser\n        ? {\n            ...loggedUser,\n            roles,\n            firebaseUser: loggedUser\n        }\n        : null;\n\n    return {\n        user: firebaseUserWrapper,\n        roles,\n        setUser: updateUser,\n        setRoles,\n        authProviderError,\n        authLoading,\n        initialLoading: loading || initialLoading,\n        signOut: onSignOut,\n        getAuthToken,\n        googleLogin,\n        skipLogin,\n        loginSkipped,\n        emailPasswordLogin,\n        createUserWithEmailAndPassword,\n        fetchSignInMethodsForEmail,\n        anonymousLogin,\n        phoneLogin,\n        appleLogin,\n        facebookLogin,\n        githubLogin,\n        microsoftLogin,\n        twitterLogin,\n        confirmationResult,\n        extra,\n        setExtra\n    };\n};\n","import { FirebaseApp } from \"firebase/app\";\nimport { getDownloadURL, getMetadata, getStorage, ref, uploadBytes } from \"firebase/storage\";\nimport { DownloadConfig, DownloadMetadata, StorageSource, UploadFileProps } from \"@firecms/core\";\n\n/**\n * @group Firebase\n */\nexport interface FirebaseStorageSourceProps {\n    firebaseApp?: FirebaseApp\n    bucketUrl?: string\n}\n\n/**\n * Use this hook to build an {@link StorageSource} based on Firebase storage\n * @group Firebase\n */\nexport function useFirebaseStorageSource({ firebaseApp, bucketUrl }: FirebaseStorageSourceProps): StorageSource {\n    const urlsCache: Record<string, DownloadConfig> = {};\n    return {\n        uploadFile({ file, fileName, path, metadata, bucket }: UploadFileProps)\n            : Promise<any> {\n            if (!firebaseApp) throw Error(\"useFirebaseStorageSource Firebase not initialised\");\n            const storageBucketUrl = bucket ?? bucketUrl;\n            const storage = getStorage(firebaseApp, storageBucketUrl);\n            if (!storage) throw Error(\"useFirebaseStorageSource Firebase not initialised\");\n            const usedFilename = fileName ?? file.name;\n            console.debug(\"Uploading file\", usedFilename, file, path, metadata);\n            return uploadBytes(ref(storage, `${path}/${usedFilename}`), file, metadata).then(snapshot => ({\n                path: snapshot.ref.fullPath\n            }));\n        },\n\n        async getFile(path: string, bucket?: string): Promise<File | null> {\n            try {\n                if (!firebaseApp) throw Error(\"useFirebaseStorageSource Firebase not initialised\");\n                const storageBucketUrl = bucket ?? bucketUrl;\n                const storage = getStorage(firebaseApp, storageBucketUrl);\n                if (!storage) throw Error(\"useFirebaseStorageSource Firebase not initialised\");\n                const fileRef = ref(storage, path);\n                const url = await getDownloadURL(fileRef);\n                const response = await fetch(url);\n                const blob = await response.blob();\n                return new File([blob], path);\n            } catch (e: any) {\n                if (e?.code === \"storage/object-not-found\") return null;\n                throw e;\n            }\n        },\n\n        async getDownloadURL(storagePathOrUrl: string, bucket?: string): Promise<DownloadConfig> {\n            if (!firebaseApp) throw Error(\"useFirebaseStorageSource Firebase not initialised\");\n            const storageBucketUrl = bucket ?? bucketUrl;\n            const storage = getStorage(firebaseApp, storageBucketUrl);\n            if (!storage) throw Error(\"useFirebaseStorageSource Firebase not initialised\");\n            if (urlsCache[storagePathOrUrl])\n                return urlsCache[storagePathOrUrl];\n            try {\n                const fileRef = ref(storage, storagePathOrUrl);\n                const [url, metadata] = await Promise.all([getDownloadURL(fileRef), getMetadata(fileRef)]);\n                const result: DownloadConfig = {\n                    url,\n                    metadata: metadata as DownloadMetadata\n                }\n                urlsCache[storagePathOrUrl] = result;\n                return result;\n            } catch (e: any) {\n                if (e?.code === \"storage/object-not-found\") return { url: null, fileNotFound: true };\n                throw e;\n            }\n        }\n    };\n}\n","import { useCallback, useEffect, useState } from \"react\";\n\nimport { deleteApp, FirebaseApp, getApps, initializeApp } from \"firebase/app\";\n\n/**\n * @group Firebase\n */\nexport interface InitialiseFirebaseResult {\n    firebaseConfigLoading: boolean,\n    firebaseApp?: FirebaseApp;\n    configError?: string,\n    firebaseConfigError?: Error\n}\n\nconst hostingError = \"It seems like the provided Firebase config is not correct. If you \\n\" +\n    \"are using the credentials provided automatically by Firebase \\n\" +\n    \"Hosting, make sure you link your Firebase app to Firebase Hosting. \\n\";\n\n/**\n * Function used to initialise Firebase, either by using the provided config,\n * or by fetching it by Firebase Hosting, if not specified.\n *\n * It works as a hook that gives you the loading state and the used\n * configuration.\n *\n * You most likely only need to use this if you are developing a custom app\n * that is not using {@link FireCMSApp}. You can also not use this component\n * and initialise Firebase yourself.\n *\n * @param onFirebaseInit\n * @param firebaseConfig\n * @param fromUrl\n * @param name\n * @param authDomain\n * @group Firebase\n */\nexport function useInitialiseFirebase({\n                                          firebaseConfig,\n                                          fromUrl,\n                                          onFirebaseInit,\n                                          name,\n                                          authDomain\n                                      }: {\n    firebaseConfig?: Record<string, unknown>,\n    fromUrl?: string | undefined,\n    onFirebaseInit?: ((config: object, firebaseApp: FirebaseApp) => void) | undefined,\n    name?: string;\n    authDomain?: string;\n}): InitialiseFirebaseResult {\n\n    const [firebaseApp, setFirebaseApp] = useState<FirebaseApp | undefined>();\n    const [firebaseConfigLoading, setFirebaseConfigLoading] = useState<boolean>(false);\n    const [configError, setConfigError] = useState<string>();\n\n    const initFirebase = useCallback((config: Record<string, unknown>) => {\n        try {\n            const targetName = name ?? \"[DEFAULT]\";\n            const currentApps = getApps();\n            const existingApp = currentApps.find(app => app.name === targetName);\n            if (existingApp) {\n                deleteApp(existingApp);\n            }\n            const initialisedFirebaseApp = initializeApp(config, targetName);\n            setConfigError(undefined);\n            setFirebaseConfigLoading(false);\n            setFirebaseApp(initialisedFirebaseApp);\n        } catch (e: any) {\n            console.error(\"Error initialising Firebase\", e);\n            setConfigError(hostingError + \"\\n\" + (e.message ?? JSON.stringify(e)));\n        }\n    }, [name]);\n\n    useEffect(() => {\n        if (onFirebaseInit && firebaseConfig && firebaseApp) {\n            onFirebaseInit(firebaseConfig, firebaseApp);\n        }\n    }, [firebaseApp]);\n\n    useEffect(() => {\n\n        setFirebaseConfigLoading(true);\n\n        function fetchFromUrl(url: string) {\n            fetch(url)\n                .then(async response => {\n                    console.debug(\"Firebase init response\", response.status);\n                    if (response && response.status < 300) {\n                        const config = await response.json();\n                        if (authDomain) config.authDomain = authDomain;\n                        initFirebase(config);\n                    }\n                })\n                .catch(e => {\n                        setFirebaseConfigLoading(false);\n                        setConfigError(\n                            \"Could not load Firebase configuration from Firebase hosting. \" +\n                            \"If the app is not deployed in Firebase hosting, you need to specify the configuration manually\" +\n                            e.toString()\n                        );\n                    }\n                );\n        }\n\n        if (firebaseConfig) {\n            initFirebase(firebaseConfig);\n        } else {\n            if (fromUrl) {\n                fetchFromUrl(fromUrl);\n            } else if (process.env.NODE_ENV === \"production\") {\n                fetchFromUrl(\"/__/firebase/init.json\");\n            } else {\n                setFirebaseConfigLoading(false);\n                setConfigError(\n                    \"You need to deploy the app to Firebase hosting or specify a Firebase configuration object\"\n                );\n            }\n        }\n    }, []);\n\n    return {\n        firebaseApp,\n        firebaseConfigLoading,\n        configError\n    };\n}\n","import React, { useCallback, useEffect } from \"react\";\n\nimport { AppCheck, getToken, initializeAppCheck } from \"firebase/app-check\";\nimport { FirebaseApp } from \"firebase/app\";\nimport { AppCheckOptions } from \"../types\";\n\n/**\n * @group Firebase\n */\nexport interface InitializeAppCheckProps {\n    firebaseApp?: FirebaseApp;\n    options?: AppCheckOptions;\n}\n\nexport interface InitializeAppCheckResult {\n    loading: boolean;\n    appCheckVerified?: boolean;\n    error?: any;\n}\n\n/**\n * Function used to initialise Firebase App Check.\n *\n * @group Firebase\n */\nexport function useAppCheck({\n                                firebaseApp,\n                                options,\n                            }: InitializeAppCheckProps): InitializeAppCheckResult {\n    if (options?.debugToken) {\n        Object.assign(window, {\n            FIREBASE_APPCHECK_DEBUG_TOKEN: options?.debugToken\n        });\n    }\n\n    const [appCheckLoading, setAppCheckLoading] = React.useState<boolean>(false);\n    const [appCheckVerified, setAppCheckVerified] = React.useState<boolean | undefined>(undefined);\n    const [error, setError] = React.useState<any>();\n\n    const verifyToken = useCallback(async (appCheck: AppCheck) => {\n        try {\n            const token = await getToken(appCheck, options?.forceRefresh);\n            console.debug(\"App Check token:\", token);\n            if (!token) {\n                setError(\"App Check failed.\");\n                setAppCheckVerified(false);\n            } else {\n                setAppCheckVerified(true);\n                console.debug(\"App Check success.\");\n            }\n        } catch (e: any) {\n            console.error(e);\n            setError(e.message);\n        }\n    }, [options?.forceRefresh]);\n\n    useEffect(() => {\n        if (!options) return;\n        if (!firebaseApp) return;\n        if (appCheckVerified !== undefined) return;\n\n        setAppCheckLoading(true);\n\n        const {\n            provider,\n            isTokenAutoRefreshEnabled\n        } = options;\n        const appCheck = initializeAppCheck(firebaseApp, {\n            provider,\n            isTokenAutoRefreshEnabled\n        });\n\n        verifyToken(appCheck)\n            .then(() => {\n                setAppCheckLoading(false);\n            });\n\n    }, [appCheckVerified, firebaseApp, options, verifyToken]);\n\n    return {\n        loading: appCheckLoading,\n        appCheckVerified,\n        error\n    };\n}\n","import { deleteField, DocumentSnapshot } from \"firebase/firestore\";\nimport {\n    CMSType,\n    COLLECTION_PATH_SEPARATOR,\n    makePropertiesEditable,\n    PermissionsBuilder,\n    Properties,\n    PropertiesOrBuilders,\n    Property,\n    PropertyConfig,\n    removeFunctions,\n    removePropsIfExisting,\n    sortProperties,\n    stripCollectionPath\n} from \"@firecms/core\";\nimport { PersistedCollection } from \"@firecms/collection_editor\";\n\nexport function buildCollectionId(idOrPath: string, parentCollectionIds?: string[]): string {\n    if (!parentCollectionIds)\n        return stripCollectionPath(idOrPath);\n    return [...parentCollectionIds.map(stripCollectionPath), stripCollectionPath(idOrPath)].join(COLLECTION_PATH_SEPARATOR);\n}\n\nexport function setUndefinedToDelete(data: any): any {\n    if (Array.isArray(data)) {\n        return data.map(v => setUndefinedToDelete(v));\n    } else if (typeof data === \"object\") {\n        return Object.entries(data)\n            .map(([key, value]) => ({ [key]: setUndefinedToDelete(value) }))\n            .reduce((a, b) => ({ ...a, ...b }), {});\n    } else if (data === undefined) {\n        return deleteField();\n    }\n    return data;\n}\n\nexport const docsToCollectionTree = (docs: DocumentSnapshot[]): PersistedCollection[] => {\n\n    const collectionsMap = docs.map((doc) => {\n        const id: string = doc.id;\n        const collection = docToCollection(doc);\n        return { [id]: collection };\n    }).reduce((a, b) => ({ ...a, ...b }), {});\n\n    const orderedKeys = Object.keys(collectionsMap).sort((a, b) => b.split(COLLECTION_PATH_SEPARATOR).length - a.split(COLLECTION_PATH_SEPARATOR).length);\n\n    orderedKeys.forEach((id) => {\n        const collection = collectionsMap[id];\n        if (id.includes(COLLECTION_PATH_SEPARATOR)) {\n            const parentId = id.split(COLLECTION_PATH_SEPARATOR).slice(0, -1).join(COLLECTION_PATH_SEPARATOR);\n            const parentCollection = collectionsMap[parentId];\n            if (parentCollection)\n                parentCollection.subcollections = [...(parentCollection.subcollections ?? []), collection];\n            delete collectionsMap[id];\n        }\n    });\n\n    return Object.values(collectionsMap);\n}\n\nexport const docToCollection = (doc: DocumentSnapshot): PersistedCollection => {\n    const data = doc.data();\n    if (!data)\n        throw Error(\"Entity collection has not been persisted correctly\");\n    const propertiesOrder = data.propertiesOrder;\n    const properties = data.properties as Properties ?? {};\n    makePropertiesEditable(properties);\n    const sortedProperties = sortProperties(properties, propertiesOrder);\n    return {\n        ...data,\n        properties: sortedProperties,\n        id: data.id ?? data.alias ?? data.path\n    } as PersistedCollection;\n}\n\nexport function prepareCollectionForPersistence<M extends {\n    [Key: string]: CMSType\n}>(collection: Partial<PersistedCollection<M>>, propertyConfigs: Record<string, PropertyConfig>) {\n\n    const { properties: inputProperties, ...rest } = collection;\n    const cleanedProperties = inputProperties ? cleanPropertyConfigs(inputProperties, propertyConfigs) : undefined;\n    const properties = cleanedProperties ? setUndefinedToDelete(removeFunctions(cleanedProperties)) : undefined;\n    let newCollection: Partial<PersistedCollection> = {};\n    if (rest) {\n        newCollection = {\n            ...rest\n        };\n    }\n    if (properties) {\n        newCollection.properties = properties;\n    }\n    if (rest.propertiesOrder || properties) {\n        newCollection.propertiesOrder = removeDuplicates(rest.propertiesOrder ?? Object.keys(properties));\n    }\n\n    delete newCollection.permissions;\n    if (newCollection.entityViews) {\n        newCollection.entityViews = newCollection.entityViews.filter(view => typeof view === \"string\");\n    }\n    delete newCollection.editable;\n    delete newCollection.additionalFields;\n    delete newCollection.callbacks;\n    delete newCollection.Actions;\n    delete newCollection.entityActions;\n    delete newCollection.selectionController;\n    delete newCollection.subcollections;\n    delete newCollection.exportable;\n    return newCollection;\n}\n\nfunction cleanPropertyConfigs(properties: PropertiesOrBuilders<any>, propertyConfigs: Record<string, PropertyConfig>) {\n    const res: Record<string, Property> = {};\n    Object.entries(properties).forEach(([key, property]) => {\n        if (typeof property === \"object\") {\n\n            const config = property.propertyConfig ? propertyConfigs[property.propertyConfig] : undefined;\n\n            let cleanProperty: any;\n            if (config?.property) {\n                cleanProperty = removePropsIfExisting(property, config?.property);\n            } else {\n                cleanProperty = property;\n            }\n            res[key] = { ...cleanProperty };\n        }\n    });\n    return res;\n}\n\nfunction removeDuplicates<T>(array: T[]): T[] {\n    return [...new Set(array)];\n}\n","import { FirebaseApp } from \"firebase/app\";\nimport {\n    collection,\n    getDocs,\n    getFirestore,\n    limit as limitClause,\n    query,\n    QueryDocumentSnapshot\n} from \"firebase/firestore\";\n\nexport async function getFirestoreDataInPath(firebaseApp: FirebaseApp, path: string, parentPaths: string[], limit: number): Promise<object[]> {\n    console.debug(\"getFirestoreDataInPath\", path, limit)\n    const firestore = getFirestore(firebaseApp);\n    if (!parentPaths) {\n        const q = query(collection(firestore, path), limitClause(limit));\n        return getDocs(q).then((querySnapshot) => {\n            return querySnapshot.docs.map(doc => doc.data());\n        });\n    } else {\n        let currentDocs: QueryDocumentSnapshot[] | undefined = undefined;\n        let index = 0;\n        const allPaths = parentPaths;\n        allPaths.push(path);\n        let parentPath: string | undefined = allPaths[0];\n        while (parentPath) {\n            if (currentDocs) {\n                currentDocs = (await Promise.all(currentDocs.map(async (doc) => {\n                    const q = query(collection(firestore, doc.ref.path, parentPath as string), limitClause(5));\n                    return (await getDocs(q)).docs;\n                }))).flat();\n            } else {\n                const q = query(collection(firestore, parentPath), limitClause(5));\n                currentDocs = (await getDocs(q)).docs;\n            }\n            index++;\n            parentPath = index < allPaths.length ? allPaths[index] : undefined;\n        }\n        return currentDocs ? currentDocs.map(doc => doc.data()) : [];\n    }\n}\n","import { SearchIndex } from \"algoliasearch\";\nimport { FirestoreTextSearchController, FirestoreTextSearchControllerBuilder } from \"../types\";\nimport { EntityCollection, ResolvedEntityCollection } from \"@firecms/core\";\n\n/**\n * Utility function to perform a text search in an algolia index,\n * returning the ids of the entities.\n * @param index\n * @param query\n * @group Firebase\n */\nexport function performAlgoliaTextSearch(index: SearchIndex, query: string): Promise<readonly string[]> {\n\n    console.debug(\"Performing Algolia query\", index, query);\n    return index\n        .search(query)\n        .then(({ hits }: any) => {\n            return hits.map((hit: any) => hit.objectID as string);\n        })\n        .catch((err: any) => {\n            console.error(err);\n            return [];\n        });\n}\n\nexport function buildAlgoliaSearchController({\n                                                 isPathSupported,\n                                                 search\n                                             }: {\n    isPathSupported: (path: string) => boolean,\n    search: (props: {\n        searchString: string,\n        path: string\n    }) => Promise<readonly string[]> | undefined,\n}): FirestoreTextSearchControllerBuilder {\n    return (props): FirestoreTextSearchController => {\n\n        const init = (props: {\n            path: string,\n            collection?: EntityCollection | ResolvedEntityCollection\n        }) => {\n            // do nothing\n            return Promise.resolve(isPathSupported(props.path));\n        }\n\n        return {\n            init,\n            search\n        }\n    }\n\n}\n","import { User as FirebaseUser } from \"firebase/auth\";\nimport { FirestoreTextSearchController, FirestoreTextSearchControllerBuilder } from \"../types\";\nimport { EntityCollection, ResolvedEntityCollection } from \"@firecms/core\";\n\nconst DEFAULT_SERVER = \"https://api-drplyi3b6q-ey.a.run.app\";\n\n/**\n * Utility function to perform a text search in an algolia index,\n * returning the ids of the entities.\n * @param index\n * @param query\n * @group Firebase\n */\nexport async function performPineconeTextSearch({\n                                                   host = DEFAULT_SERVER,\n                                                   firebaseToken,\n                                                   projectId,\n                                                   collectionPath,\n                                                   query\n                                               }: {\n    host?: string,\n    firebaseToken: string,\n    collectionPath: string,\n    projectId: string,\n    query: string\n}): Promise<readonly string[]> {\n\n    console.debug(\"Performing Pinecone query\", collectionPath, query);\n    const response = await fetch((host ?? DEFAULT_SERVER) + `/projects/${projectId}/search/${collectionPath}`,\n        {\n            // mode: \"no-cors\",\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Basic ${firebaseToken}`,\n                // \"x-de-version\": version\n            },\n            body: JSON.stringify({\n                query\n            })\n        });\n\n    const promise = await response.json();\n    return promise.data.ids;\n\n}\n\nexport function buildPineconeSearchController({\n                                                 isPathSupported,\n                                                 search\n                                             }: {\n    isPathSupported: (path: string) => boolean,\n    search: (props: {\n        searchString: string,\n        path: string,\n        currentUser: FirebaseUser\n    }) => Promise<readonly string[]> | undefined,\n}): FirestoreTextSearchControllerBuilder {\n    return (props): FirestoreTextSearchController => {\n\n        const init = (props: {\n            path: string,\n            collection?: EntityCollection | ResolvedEntityCollection\n        }) => {\n            // do nothing\n            return Promise.resolve(isPathSupported(props.path));\n        }\n\n        return {\n            init,\n            search\n        }\n    }\n\n}\n","import { collection, getFirestore, onSnapshot, query } from \"firebase/firestore\";\nimport { FirestoreTextSearchController, FirestoreTextSearchControllerBuilder } from \"../types\";\n// @ts-ignore\nimport * as JsSearch from \"js-search\";\nimport { FirebaseApp } from \"firebase/app\";\nimport { EntityCollection, ResolvedEntityCollection } from \"@firecms/core\";\n\nconst MAX_SEARCH_RESULTS = 100;\n\nexport const localSearchControllerBuilder: FirestoreTextSearchControllerBuilder = ({\n                                                                                       firebaseApp,\n                                                                                   }: {\n\n    firebaseApp: FirebaseApp,\n}): FirestoreTextSearchController => {\n\n    let currentPath: string | undefined;\n    const indexes: Record<string, JsSearch.Search> = {};\n    const listeners: Record<string, () => void> = {};\n\n    const destroyListener = (path: string) => {\n        if (listeners[path]) {\n            listeners[path]();\n            delete listeners[path];\n        }\n    }\n\n    const init = ({\n                      path,\n                      collection: collectionProp\n                  }: {\n        path: string,\n        collection?: EntityCollection | ResolvedEntityCollection\n    }): Promise<boolean> => {\n\n        console.debug(\"Init local search controller\", path, collectionProp)\n\n        if (currentPath && path !== currentPath) {\n            destroyListener(currentPath)\n        }\n\n        currentPath = path;\n\n        return new Promise((resolve, reject) => {\n            if (!indexes[path] && collectionProp) {\n                console.debug(\"Init local search controller\", path);\n                indexes[path] = buildIndex(collectionProp);\n                const firestore = getFirestore(firebaseApp);\n                const col = collection(firestore, path);\n                console.log(\"Listening to collection\", path, col);\n                listeners[path] = onSnapshot(query(col),\n                    {\n                        next: (snapshot) => {\n                            const docs = snapshot.docs.map(doc => ({\n                                id: doc.id,\n                                ...doc.data()\n                            }));\n                            console.log(\"Added docs to index\", path, docs.length);\n                            indexes[path].addDocuments(docs);\n                            resolve(true);\n                        },\n                        error: (e) => {\n                            console.error(\"Error initializing local search controller\", path);\n                            console.error(e);\n                            reject(e);\n                        }\n                    }\n                );\n            }\n        });\n    }\n\n    const search = async ({ searchString, path }: {\n        searchString: string,\n        path: string\n    }) => {\n        const index = indexes[path];\n        if (!index) {\n            throw new Error(`Index not found for path ${path}`);\n        }\n        const searchResult = await index.search(searchString);\n        return searchResult.splice(0, MAX_SEARCH_RESULTS).map((e: any) => e.id);\n    };\n\n    return {\n        init,\n        search,\n    }\n}\n\nfunction buildIndex(collection: EntityCollection | ResolvedEntityCollection) {\n    const search = new JsSearch.Search(\"id\");\n    search.addIndex(\"id\");\n    Object.entries(collection.properties).forEach(([key, property]) => {\n        search.addIndex(key);\n    });\n    return search;\n}\n","import {\n    DataSource,\n    DataSourceDelegate,\n    DeleteEntityProps,\n    Entity,\n    EntityCollection,\n    EntityReference,\n    FetchCollectionDelegateProps,\n    FetchEntityProps,\n    FilterCombination,\n    FilterValues,\n    GeoPoint,\n    ListenCollectionDelegateProps,\n    ListenEntityProps,\n    ResolvedEntityCollection,\n    SaveEntityProps,\n    WhereFilterOp\n} from \"@firecms/core\";\nimport {\n    collection as collectionClause,\n    collectionGroup as collectionGroupClause,\n    CollectionReference,\n    deleteDoc,\n    deleteField,\n    doc,\n    DocumentReference,\n    DocumentSnapshot,\n    Firestore,\n    GeoPoint as FirestoreGeoPoint,\n    getCountFromServer,\n    getDoc,\n    getDocs,\n    getFirestore,\n    limit as limitClause,\n    onSnapshot,\n    orderBy as orderByClause,\n    Query,\n    query,\n    QueryConstraint,\n    serverTimestamp,\n    setDoc,\n    startAfter as startAfterClause,\n    Timestamp,\n    where as whereClause\n} from \"firebase/firestore\";\nimport { FirebaseApp } from \"firebase/app\";\nimport { FirestoreTextSearchController, FirestoreTextSearchControllerBuilder } from \"../types/text_search\";\nimport { useCallback, useEffect, useRef } from \"react\";\nimport { localSearchControllerBuilder } from \"../utils\";\nimport { getAuth } from \"firebase/auth\";\n\n/**\n * @group Firebase\n */\nexport interface FirestoreDataSourceProps {\n    firebaseApp?: FirebaseApp,\n    /**\n     * You can use this controller to return a list of ids from a search index, given a\n     * `path` and a `searchString`.\n     */\n    textSearchControllerBuilder?: FirestoreTextSearchControllerBuilder,\n\n    /**\n     * Fallback to local text search if no text search controller is specified,\n     * or if the controller does not support the given path.\n     */\n    localTextSearchEnabled?: boolean,\n\n    /**\n     * Use this builder to indicate which indexes are available in your\n     * Firestore database. This is used to allow filtering and sorting\n     * for multiple fields in the CMS.\n     */\n    firestoreIndexesBuilder?: FirestoreIndexesBuilder;\n}\n\nexport type FirestoreIndexesBuilder = (params: {\n    path: string,\n    collection: EntityCollection<any>,\n}) => FilterCombination<string>[] | undefined\n\nexport type FirestoreDelegate = DataSourceDelegate & {\n\n    initTextSearchController: (props: {\n        path: string,\n        collection?: EntityCollection | ResolvedEntityCollection\n    }) => Promise<boolean>,\n}\n\n/**\n * Use this hook to build a {@link DataSource} based on Firestore\n * @param firebaseApp\n * @param textSearchControllerBuilder\n * @param collectionRegistry\n * @group Firebase\n */\nexport function useFirestoreDelegate({\n                                         firebaseApp,\n                                         textSearchControllerBuilder,\n                                         firestoreIndexesBuilder,\n                                         localTextSearchEnabled\n                                     }: FirestoreDataSourceProps): FirestoreDelegate {\n\n    const searchControllerRef = useRef<FirestoreTextSearchController>();\n\n    useEffect(() => {\n        if (!searchControllerRef.current && firebaseApp) {\n            if ((textSearchControllerBuilder || localTextSearchEnabled) && !searchControllerRef.current) {\n                searchControllerRef.current = buildTextSearchControllerWithLocalSearch({\n                    firebaseApp,\n                    textSearchControllerBuilder,\n                    localTextSearchEnabled: localTextSearchEnabled ?? false\n                });\n            }\n        }\n    }, [firebaseApp, localTextSearchEnabled, textSearchControllerBuilder]);\n\n    const buildQuery = useCallback(<M>(path: string,\n                                       filter: FilterValues<Extract<keyof M, string>> | undefined,\n                                       orderBy: string | undefined,\n                                       order: \"desc\" | \"asc\" | undefined,\n                                       startAfter: any[] | undefined,\n                                       limit: number | undefined,\n                                       collectionGroup = false) => {\n\n        if (!firebaseApp) throw Error(\"useFirestoreDelegate Firebase not initialised\");\n\n        const firestore = getFirestore(firebaseApp);\n        const collectionReference: Query = collectionGroup ? collectionGroupClause(firestore, path) : collectionClause(firestore, path);\n\n        const queryParams: QueryConstraint[] = [];\n        if (filter) {\n            Object.entries(filter)\n                .filter(([_, entry]) => !!entry)\n                .forEach(([key, filterParameter]) => {\n                    const [op, value] = filterParameter as [WhereFilterOp, any];\n                    queryParams.push(whereClause(key, op, cmsToFirestoreModel(value, firestore)));\n                });\n        }\n\n        if (orderBy && order) {\n            queryParams.push(orderByClause(orderBy, order));\n        }\n\n        if (startAfter) {\n            queryParams.push(startAfterClause(startAfter));\n        }\n\n        if (limit) {\n            queryParams.push(limitClause(limit));\n        }\n\n        return query(collectionReference, ...queryParams);\n    }, [firebaseApp]);\n\n    const getAndBuildEntity = useCallback(<M extends Record<string, any>>(path: string,\n                                                                          entityId: string\n    ): Promise<Entity<M> | undefined> => {\n        if (!firebaseApp) throw Error(\"useFirestoreDelegate Firebase not initialised\");\n\n        const firestore = getFirestore(firebaseApp);\n\n        return getDoc(doc(firestore, path, entityId))\n            .then((docSnapshot) => {\n                if (!docSnapshot.exists()) {\n                    return undefined;\n                }\n                return createEntityFromDocument(docSnapshot);\n            });\n    }, [firebaseApp]);\n\n    const listenEntity = useCallback(<M extends Record<string, any>>(\n        {\n            path,\n            entityId,\n            collection,\n            onUpdate,\n            onError\n        }: ListenEntityProps<M>): () => void => {\n        if (!firebaseApp) throw Error(\"useFirestoreDelegate Firebase not initialised\");\n\n        const firestore = getFirestore(firebaseApp);\n\n        return onSnapshot(\n            doc(firestore, path, entityId),\n            {\n                next: (docSnapshot) => {\n                    onUpdate(createEntityFromDocument(docSnapshot));\n                },\n                error: onError\n            }\n        );\n    }, [firebaseApp]);\n\n    const performTextSearch = useCallback(<M extends Record<string, any>>({\n                                                                              path,\n                                                                              searchString,\n                                                                              onUpdate\n                                                                          }: {\n        path: string,\n        searchString: string;\n        onUpdate: (entities: Entity<M>[]) => void\n    }): () => void => {\n\n        if (!firebaseApp) throw Error(\"useFirestoreDelegate Firebase not initialised\");\n\n        const textSearchController = searchControllerRef.current;\n        if (!textSearchController)\n            throw Error(\"Trying to make text search without specifying a FirestoreTextSearchController\");\n\n        let subscriptions: (() => void)[] = [];\n\n        const auth = getAuth(firebaseApp);\n        const currentUser = auth.currentUser;\n        if (!currentUser) throw Error(\"No current user\");\n\n        const search = textSearchController.search({\n            path,\n            searchString,\n            currentUser\n        });\n\n        if (!search) {\n            throw Error(\"The current path is not supported by the specified FirestoreTextSearchController\");\n        }\n\n        search.then((ids) => {\n            if (ids.length === 0) {\n                subscriptions = [];\n                onUpdate([]);\n            }\n\n            const entities: Entity<M>[] = [];\n            const addedEntitiesSet = new Set<string>();\n            subscriptions = ids\n                .map((entityId) => {\n                        return listenEntity({\n                            path,\n                            entityId,\n                            onUpdate: (entity: Entity<any>) => {\n                                if (entity.values) {\n                                    if (!addedEntitiesSet.has(entity.id)) {\n                                        addedEntitiesSet.add(entity.id);\n                                        entities.push(entity);\n                                        onUpdate(entities);\n                                    }\n                                } else {\n                                    addedEntitiesSet.delete(entity.id);\n                                    onUpdate([...entities.filter(e => e.id !== entityId)])\n                                }\n                            }\n                        })\n                    }\n                );\n        });\n\n        return () => {\n            subscriptions.forEach((p) => p());\n        }\n\n    }, [firebaseApp, listenEntity]);\n\n    return {\n        setDateToMidnight,\n        delegateToCMSModel: firestoreToCMSModel,\n        cmsToDelegateModel: (values) => {\n            if (!firebaseApp) throw Error(\"useFirestoreDelegate Firebase not initialised\");\n            return cmsToFirestoreModel(values, getFirestore(firebaseApp));\n        },\n        currentTime,\n\n        initTextSearchController: useCallback(async (props: {\n            path: string,\n            collection?: EntityCollection | ResolvedEntityCollection\n        }) => {\n            if (!searchControllerRef.current) return false;\n            return searchControllerRef.current.init(props);\n        }, []),\n\n        /**\n         * Fetch entities in a Firestore path\n         * @param path\n         * @param collection\n         * @param filter\n         * @param limit\n         * @param startAfter\n         * @param searchString\n         * @param orderBy\n         * @param order\n         * @return Function to cancel subscription\n         * @see useCollectionFetch if you need this functionality implemented as a hook\n         * @group Firestore\n         */\n        fetchCollection: useCallback(async <M extends Record<string, any>>({\n                                                                               path,\n                                                                               filter,\n                                                                               limit,\n                                                                               startAfter,\n                                                                               searchString,\n                                                                               orderBy,\n                                                                               order,\n                                                                               isCollectionGroup\n                                                                           }: FetchCollectionDelegateProps<M>\n        ): Promise<Entity<M>[]> => {\n\n            // if (searchString) {\n            //     return performTextSearch(path, searchString,);\n            // }\n\n            console.debug(\"Fetching collection\", {\n                path,\n                limit,\n                filter,\n                startAfter,\n                orderBy,\n                order,\n                isCollectionGroup\n            });\n            const query = buildQuery(path, filter, orderBy, order, startAfter, limit, isCollectionGroup);\n\n            const snapshot = await getDocs(query);\n            return snapshot.docs.map((doc) => createEntityFromDocument(doc));\n        }, [buildQuery]),\n\n        /**\n         * Listen to a entities in a given path\n         * @param path\n         * @param collection\n         * @param onError\n         * @param filter\n         * @param limit\n         * @param startAfter\n         * @param searchString\n         * @param orderBy\n         * @param order\n         * @param onUpdate\n         * @return Function to cancel subscription\n         * @see useCollectionFetch if you need this functionality implemented as a hook\n         * @group Firestore\n         */\n        listenCollection: useCallback(<M extends Record<string, any>>(\n            {\n                path,\n                filter,\n                limit,\n                startAfter,\n                searchString,\n                orderBy,\n                order,\n                onUpdate,\n                onError,\n                isCollectionGroup,\n                collection\n            }: ListenCollectionDelegateProps<M>\n        ): () => void => {\n\n            console.debug(\"Listening collection\", {\n                path,\n                searchString,\n                isCollectionGroup,\n                limit,\n                filter,\n                startAfter,\n                orderBy,\n                order\n            });\n\n            if (!firebaseApp) {\n                throw Error(\"useFirestoreDelegate Firebase not initialised\");\n            }\n\n            const query = buildQuery(path, filter, orderBy, order, startAfter, limit, isCollectionGroup);\n\n            // const textSearchEnabled = collection?.textSearchEnabled === undefined || collection?.textSearchEnabled;\n            // if (searchControllerRef.current && textSearchEnabled) {\n            //     searchControllerRef.current.init({\n            //         path,\n            //         collection\n            //     });\n            // }\n\n            if (searchString) {\n                return performTextSearch<M>({\n                    path,\n                    searchString,\n                    onUpdate\n                });\n            }\n\n            return onSnapshot(query,\n                {\n                    next: (snapshot) => {\n                        if (!searchString)\n                            onUpdate(snapshot.docs.map((doc) => createEntityFromDocument(doc)));\n                    },\n                    error: onError\n                }\n            );\n\n        }, [buildQuery, firebaseApp, performTextSearch]),\n\n        /**\n         * Retrieve an entity given a path and a collection\n         * @param path\n         * @param entityId\n         * @param collection\n         * @group Firestore\n         */\n        fetchEntity: useCallback(<M extends Record<string, any>>({\n                                                                     path,\n                                                                     entityId\n                                                                 }: FetchEntityProps<M>\n        ): Promise<Entity<M> | undefined> => getAndBuildEntity(path, entityId), [getAndBuildEntity]),\n\n        /**\n         *\n         * @param path\n         * @param entityId\n         * @param collection\n         * @param onUpdate\n         * @param onError\n         * @return Function to cancel subscription\n         * @group Firestore\n         */\n        listenEntity,\n\n        /**\n         * Save entity to the specified path. Note that Firestore does not allow\n         * undefined values.\n         * @param path\n         * @param entityId\n         * @param values\n         * @param schemaId\n         * @param collection\n         * @param status\n         * @group Firestore\n         */\n        saveEntity: useCallback(<M extends Record<string, any>>(\n            {\n                path,\n                entityId,\n                values,\n                status\n            }: SaveEntityProps<M>): Promise<Entity<M>> => {\n\n            if (!firebaseApp) throw Error(\"useFirestoreDelegate Firebase not initialised\");\n\n            const firestore = getFirestore(firebaseApp);\n\n            const collectionReference: CollectionReference = collectionClause(firestore, path);\n            // const cleanedValues = cmsToFirestoreModel(values, firestore);\n            console.debug(\"Saving entity\", {\n                path,\n                entityId,\n                values,\n                // cleanedValues\n            });\n\n            let documentReference: DocumentReference;\n            if (entityId)\n                documentReference = doc(collectionReference, entityId);\n            else\n                documentReference = doc(collectionReference);\n\n            return setDoc(documentReference, values, { merge: true })\n                .then(() => ({\n                    id: documentReference.id,\n                    path,\n                    values: values as M\n                }))\n                .catch((error) => {\n                    console.error(\"Error saving entity\", error);\n                    throw error;\n\n                });\n        }, [firebaseApp]),\n\n        /**\n         * Delete an entity\n         * @param entity\n         * @param collection\n         * @group Firestore\n         */\n        deleteEntity: useCallback(<M extends Record<string, any>>(\n            {\n                entity\n            }: DeleteEntityProps<M>\n        ): Promise<void> => {\n            if (!firebaseApp) throw Error(\"useFirestoreDelegate Firebase not initialised\");\n\n            const firestore = getFirestore(firebaseApp);\n\n            return deleteDoc(doc(firestore, entity.path, entity.id));\n        }, [firebaseApp]),\n\n        /**\n         * Check if the given property is unique in the given collection\n         * @param path Collection path\n         * @param name of the property\n         * @param value\n         * @param property\n         * @param entityId\n         * @return `true` if there are no other fields besides the given entity\n         * @group Firestore\n         */\n        checkUniqueField: useCallback(async (\n            path: string,\n            name: string,\n            value: any,\n            entityId?: string\n        ): Promise<boolean> => {\n\n            if (!firebaseApp) throw Error(\"useFirestoreDelegate Firebase not initialised\");\n\n            const firestore = getFirestore(firebaseApp);\n\n            console.debug(\"Check unique field entity\", path, name, value, entityId);\n\n            if (value === undefined || value === null) {\n                return Promise.resolve(true);\n            }\n            const q = query(collectionClause(firestore, path), whereClause(name, \"==\", cmsToFirestoreModel(value, firestore)));\n            const snapshot = await getDocs(q);\n            return snapshot.docs.filter(doc => doc.id !== entityId).length === 0;\n\n        }, [firebaseApp]),\n\n        generateEntityId: useCallback((path: string): string => {\n            if (!firebaseApp) throw Error(\"useFirestoreDelegate Firebase not initialised\");\n            const firestore = getFirestore(firebaseApp);\n            return doc(collectionClause(firestore, path)).id;\n        }, [firebaseApp]),\n\n        countEntities: useCallback(async ({\n                                              path,\n                                              filter,\n                                              order,\n                                              orderBy,\n                                              isCollectionGroup\n                                          }: {\n            path: string,\n            filter?: FilterValues<Extract<keyof any, string>>,\n            orderBy?: string,\n            order?: \"desc\" | \"asc\",\n            isCollectionGroup?: boolean\n        }): Promise<number> => {\n            if (!firebaseApp) throw Error(\"useFirestoreDelegate Firebase not initialised\");\n            const query = buildQuery(path, filter, orderBy, order, undefined, undefined, isCollectionGroup);\n            const snapshot = await getCountFromServer(query);\n            return snapshot.data().count;\n        }, [firebaseApp]),\n\n        isFilterCombinationValid: useCallback(({\n                                                   path,\n                                                   collection,\n                                                   filterValues,\n                                                   sortBy\n                                               }: {\n            path: string,\n            collection: EntityCollection<any>,\n            filterValues: FilterValues<any>,\n            sortBy?: [string, \"asc\" | \"desc\"]\n        }): boolean => {\n\n            if (!firebaseApp) throw Error(\"useFirestoreDelegate Firebase not initialised\");\n\n            // If no indexes are defined, we assume the query is valid.\n            // If there is no index in Firestore, and error message will be shown\n            if (firestoreIndexesBuilder === undefined) return true;\n\n            const indexes = firestoreIndexesBuilder?.({\n                path,\n                collection\n            });\n\n            const sortKey = sortBy ? sortBy[0] : undefined;\n            const sortDirection = sortBy ? sortBy[1] : undefined;\n\n            // Order by clause cannot contain a field with an equality filter\n            const values: [WhereFilterOp, any][] = Object.values(filterValues) as [WhereFilterOp, any][];\n\n            const filterKeys = Object.keys(filterValues);\n            const filtersCount = filterKeys.length;\n\n            if (!sortKey && values.every((v) => v[0] === \"==\")) {\n                return true;\n            }\n\n            if (filtersCount === 1 && (!sortKey || sortKey === filterKeys[0])) {\n                return true;\n            }\n\n            if (!indexes && filtersCount > 1) {\n                return false;\n            }\n\n            return !!indexes && indexes\n                .filter((compositeIndex) => !sortKey || sortKey in compositeIndex)\n                .find((compositeIndex) =>\n                    Object.entries(filterValues).every(([key, value]) => compositeIndex[key] !== undefined && (!sortDirection || compositeIndex[key] === sortDirection))\n                ) !== undefined;\n        }, [firebaseApp])\n\n    };\n\n}\n\nconst createEntityFromDocument = <M extends Record<string, any>>(\n    docSnap: DocumentSnapshot,\n): Entity<M> => {\n    const values = firestoreToCMSModel(docSnap.data());\n    return {\n        id: docSnap.id,\n        path: getCMSPathFromFirestorePath(docSnap.ref.path),\n        values\n    };\n};\n\n/**\n * Recursive function that converts Firestore data types into CMS or plain\n * JS types.\n * FireCMS uses Javascript dates internally instead of Firestore timestamps.\n * This makes it easier to interact with the rest of the libraries and\n * bindings.\n * Also, Firestore references are replaced with {@link EntityReference}\n * @param data\n * @group Firestore\n */\nexport function firestoreToCMSModel(data: any): any {\n    if (data === null || data === undefined) return null;\n    if (deleteField().isEqual(data)) {\n        return undefined;\n    }\n    if (serverTimestamp().isEqual(data)) {\n        return null;\n    }\n    if (data instanceof Timestamp || (typeof data.toDate === \"function\" && data.toDate() instanceof Date)) {\n        return data.toDate();\n    }\n    if (data instanceof Date) {\n        return data;\n    }\n    if (typeof data === \"object\" && \"__type__\" in data && data.__type__ === \"__vector__\") {\n        return undefined; // TODO: removing vector for now, since they break when being saved\n    }\n\n    if (data instanceof FirestoreGeoPoint) {\n        return new GeoPoint(data.latitude, data.longitude);\n    }\n    if (data instanceof DocumentReference) {\n        return new EntityReference(data.id, getCMSPathFromFirestorePath(data.path));\n    }\n    if (Array.isArray(data)) {\n        return data.map(firestoreToCMSModel).filter(v => v !== undefined);\n    }\n    if (typeof data === \"object\") {\n        const result: Record<string, any> = {};\n        for (const key of Object.keys(data)) {\n            const childValue = firestoreToCMSModel(data[key]);\n            if (childValue !== undefined)\n                result[key] = childValue;\n        }\n        return result;\n    }\n    return data;\n}\n\n/**\n * Remove id from Firestore path\n * @param fsPath\n */\nfunction getCMSPathFromFirestorePath(fsPath: string): string {\n    let to = fsPath.lastIndexOf(\"/\");\n    to = to === -1 ? fsPath.length : to;\n    return fsPath.substring(0, to);\n}\n\nfunction setDateToMidnight(input?: Timestamp): Timestamp | undefined {\n    if (!input) return input;\n    if (!(input instanceof Timestamp)) return input;\n    const date = input.toDate();\n    date.setHours(0, 0, 0, 0);\n    return Timestamp.fromDate(date);\n}\n\nexport function cmsToFirestoreModel(data: any, firestore: Firestore): any {\n    if (data === undefined) {\n        return deleteField();\n    } else if (data === null) {\n        return null;\n    } else if (Array.isArray(data)) {\n        return data.filter(v => v !== undefined).map(v => cmsToFirestoreModel(v, firestore));\n    } else if (data.isEntityReference && data.isEntityReference()) {\n        return doc(firestore, data.path, data.id);\n    } else if (data instanceof GeoPoint) {\n        return new FirestoreGeoPoint(data.latitude, data.longitude);\n    } else if (data instanceof Date) {\n        return Timestamp.fromDate(data);\n    } else if (data && typeof data === \"object\" && \"__type__\" in data && data.__type__ === \"__vector__\") {\n        return undefined; // TODO: removing vector for now, since they break when being saved\n    } else if (data && typeof data === \"object\") {\n        return Object.entries(data)\n            .map(([key, v]) => {\n                const firestoreModel = cmsToFirestoreModel(v, firestore);\n                if (firestoreModel !== undefined)\n                    return ({ [key]: firestoreModel });\n                else\n                    return {};\n            })\n            .reduce((a, b) => ({ ...a, ...b }), {});\n    }\n    return data;\n}\n\nfunction currentTime(): any {\n    return serverTimestamp();\n}\n\nfunction buildTextSearchControllerWithLocalSearch({\n                                                      textSearchControllerBuilder,\n                                                      firebaseApp,\n                                                      localTextSearchEnabled\n                                                  }: {\n    textSearchControllerBuilder?: FirestoreTextSearchControllerBuilder,\n    firebaseApp: FirebaseApp,\n    localTextSearchEnabled: boolean\n}): FirestoreTextSearchController | undefined {\n    if (!textSearchControllerBuilder && localTextSearchEnabled)\n        return localSearchControllerBuilder({ firebaseApp });\n\n    if (!localTextSearchEnabled && textSearchControllerBuilder)\n        return textSearchControllerBuilder({ firebaseApp });\n\n    if (!textSearchControllerBuilder && !localTextSearchEnabled) {\n        return undefined;\n    }\n\n    const localSearchController = localSearchControllerBuilder({ firebaseApp })\n    const textSearchController = textSearchControllerBuilder!({ firebaseApp });\n    return {\n        init: async (props: {\n            path: string,\n            collection?: EntityCollection | ResolvedEntityCollection\n        }) => {\n            const b = await textSearchController.init(props);\n            if (b) return true;\n            return localSearchController.init(props);\n        },\n        search: (props: {\n            searchString: string,\n            path: string,\n            currentUser: any\n        }) => {\n            return textSearchController.search(props) ?? localSearchController.search(props);\n        }\n    }\n}\n","import { FirebaseApp } from \"firebase/app\";\nimport {\n    Database,\n    get,\n    getDatabase,\n    limitToFirst,\n    onValue,\n    orderByChild,\n    orderByKey,\n    push,\n    query,\n    ref,\n    remove,\n    set,\n    startAt\n} from \"firebase/database\";\nimport { useCallback } from \"react\";\nimport {\n    DataSourceDelegate,\n    DeleteEntityProps,\n    Entity,\n    FetchCollectionDelegateProps,\n    FetchEntityProps,\n    ListenCollectionDelegateProps,\n    ListenEntityProps,\n    SaveEntityProps\n} from \"@firecms/core\";\n\nexport function useFirebaseRTDBDelegate({ firebaseApp }: { firebaseApp?: FirebaseApp }): DataSourceDelegate {\n\n    const fetchCollection = useCallback(async <M extends Record<string, any>>({\n                                                                                  path,\n                                                                                  filter,\n                                                                                  limit,\n                                                                                  startAfter,\n                                                                                  orderBy,\n                                                                                  order,\n                                                                                  searchString\n                                                                              }: FetchCollectionDelegateProps<M>): Promise<Entity<M>[]> => {\n        if (!firebaseApp) {\n            throw new Error(\"Firebase app not provided\");\n        }\n        const database = getDatabase(firebaseApp);\n\n        let dbQuery = query(ref(database, path));\n\n        // Example to apply \"limit\" and \"startAfter\"\n        if (startAfter !== undefined) {\n            dbQuery = query(dbQuery, orderByKey(), startAt(startAfter));\n        }\n        if (limit !== undefined) {\n            dbQuery = query(dbQuery, limitToFirst(limit));\n        }\n\n        const snapshot = await get(dbQuery);\n        if (snapshot.exists()) {\n            return Object.entries(snapshot.val()).map(([id, values]) => ({\n                id,\n                path,\n                values: values as M,\n            }));\n        }\n        return [];\n    }, [firebaseApp]);\n\n    const listenCollection = useCallback(<M extends Record<string, any>>({\n                                                                             path,\n                                                                             onUpdate,\n                                                                             // Realtime Database does not directly support onError in onValue\n                                                                         }: ListenCollectionDelegateProps<M>): () => void => {\n        if (!firebaseApp) {\n            throw new Error(\"Firebase app not provided\");\n        }\n        const database = getDatabase(firebaseApp);\n\n        const dbRef = ref(database, path);\n        const unsubscribe = onValue(dbRef, (snapshot) => {\n            if (snapshot.exists()) {\n                const result: Entity<M>[] = Object.entries(snapshot.val()).map(([id, values]) => ({\n                    id,\n                    path,\n                    values: values as M,\n                }));\n                onUpdate(result);\n            } else {\n                onUpdate([]);\n            }\n        });\n\n        return () => unsubscribe();\n    }, [firebaseApp]);\n\n    const fetchEntity = useCallback(async <M extends Record<string, any>>({\n                                                                              path,\n                                                                              entityId,\n                                                                          }: FetchEntityProps<M>): Promise<Entity<M> | undefined> => {\n        if (!firebaseApp) {\n            throw new Error(\"Firebase app not provided\");\n        }\n        const database = getDatabase(firebaseApp);\n\n        const snapshot = await get(ref(database, `${path}/${entityId}`));\n        if (snapshot.exists()) {\n            return {\n                id: entityId,\n                path,\n                values: snapshot.val() as M\n            };\n        }\n        return undefined;\n    }, [firebaseApp]);\n\n    const listenEntity = useCallback(<M extends Record<string, any>>({\n                                                                         path,\n                                                                         entityId,\n                                                                         onUpdate,\n                                                                         onError\n                                                                     }: ListenEntityProps<M>): () => void => {\n        if (!firebaseApp) {\n            throw new Error(\"Firebase app not provided\");\n        }\n        const database = getDatabase(firebaseApp);\n\n        const dbRef = ref(database, `${path}/${entityId}`);\n        const unsubscribe = onValue(dbRef, (snapshot) => {\n            if (snapshot.exists()) {\n                onUpdate({\n                    id: entityId,\n                    path,\n                    values: snapshot.val() as M\n                });\n            } else {\n                onError?.(new Error(\"Entity does not exist\"));\n            }\n        });\n\n        return () => unsubscribe();\n    }, [firebaseApp]);\n\n    const saveEntity = useCallback(async <M extends Record<string, any>>({\n                                                                             path,\n                                                                             entityId,\n                                                                             values,\n                                                                         }: SaveEntityProps<M>): Promise<Entity<M>> => {\n        if (!firebaseApp) {\n            throw new Error(\"Firebase app not provided\");\n        }\n        const database = getDatabase(firebaseApp);\n\n        // If entityId is not provided, a new entity will be created\n        const finalId = entityId ?? push(ref(database, path)).key;\n        if (!finalId) {\n            throw new Error(\"Could not generate a new id\");\n        }\n        await set(ref(database, `${path}/${finalId}`), values);\n        return {\n            id: finalId,\n            path,\n            values: values as M\n        };\n    }, [firebaseApp]);\n\n    const deleteEntity = useCallback(async <M extends Record<string, any>>({\n                                                                               entity,\n                                                                           }: DeleteEntityProps<M>): Promise<void> => {\n        if (!firebaseApp) {\n            throw new Error(\"Firebase app not provided\");\n        }\n        const database = getDatabase(firebaseApp);\n\n        await remove(ref(database, `${entity.path}/${entity.id}`));\n    }, [firebaseApp]);\n\n    // Implementing additional methods required by DataSourceDelegate\n    const checkUniqueField = useCallback(async (path: string, name: string, value: any, entityId?: string): Promise<boolean> => {\n        if (!firebaseApp) {\n            throw new Error(\"Firebase app not provided\");\n        }\n        const database = getDatabase(firebaseApp);\n\n        // Simplified example; the Realtime Database does not support querying with \"not equal\" conditions\n        const dbRef = query(ref(database, path), orderByChild(name), startAt(value), limitToFirst(1));\n        const snapshot = await get(dbRef);\n\n        if (!snapshot.exists()) {\n            return true;\n        }\n\n        // Check if the found entity is the same as the one being checked\n        const [key, entityValue] = Object.entries(snapshot.val())[0];\n        if (entityValue && typeof entityValue === \"object\" && (entityValue as any)[name] === value && key === entityId) {\n            return true;\n        }\n\n        return false;\n    }, [firebaseApp]);\n\n    const generateEntityId = useCallback((path: string): string => {\n        if (!firebaseApp) {\n            throw new Error(\"Firebase app not provided\");\n        }\n        const database = getDatabase(firebaseApp);\n\n        return push(ref(database, path)).key!;\n    }, [firebaseApp]);\n\n    const isFilterCombinationValid = useCallback(({\n                                                      path,\n                                                      filter,\n                                                      sortBy\n                                                  }: any): boolean => {\n        return false;\n    }, []);\n\n    return {\n        fetchCollection,\n        listenCollection,\n        fetchEntity,\n        listenEntity,\n        saveEntity,\n        deleteEntity,\n        checkUniqueField,\n        generateEntityId,\n        isFilterCombinationValid,\n        cmsToDelegateModel: (data: any) => {\n            if (!firebaseApp) {\n                throw new Error(\"Firebase app not provided\");\n            }\n            const database = getDatabase(firebaseApp);\n            return cmsToRTDBModel(data, database);\n        },\n        currentTime: () => new Date(),\n        delegateToCMSModel,\n        setDateToMidnight\n    };\n}\n\nfunction setDateToMidnight(date: Date): Date {\n    const newDate = new Date(date);\n    newDate.setHours(0, 0, 0, 0);\n    return newDate;\n}\n\nfunction delegateToCMSModel(data: any): any {\n    if (data === null || data === undefined) return null;\n\n    if (Array.isArray(data)) {\n        return data.map(delegateToCMSModel).filter(v => v !== undefined);\n    }\n\n    if (typeof data === \"object\") {\n        const result: Record<string, any> = {};\n        for (const key of Object.keys(data)) {\n            const childValue = delegateToCMSModel(data[key]);\n            if (childValue !== undefined)\n                result[key] = childValue;\n        }\n        return result;\n    }\n\n    return data;\n}\n\nexport function cmsToRTDBModel(data: any, database: Database): any {\n    if (data === undefined) {\n        return null;\n    } else if (data === null) {\n        return null;\n    } else if (Array.isArray(data)) {\n        return data.filter(v => v !== undefined).map(v => cmsToRTDBModel(v, database));\n    } else if (data.isEntityReference && data.isEntityReference()) {\n        return ref(database, `${data.path}/${data.id}`);\n    } else if (data instanceof Date) {\n        // For dates, convert to ISO string or timestamp.\n        return data.toISOString();\n    } else if (data && typeof data === \"object\") {\n        return Object.entries(data)\n            .map(([key, v]) => {\n                const rtdbModel = cmsToRTDBModel(v, database);\n                if (rtdbModel !== undefined)\n                    return ({ [key]: rtdbModel });\n                else\n                    return {};\n            })\n            .reduce((a, b) => ({ ...a, ...b }), {});\n    }\n    return data;\n}\n","import { useEffect } from \"react\";\nimport { getAuth, RecaptchaVerifier } from \"firebase/auth\";\n\ndeclare global {\n    interface Window {\n        recaptchaVerifier: RecaptchaVerifier;\n    }\n}\n\nexport const RECAPTCHA_CONTAINER_ID = \"recaptcha-container\" as const;\n\nexport function useRecaptcha() {\n    useEffect(() => {\n        if (!window || window?.recaptchaVerifier) return;\n\n        const auth = getAuth();\n\n        window.recaptchaVerifier = new RecaptchaVerifier(\n            auth,\n            RECAPTCHA_CONTAINER_ID,\n            {\n                size: \"invisible\"\n            }\n        );\n    }, []);\n\n    return null;\n}\n","export const googleIcon = (mode: \"light\" | \"dark\") => <>\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 64 64\"\n        width={32}\n        height={32}\n    >\n        <linearGradient\n            id=\"95yY7w43Oj6n2vH63j6HJb\"\n            x1=\"29.401\"\n            x2=\"29.401\"\n            y1=\"4.064\"\n            y2=\"106.734\"\n            gradientTransform=\"matrix(1 0 0 -1 0 66)\"\n            gradientUnits=\"userSpaceOnUse\"\n        >\n            <stop offset=\"0\" stopColor=\"#ff5840\"/>\n            <stop offset=\".007\" stopColor=\"#ff5840\"/>\n            <stop offset=\".989\" stopColor=\"#fa528c\"/>\n            <stop offset=\"1\" stopColor=\"#fa528c\"/>\n        </linearGradient>\n        <path\n            fill=\"url(#95yY7w43Oj6n2vH63j6HJb)\"\n            d=\"M47.46,15.5l-1.37,1.48c-1.34,1.44-3.5,1.67-5.15,0.6c-2.71-1.75-6.43-3.13-11-2.37 c-4.94,0.83-9.17,3.85-11.64, 7.97l-8.03-6.08C14.99,9.82,23.2,5,32.5,5c5,0,9.94,1.56,14.27,4.46 C48.81,10.83,49.13,13.71,47.46,15.5z\"\n        />\n        <linearGradient\n            id=\"95yY7w43Oj6n2vH63j6HJc\"\n            x1=\"12.148\"\n            x2=\"12.148\"\n            y1=\".872\"\n            y2=\"47.812\"\n            gradientTransform=\"matrix(1 0 0 -1 0 66)\"\n            gradientUnits=\"userSpaceOnUse\"\n        >\n            <stop offset=\"0\" stopColor=\"#feaa53\"/>\n            <stop offset=\".612\" stopColor=\"#ffcd49\"/>\n            <stop offset=\"1\" stopColor=\"#ffde44\"/>\n        </linearGradient>\n        <path\n            fill=\"url(#95yY7w43Oj6n2vH63j6HJc)\"\n            d=\"M16.01,30.91c-0.09,2.47,0.37,4.83,1.27,6.96l-8.21,6.05c-1.35-2.51-2.3-5.28-2.75-8.22 c-1.06-6.88,0.54-13.38, 3.95-18.6l8.03,6.08C16.93,25.47,16.1,28.11,16.01,30.91z\"\n        />\n        <linearGradient\n            id=\"95yY7w43Oj6n2vH63j6HJd\"\n            x1=\"29.76\"\n            x2=\"29.76\"\n            y1=\"32.149\"\n            y2=\"-6.939\"\n            gradientTransform=\"matrix(1 0 0 -1 0 66)\"\n            gradientUnits=\"userSpaceOnUse\"\n        >\n            <stop offset=\"0\" stopColor=\"#42d778\"/>\n            <stop offset=\".428\" stopColor=\"#3dca76\"/>\n            <stop offset=\"1\" stopColor=\"#34b171\"/>\n        </linearGradient>\n        <path\n            fill=\"url(#95yY7w43Oj6n2vH63j6HJd)\"\n            d=\"M50.45,51.28c-4.55,4.07-10.61,6.57-17.36,6.71C22.91,58.2,13.66,52.53,9.07,43.92l8.21-6.05 C19.78,43.81, 25.67,48,32.5,48c3.94,0,7.52-1.28,10.33-3.44L50.45,51.28z\"\n        />\n        <linearGradient\n            id=\"95yY7w43Oj6n2vH63j6HJe\"\n            x1=\"46\"\n            x2=\"46\"\n            y1=\"3.638\"\n            y2=\"35.593\"\n            gradientTransform=\"matrix(1 0 0 -1 0 66)\"\n            gradientUnits=\"userSpaceOnUse\"\n        >\n            <stop offset=\"0\" stopColor=\"#155cde\"/>\n            <stop offset=\".278\" stopColor=\"#1f7fe5\"/>\n            <stop offset=\".569\" stopColor=\"#279ceb\"/>\n            <stop offset=\".82\" stopColor=\"#2cafef\"/>\n            <stop offset=\"1\" stopColor=\"#2eb5f0\"/>\n        </linearGradient>\n        <path\n            fill=\"url(#95yY7w43Oj6n2vH63j6HJe)\"\n            d=\"M59,31.97c0.01,7.73-3.26,14.58-8.55,19.31l-7.62-6.72c2.1-1.61,3.77-3.71,4.84-6.15\n        c0.29-0.66-0.2-1.41-0.92-1.41H37c-2.21,0-4-1.79-4-4v-2c0-2.21,1.79-4,4-4h17C56.75,27,59,29.22,59,31.97z\"\n        />\n    </svg>\n</>;\n\nexport const appleIcon = (mode: \"light\" | \"dark\") => <svg width={32} height={32}\n                                                          viewBox=\"0 0 56 56\"\n                                                          style={{ transform: \"scale(2.8)\" }}\n                                                          version=\"1.1\"\n                                                          xmlns=\"http://www.w3.org/2000/svg\">\n    <g stroke={mode === \"light\" ? \"#424245\" : \"white\"} strokeWidth=\"0.5\"\n       fillRule=\"evenodd\">\n        <path\n            d=\"M28.2226562,20.3846154 C29.0546875,20.3846154 30.0976562,19.8048315 30.71875,19.0317864 C31.28125,18.3312142 31.6914062,17.352829 31.6914062,16.3744437 C31.6914062,16.2415766 31.6796875,16.1087095 31.65625,16 C30.7304687,16.0362365 29.6171875,16.640178 28.9492187,17.4494596 C28.421875,18.06548 27.9414062,19.0317864 27.9414062,20.0222505 C27.9414062,20.1671964 27.9648438,20.3121424 27.9765625,20.3604577 C28.0351562,20.3725366 28.1289062,20.3846154 28.2226562,20.3846154 Z M25.2929688,35 C26.4296875,35 26.9335938,34.214876 28.3515625,34.214876 C29.7929688,34.214876 30.109375,34.9758423 31.375,34.9758423 C32.6171875,34.9758423 33.4492188,33.792117 34.234375,32.6325493 C35.1132812,31.3038779 35.4765625,29.9993643 35.5,29.9389701 C35.4179688,29.9148125 33.0390625,28.9122695 33.0390625,26.0979021 C33.0390625,23.6579784 34.9140625,22.5588048 35.0195312,22.474253 C33.7773438,20.6382708 31.890625,20.5899555 31.375,20.5899555 C29.9804688,20.5899555 28.84375,21.4596313 28.1289062,21.4596313 C27.3554688,21.4596313 26.3359375,20.6382708 25.1289062,20.6382708 C22.8320312,20.6382708 20.5,22.5950413 20.5,26.2911634 C20.5,28.5861411 21.3671875,31.013986 22.4335938,32.5842339 C23.3476562,33.9129053 24.1445312,35 25.2929688,35 Z\"\n            fill={mode === \"light\" ? \"#424245\" : \"white\"} fillRule=\"nonzero\"/>\n    </g>\n</svg>;\n\nexport const githubIcon = (mode: \"light\" | \"dark\") => <svg\n    fill={mode === \"light\" ? \"#1c1e21\" : \"white\"}\n    role=\"img\"\n    viewBox=\"0 0 24 24\"\n    width={28}\n    height={28}\n    xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n        d=\"M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12\"/>\n</svg>;\n\n\nexport const facebookIcon = (mode: \"light\" | \"dark\") => <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width={28} height={28}\n    viewBox=\"0 0 90 90\">\n    <g>\n        <path\n            d=\"M90,15.001C90,7.119,82.884,0,75,0H15C7.116,0,0,7.119,0,15.001v59.998   C0,82.881,7.116,90,15.001,90H45V56H34V41h11v-5.844C45,25.077,52.568,16,61.875,16H74v15H61.875C60.548,31,59,32.611,59,35.024V41   h15v15H59v34h16c7.884,0,15-7.119,15-15.001V15.001z\"\n            fill={mode === \"light\" ? \"#39569c\" : \"white\"}/>\n    </g>\n</svg>;\n\nexport const microsoftIcon = (mode: \"light\" | \"dark\") => <svg\n    xmlns=\"http://www.w3.org/2000/svg\" width={28} height={28}\n    viewBox=\"0 0 480 480\">\n    <g>\n        <path\n            d=\"M0.176,224L0.001,67.963l192-26.072V224H0.176z M224.001,37.241L479.937,0v224H224.001V37.241z M479.999,256l-0.062,224   l-255.936-36.008V256H479.999z M192.001,439.918L0.157,413.621L0.147,256h191.854V439.918z\"\n            fill={mode === \"light\" ? \"#00a2ed\" : \"white\"}/>\n    </g>\n</svg>;\n\nexport const twitterIcon = (mode: \"light\" | \"dark\") => <svg\n    xmlns=\"http://www.w3.org/2000/svg\" width={28} height={28}\n    viewBox=\"0 0 24 24\">\n    <path fill={mode === \"light\" ? \"#00acee\" : \"white\"}\n          d=\"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z\"/>\n</svg>;\n\n","import React, { ReactNode, useCallback, useEffect, useRef, useState } from \"react\";\n\nimport { FirebaseApp, FirebaseError } from \"firebase/app\";\nimport { ErrorView, FireCMSLogo, useModeController, } from \"@firecms/core\";\nimport {\n    ArrowBackIcon,\n    Button,\n    CircularProgress,\n    EmailIcon,\n    IconButton,\n    PersonOutlineIcon,\n    PhoneIcon,\n    TextField,\n    Typography,\n} from \"@firecms/ui\";\nimport { appleIcon, facebookIcon, githubIcon, googleIcon, microsoftIcon, twitterIcon } from \"./social_icons\";\nimport {\n    getAuth,\n    getMultiFactorResolver,\n    PhoneAuthProvider,\n    PhoneMultiFactorGenerator,\n    RecaptchaVerifier\n} from \"firebase/auth\";\nimport {\n    FirebaseAuthController,\n    FirebaseSignInOption,\n    FirebaseSignInProvider,\n    RECAPTCHA_CONTAINER_ID,\n    useRecaptcha\n} from \"../index\";\n\n/**\n * @category Firebase\n */\nexport interface FirebaseLoginViewProps {\n\n    /**\n     * Firebase app this login view is accessing\n     */\n    firebaseApp: FirebaseApp;\n\n    /**\n     * Delegate holding the auth state\n     */\n    authController: FirebaseAuthController;\n\n    /**\n     * Path to the logo displayed in the login screen\n     */\n    logo?: string;\n\n    /**\n     * Enable the skip login button\n     */\n    allowSkipLogin?: boolean;\n\n    /**\n     * Each of the sign in options that get a custom button\n     */\n    signInOptions: Array<FirebaseSignInProvider | FirebaseSignInOption>;\n\n    /**\n     * Disable the login buttons\n     */\n    disabled?: boolean;\n\n    /**\n     * Prevent users from creating new users in when the `signInOptions` value\n     * is `password`. This does not apply to the rest of login providers.\n     */\n    disableSignupScreen?: boolean;\n\n    /**\n     * Display this component when no user is found a user tries to log in\n     * when the `signInOptions` value is `password`.\n     */\n    noUserComponent?: ReactNode;\n\n    /**\n     * Display this component bellow the sign-in buttons.\n     * Useful for adding checkboxes for privacy and terms and conditions.\n     * You may want to use it in conjunction with the `disabled` prop.\n     */\n    additionalComponent?: ReactNode;\n\n    notAllowedError?: any;\n\n}\n\n/**\n * Use this component to render a login view, that updates\n * the state of the {@link FirebaseAuthController} based on the result\n * @constructor\n * @category Firebase\n */\nexport function FirebaseLoginView({\n                                      allowSkipLogin,\n                                      logo,\n                                      signInOptions,\n                                      firebaseApp,\n                                      authController,\n                                      noUserComponent,\n                                      disableSignupScreen = false,\n                                      disabled = false,\n                                      additionalComponent,\n                                      notAllowedError\n                                  }: FirebaseLoginViewProps) {\n\n    const modeState = useModeController();\n\n    const [passwordLoginSelected, setPasswordLoginSelected] = useState(false);\n\n    const [phoneLoginSelected, setPhoneLoginSelected] = useState(false);\n\n    const resolvedSignInOptions: FirebaseSignInProvider[] = signInOptions.map((o) => {\n        if (typeof o === \"object\") {\n            return o.provider;\n        } else return o as FirebaseSignInProvider;\n    })\n\n    const sendMFASms = useCallback(() => {\n        const auth = getAuth(firebaseApp);\n        const recaptchaVerifier = new RecaptchaVerifier(auth, \"recaptcha\", { size: \"invisible\" });\n\n        const resolver = getMultiFactorResolver(auth, authController.authProviderError);\n\n        if (resolver.hints[0].factorId === PhoneMultiFactorGenerator.FACTOR_ID) {\n\n            const phoneInfoOptions = {\n                multiFactorHint: resolver.hints[0],\n                session: resolver.session\n            };\n            const phoneAuthProvider = new PhoneAuthProvider(auth);\n            // Send SMS verification code\n            phoneAuthProvider.verifyPhoneNumber(phoneInfoOptions, recaptchaVerifier)\n                .then(function (verificationId) {\n\n                    // Ask user for the SMS verification code. Then:\n                    const verificationCode = String(window.prompt(\"Please enter the verification \" + \"code that was sent to your mobile device.\"));\n                    const cred = PhoneAuthProvider.credential(verificationId, verificationCode);\n                    const multiFactorAssertion = PhoneMultiFactorGenerator.assertion(cred);\n                    // // Complete sign-in.\n                    return resolver.resolveSignIn(multiFactorAssertion);\n\n                })\n\n        } else {\n            // Unsupported second factor.\n            console.warn(\"Unsupported second factor.\");\n        }\n\n    }, [authController.authProviderError]);\n\n    function buildErrorView() {\n        let errorView: any;\n        if (authController.user != null) return errorView; // if the user is logged in via MFA\n        const ignoredCodes = [\"auth/popup-closed-by-user\", \"auth/cancelled-popup-request\"];\n        if (authController.authProviderError) {\n            if (authController.authProviderError.code === \"auth/operation-not-allowed\" ||\n                authController.authProviderError.code === \"auth/configuration-not-found\") {\n                errorView =\n                    <>\n                        <div className=\"p-4\">\n                            <ErrorView\n                                title={\"Firebase Auth not enabled\"}\n                                error={\"You need to enable Firebase Auth and the corresponding login provider in your Firebase project\"}/>\n                        </div>\n                        {firebaseApp &&\n                            <div className=\"p-4\">\n                                <a href={`https://console.firebase.google.com/project/${firebaseApp.options.projectId}/authentication/providers`}\n                                   rel=\"noopener noreferrer\"\n                                   target=\"_blank\">\n                                    <Button variant=\"text\"\n                                            color=\"error\">\n                                        Open Firebase configuration\n                                    </Button>\n                                </a>\n                            </div>}\n                    </>;\n            } else if (authController.authProviderError.code === \"auth/invalid-api-key\") {\n                errorView = <div className=\"p-4\">\n                    <ErrorView\n                        title={\"Invalid API key\"}\n                        error={\"auth/invalid-api-key: Check that your Firebase config is set correctly in your `firebase_config.ts` file\"}/>\n                </div>;\n            } else if (!ignoredCodes.includes(authController.authProviderError.code)) {\n                if (authController.authProviderError.code === \"auth/multi-factor-auth-required\") {\n                    sendMFASms();\n                }\n                errorView =\n                    <div className=\"p-4\">\n                        <ErrorView error={authController.authProviderError}/>\n                    </div>;\n            }\n        }\n        return errorView;\n    }\n\n    let logoComponent;\n    if (logo) {\n        logoComponent = <img src={logo}\n                             style={{\n                                 height: \"100%\",\n                                 width: \"100%\",\n                                 objectFit: \"contain\"\n                             }}\n                             alt={\"Logo\"}/>;\n    } else {\n        logoComponent = <FireCMSLogo/>;\n    }\n\n    let notAllowedMessage: string | undefined;\n    if (notAllowedError) {\n        if (typeof notAllowedError === \"string\") {\n            notAllowedMessage = notAllowedError;\n        } else if (notAllowedError instanceof Error) {\n            notAllowedMessage = notAllowedError.message;\n        } else {\n            notAllowedMessage = \"It looks like you don't have access to the CMS, based on the specified Authenticator configuration\";\n        }\n    }\n\n    return (\n\n        <div\n            className=\"flex flex-col items-center justify-center min-h-screen min-w-full p-4\">\n            <div id=\"recaptcha\"></div>\n            <div\n                className=\"flex flex-col items-center w-full max-w-[500px]\">\n\n                <div className=\"p-1 w-64 h-64 m-4\">\n                    {logoComponent}\n                </div>\n\n                {notAllowedMessage &&\n                    <div className=\"p-8\">\n                        <ErrorView error={notAllowedMessage}/>\n                    </div>}\n\n                {buildErrorView()}\n\n                {(!passwordLoginSelected && !phoneLoginSelected) && <div className={\"my-4 w-full\"}>\n\n                    {buildOauthLoginButtons(authController, resolvedSignInOptions, modeState.mode, disabled)}\n\n                    {resolvedSignInOptions.includes(\"password\") &&\n                        <LoginButton\n                            disabled={disabled}\n                            text={\"Email/password\"}\n                            icon={<EmailIcon size={28}/>}\n                            onClick={() => setPasswordLoginSelected(true)}/>}\n\n                    {resolvedSignInOptions.includes(\"phone\") &&\n                        <LoginButton\n                            disabled={disabled}\n                            text={\"Phone number\"}\n                            icon={<PhoneIcon size={28}/>}\n                            onClick={() => setPhoneLoginSelected(true)}/>}\n\n                    {resolvedSignInOptions.includes(\"anonymous\") &&\n                        <LoginButton\n                            disabled={disabled}\n                            text={\"Log in anonymously\"}\n                            icon={<PersonOutlineIcon\n                                size={28}/>}\n                            onClick={authController.anonymousLogin}/>}\n\n                    {allowSkipLogin &&\n                        <Button\n                            className={\"m-1 mb-4\"}\n                            variant={\"text\"}\n                            disabled={disabled}\n                            onClick={authController.skipLogin}>\n                            Skip login\n                        </Button>\n                    }\n\n                </div>}\n\n                {passwordLoginSelected && <LoginForm\n                    authController={authController}\n                    onClose={() => setPasswordLoginSelected(false)}\n                    mode={modeState.mode}\n                    noUserComponent={noUserComponent}\n                    disableSignupScreen={disableSignupScreen}\n                />}\n\n                {phoneLoginSelected && <PhoneLoginForm\n                    authController={authController}\n                    onClose={() => setPhoneLoginSelected(false)}\n                />}\n\n                {!passwordLoginSelected && !phoneLoginSelected && additionalComponent}\n\n            </div>\n        </div>\n    );\n}\n\nexport function LoginButton({\n                                icon,\n                                onClick,\n                                text,\n                                disabled\n                            }: {\n    icon: React.ReactNode,\n    onClick: () => void,\n    text: string,\n    disabled?: boolean\n}) {\n    return (\n        <div className=\"m-1 w-full\">\n            <Button\n                className=\"w-full\"\n                variant=\"outlined\"\n                disabled={disabled}\n                onClick={onClick}>\n                <div\n                    className=\"p-1 flex h-8 items-center justify-items-center\">\n                    <div\n                        className=\"flex flex-col w-8 items-center justify-items-center\">\n                        {icon}\n                    </div>\n                    <div className=\"flex-grow pl-2 text-center\">{text}</div>\n                </div>\n            </Button>\n        </div>\n    )\n}\n\nfunction PhoneLoginForm({\n                            onClose,\n                            authController\n                        }: {\n    onClose: () => void,\n    authController: FirebaseAuthController,\n}) {\n    useRecaptcha();\n\n    const [phone, setPhone] = useState<string>();\n    const [code, setCode] = useState<string>();\n    const [isInvalidCode, setIsInvalidCode] = useState(false);\n\n    const handleSubmit = async (event: any) => {\n        event.preventDefault();\n\n        if (code && authController.confirmationResult) {\n            setIsInvalidCode(false);\n\n            authController.confirmationResult.confirm(code).catch((e: FirebaseError) => {\n                if (e.code === \"auth/invalid-verification-code\") {\n                    setIsInvalidCode(true)\n                }\n            });\n        } else {\n            if (phone) {\n                authController.phoneLogin(phone, window.recaptchaVerifier);\n            }\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            {isInvalidCode &&\n                <div className=\"p-8\">\n                    <ErrorView error={\"Invalid confirmation code\"}/>\n                </div>}\n\n            <div id={RECAPTCHA_CONTAINER_ID}/>\n\n            <div className={\"flex flex-col gap-1\"}>\n                <IconButton\n                    onClick={onClose}>\n                    <ArrowBackIcon className=\"w-5 h-5\"/>\n                </IconButton>\n                <div className=\"p-1 flex\">\n                    <Typography align={\"center\"}\n                                variant={\"subtitle2\"}>{\"Please enter your phone number\"}</Typography>\n                </div>\n                <TextField placeholder=\"\"\n                           value={phone ?? \"\"}\n                           disabled={Boolean(phone && (authController.authLoading || authController.confirmationResult))}\n                           type=\"phone\"\n                           onChange={(event) => setPhone(event.target.value)}/>\n                {Boolean(phone && authController.confirmationResult) &&\n                    <>\n                        <div className=\"mt-2 p-1 flex\">\n                            <Typography align={\"center\"}\n                                        variant={\"subtitle2\"}>{\"Please enter the confirmation code\"}</Typography>\n                        </div>\n                        <TextField placeholder=\"\"\n                                   value={code ?? \"\"}\n                                   type=\"text\"\n                                   onChange={(event) => setCode(event.target.value)}/>\n                    </>\n                }\n\n                <div className=\"flex justify-end items-center w-full\">\n\n                    {authController.authLoading &&\n                        <CircularProgress className=\"p-1\" size={\"small\"}/>\n                    }\n\n                    <Button type=\"submit\">\n                        {\"Ok\"}\n                    </Button>\n                </div>\n\n            </div>\n        </form>\n    );\n}\n\ntype LoginFormMode = \"email\" | \"password\" | \"registration\";\n\nfunction LoginForm({\n                       onClose,\n                       authController,\n                       mode,\n                       noUserComponent,\n                       disableSignupScreen\n                   }: {\n    onClose: () => void,\n    authController: FirebaseAuthController,\n    mode: \"light\" | \"dark\",\n    noUserComponent?: ReactNode,\n    disableSignupScreen: boolean\n}) {\n\n    const passwordRef = useRef<HTMLInputElement | null>(null);\n\n    const [loginState, setLoginState] = useState<LoginFormMode>(\"email\"); // [\"email\", \"password\", \"registration\"]\n    const [email, setEmail] = useState<string>();\n    const [password, setPassword] = useState<string>();\n    const [previouslyUsedMethodsForUser, setPreviouslyUsedMethodsForUser] = useState<string[] | undefined>();\n\n    useEffect(() => {\n        if ((loginState === \"password\" || loginState === \"registration\") && passwordRef.current) {\n            passwordRef.current.focus()\n        }\n    }, [loginState]);\n\n    useEffect(() => {\n        if (!document) return;\n        const escFunction = (event: any) => {\n            if (event.keyCode === 27) {\n                onClose();\n            }\n        };\n        document.addEventListener(\"keydown\", escFunction, false);\n        return () => {\n            document.removeEventListener(\"keydown\", escFunction, false);\n        };\n    }, [onClose]);\n\n    function handleEnterEmail() {\n        if (email) {\n            authController.fetchSignInMethodsForEmail(email).then((availableProviders) => {\n                setPreviouslyUsedMethodsForUser(availableProviders.filter(p => p !== \"password\"));\n            });\n            setLoginState(\"password\");\n        }\n    }\n\n    function handleEnterPassword() {\n        if (email && password) {\n            authController.emailPasswordLogin(email, password);\n        }\n    }\n\n    function handleRegistration() {\n        if (email && password) {\n            authController.createUserWithEmailAndPassword(email, password);\n        }\n    }\n\n    const onBackPressed = () => {\n        if (loginState === \"email\") {\n            onClose();\n        } else if (loginState === \"password\" || loginState === \"registration\") {\n            setLoginState(\"email\");\n        } else {\n            setPreviouslyUsedMethodsForUser(undefined);\n        }\n    }\n\n    const handleSubmit = (event: any) => {\n        event.preventDefault();\n        if (loginState === \"email\") {\n            handleEnterEmail();\n        } else if (loginState === \"password\") {\n            handleEnterPassword();\n        } else if (loginState === \"registration\") {\n            handleRegistration();\n        }\n    }\n\n    const label = loginState === \"registration\"\n        ? \"Please enter your email and password to create an account\"\n        : (loginState === \"password\" ? \"Please enter your password\" : \"Please enter your email\");\n\n    return (\n        <form\n            className={\"w-full\"}\n            onSubmit={handleSubmit}>\n\n            <div className={\"max-w-[480px] w-full flex flex-col gap-4\"}>\n                <IconButton\n                    onClick={onBackPressed}>\n                    <ArrowBackIcon className=\"w-5 h-5\"/>\n                </IconButton>\n\n                <div>\n                    {loginState === \"registration\" && noUserComponent}\n                </div>\n\n                <Typography\n                    className={`${loginState === \"registration\" && disableSignupScreen ? \"hidden\" : \"flex\"}`}\n                    variant={\"subtitle2\"}>{label}</Typography>\n\n                {(loginState === \"email\" || loginState === \"registration\") && <TextField placeholder=\"Email\" autoFocus\n                                                                                         value={email ?? \"\"}\n                                                                                         disabled={authController.authLoading}\n                                                                                         type=\"email\"\n                                                                                         onChange={(event) => setEmail(event.target.value)}/>}\n\n                <div\n                    className={`${loginState === \"password\" || (loginState === \"registration\" && !disableSignupScreen) ? \"block\" : \"hidden\"}`}>\n                    <TextField placeholder=\"Password\"\n                               value={password ?? \"\"}\n                               disabled={authController.authLoading}\n                               inputRef={passwordRef}\n                               type=\"password\"\n                               onChange={(event) => setPassword(event.target.value)}/>\n                </div>\n\n                <div\n                    className={`${loginState === \"registration\" && disableSignupScreen ? \"hidden\" : \"flex\"} justify-end items-center w-full flex gap-2`}>\n\n                    {authController.authLoading &&\n                        <CircularProgress className=\"p-1\" size={\"small\"}/>\n                    }\n\n                    {loginState === \"email\" && <Button variant=\"outlined\" onClick={() => setLoginState(\"registration\")}>\n                        New user\n                    </Button>}\n\n                    <Button type=\"submit\">\n                        {loginState === \"registration\" ? \"Create account\" : (loginState === \"password\" ? \"Login\" : \"Login\")}\n                    </Button>\n                </div>\n\n                {previouslyUsedMethodsForUser && previouslyUsedMethodsForUser.length > 0 &&\n                    <div className={\"flex flex-col gap-4 p-4\"}>\n                        <div>\n                            <Typography variant={\"subtitle2\"}>\n                                You already have an account\n                            </Typography>\n                            <Typography variant={\"body2\"}>\n                                You can use one of these\n                                methods to login with {email}\n                            </Typography>\n                        </div>\n\n                        <div>\n                            {previouslyUsedMethodsForUser && buildOauthLoginButtons(authController, previouslyUsedMethodsForUser, mode, false)}\n                        </div>\n                    </div>\n                }\n            </div>\n        </form>\n    );\n\n}\n\nfunction buildOauthLoginButtons(authController: FirebaseAuthController, providers: string[], mode: \"light\" | \"dark\", disabled: boolean) {\n    return <>\n        {providers.includes(\"google.com\") && <LoginButton\n            disabled={disabled}\n            text={\"Sign in with Google\"}\n            icon={googleIcon(mode)}\n            onClick={authController.googleLogin}/>}\n\n        {providers.includes(\"microsoft.com\") && <LoginButton\n            disabled={disabled}\n            text={\"Sign in with Microsoft\"}\n            icon={microsoftIcon(mode)}\n            onClick={authController.microsoftLogin}/>}\n\n        {providers.includes(\"apple.com\") && <LoginButton\n            disabled={disabled}\n            text={\"Sign in with Apple\"}\n            icon={appleIcon(mode)}\n            onClick={authController.appleLogin}/>}\n\n        {providers.includes(\"github.com\") && <LoginButton\n            disabled={disabled}\n            text={\"Sign in with Github\"}\n            icon={githubIcon(mode)}\n            onClick={authController.githubLogin}/>}\n\n        {providers.includes(\"facebook.com\") && <LoginButton\n            disabled={disabled}\n            text={\"Sign in with Facebook\"}\n            icon={facebookIcon(mode)}\n            onClick={authController.facebookLogin}/>}\n\n        {providers.includes(\"twitter.com\") && <LoginButton\n            disabled={disabled}\n            text={\"Sign in with Twitter\"}\n            icon={twitterIcon(mode)}\n            onClick={authController.twitterLogin}/>}\n    </>\n}\n","import React from \"react\";\nimport { GoogleAuthProvider } from \"firebase/auth\";\n\nimport {\n    CircularProgressCenter,\n    FireCMS,\n    ModeControllerProvider,\n    NavigationRoutes,\n    PropertyConfig,\n    Scaffold,\n    SideDialogs,\n    SnackbarProvider,\n    useBrowserTitleAndIcon,\n    useBuildLocalConfigurationPersistence,\n    useBuildModeController,\n    useBuildNavigationController,\n    useValidateAuthenticator\n} from \"@firecms/core\";\n\nimport { FireCMSFirebaseAppProps } from \"./FireCMSFirebaseAppProps\";\nimport { FirebaseLoginView } from \"./FirebaseLoginView\";\nimport {\n    useAppCheck,\n    useFirebaseAuthController,\n    useFirebaseStorageSource,\n    useFirestoreDelegate,\n    useInitialiseFirebase,\n} from \"../hooks\";\nimport { CenteredView } from \"@firecms/ui\";\nimport { FirebaseAuthController } from \"../types\";\n\nconst DEFAULT_SIGN_IN_OPTIONS = [\n    GoogleAuthProvider.PROVIDER_ID\n];\n\n/**\n * This is the default implementation of a FireCMS app using the Firebase services\n * as a backend.\n * You can use this component as a full app, by specifying collections and\n * entity collections.\n *\n * This component is in charge of initialising Firebase, with the given\n * configuration object.\n *\n * If you are building a larger app and need finer control, you can use\n * {@link FireCMS}, {@link Scaffold}, {@link SideDialogs}\n * and {@link NavigationRoutes} instead.\n *\n * @param props\n * @constructor\n * @category Firebase\n */\nexport function FireCMSFirebaseApp({\n                                       name,\n                                       logo,\n                                       logoDark,\n                                       toolbarExtraWidget,\n                                       authenticator,\n                                       collections,\n                                       views,\n                                       adminViews,\n                                       textSearchControllerBuilder,\n                                       allowSkipLogin,\n                                       signInOptions = DEFAULT_SIGN_IN_OPTIONS,\n                                       firebaseConfig,\n                                       onFirebaseInit,\n                                       appCheckOptions,\n                                       dateTimeFormat,\n                                       locale,\n                                       basePath,\n                                       baseCollectionPath,\n                                       onAnalyticsEvent,\n                                       propertyConfigs: propertyConfigsProp,\n                                       plugins,\n                                       autoOpenDrawer,\n                                       firestoreIndexesBuilder,\n                                       components,\n                                       localTextSearchEnabled = false,\n                                   }: FireCMSFirebaseAppProps) {\n\n    /**\n     * Update the browser title and icon\n     */\n    useBrowserTitleAndIcon(name, logo);\n\n    const propertyConfigs: Record<string, PropertyConfig> = (propertyConfigsProp ?? [])\n        .map(pc => ({\n            [pc.key]: pc\n        }))\n        .reduce((a, b) => ({ ...a, ...b }), {});\n\n    const {\n        firebaseApp,\n        firebaseConfigLoading,\n        configError\n    } = useInitialiseFirebase({\n        onFirebaseInit,\n        firebaseConfig\n    });\n\n    /**\n     * Controller used to manage the dark or light color mode\n     */\n    const modeController = useBuildModeController();\n\n    const {\n        loading,\n        appCheckVerified,\n        error\n    } = useAppCheck({\n        firebaseApp,\n        options: appCheckOptions\n    });\n\n    /**\n     * Controller for managing authentication\n     */\n    const authController: FirebaseAuthController = useFirebaseAuthController({\n        firebaseApp,\n        signInOptions\n    });\n\n    /**\n     * Controller for saving some user preferences locally.\n     */\n    const userConfigPersistence = useBuildLocalConfigurationPersistence();\n\n    const firestoreDelegate = useFirestoreDelegate({\n        firebaseApp,\n        textSearchControllerBuilder: textSearchControllerBuilder,\n        firestoreIndexesBuilder: firestoreIndexesBuilder,\n        localTextSearchEnabled\n    })\n\n    /**\n     * Controller used for saving and fetching files in storage\n     */\n    const storageSource = useFirebaseStorageSource({\n        firebaseApp\n    });\n\n    /**\n     * Validate authenticator\n     */\n    const {\n        authLoading,\n        canAccessMainView,\n        notAllowedError\n    } = useValidateAuthenticator({\n        authController,\n        authenticator,\n        dataSourceDelegate: firestoreDelegate,\n        storageSource\n    });\n\n    const navigationController = useBuildNavigationController({\n        collections,\n        views,\n        basePath,\n        baseCollectionPath,\n        authController,\n        adminViews,\n        dataSourceDelegate: firestoreDelegate\n    });\n\n    if (firebaseConfigLoading || !firebaseApp || loading) {\n        return <>\n            <CircularProgressCenter/>\n        </>;\n    }\n\n    if (configError) {\n        return <CenteredView>{configError}</CenteredView>;\n    }\n\n    return (\n        <SnackbarProvider>\n            <ModeControllerProvider value={modeController}>\n\n                <FireCMS\n                    authController={authController}\n                    navigationController={navigationController}\n                    userConfigPersistence={userConfigPersistence}\n                    dateTimeFormat={dateTimeFormat}\n                    dataSourceDelegate={firestoreDelegate}\n                    storageSource={storageSource}\n                    entityLinkBuilder={({ entity }) => `https://console.firebase.google.com/project/${firebaseApp.options.projectId}/firestore/data/${entity.path}/${entity.id}`}\n                    locale={locale}\n                    onAnalyticsEvent={onAnalyticsEvent}\n                    plugins={plugins}\n                    propertyConfigs={propertyConfigs}>\n                    {({\n                          context,\n                          loading\n                      }) => {\n\n                        let component;\n                        if (loading || authLoading) {\n                            component = <CircularProgressCenter size={\"large\"}/>;\n                        } else {\n                            const usedLogo = modeController.mode === \"dark\" && logoDark ? logoDark : logo;\n                            if (!canAccessMainView) {\n                                const LoginViewUsed = components?.LoginView ?? FirebaseLoginView;\n                                component = (\n                                    <LoginViewUsed\n                                        logo={usedLogo}\n                                        allowSkipLogin={allowSkipLogin}\n                                        signInOptions={signInOptions ?? DEFAULT_SIGN_IN_OPTIONS}\n                                        firebaseApp={firebaseApp}\n                                        authController={authController}\n                                        notAllowedError={notAllowedError}/>\n                                );\n                            } else {\n                                component = (\n                                    <Scaffold\n                                        name={name}\n                                        logo={usedLogo}\n                                        fireCMSAppBarProps={{\n                                            endAdornment: toolbarExtraWidget\n                                        }}\n                                        autoOpenDrawer={autoOpenDrawer}>\n                                        <NavigationRoutes\n                                            HomePage={components?.HomePage}/>\n                                        <SideDialogs/>\n                                    </Scaffold>\n                                );\n                            }\n                        }\n\n                        return component;\n                    }}\n                </FireCMS>\n            </ModeControllerProvider>\n        </SnackbarProvider>\n    );\n}\n","import { collection, collectionGroup, DocumentSnapshot, Firestore, getDocs, limit, query } from \"firebase/firestore\";\n\nexport async function getDocuments(\n    firestore: Firestore,\n    collectionPath: string,\n    isCollectionGroup: boolean = false,\n    parentPathSegments?: string[],\n    limitCount = 100\n): Promise<DocumentSnapshot[]> {\n\n    if (parentPathSegments && (parentPathSegments ?? [])?.length > 0) {\n        const [thisSubPath, ...restSubpaths] = parentPathSegments;\n        const childDocs = await getDocs(query(collection(firestore, thisSubPath), limit(5)));\n        return Promise.all(childDocs.docs\n            .map((doc) => getDocuments(\n                firestore,\n                doc.ref.path + \"/\" + collectionPath,\n                isCollectionGroup,\n                restSubpaths,\n                Math.max(Math.ceil(limitCount / 5), 5)\n            )))\n            .then((res) => res.flat());\n    }\n\n    const q = query(\n        isCollectionGroup ? collectionGroup(firestore, collectionPath) : collection(firestore, collectionPath),\n        limit(limitCount));\n    const res = await getDocs(q);\n    console.debug(\"Got documents\", isCollectionGroup, q, res.docs);\n    return res.docs;\n}\n","import { buildEntityPropertiesFromData, buildPropertiesOrder } from \"@firecms/schema_inference\";\nimport { DocumentReference, Firestore, Timestamp } from \"firebase/firestore\";\nimport { DataType, EntityCollection, GeoPoint, removeInitialAndTrailingSlashes, unslugify } from \"@firecms/core\";\nimport { getDocuments } from \"./firestore\";\n\n/**\n * Build the guessed schema from a data collection\n * @param firestore\n * @param collectionPath\n * @param isCollectionGroup\n * @param parentPathSegments\n */\nexport async function getInferredEntityCollection(firestore: Firestore, collectionPath: string, isCollectionGroup: boolean, parentPathSegments?: string[]): Promise<Partial<EntityCollection>> {\n    console.debug(\"Building schema for collection\", collectionPath, parentPathSegments)\n    const cleanPath = removeInitialAndTrailingSlashes(collectionPath);\n    const docs = await getDocuments(firestore, cleanPath, isCollectionGroup, parentPathSegments);\n    const data = docs.map(doc => doc.data()).filter(Boolean) as object[];\n    return getInferredEntityCollectionFromData(collectionPath, data);\n}\n\nexport async function getInferredEntityCollectionFromData(collectionPath: string, data: object[]): Promise<Partial<EntityCollection>> {\n    const cleanPath = removeInitialAndTrailingSlashes(collectionPath);\n    const properties = await buildEntityPropertiesFromData(data, getType);\n    const propertiesOrder = buildPropertiesOrder(properties);\n    const lastPathSegment = cleanPath.includes(\"/\") ? cleanPath.split(\"/\").slice(-1)[0] : cleanPath;\n    return {\n        path: cleanPath,\n        name: unslugify(lastPathSegment),\n        properties,\n        propertiesOrder\n    };\n}\n\nexport async function getPropertiesFromData(data: object[]) {\n    return buildEntityPropertiesFromData(data, getType);\n}\n\nfunction getType(value: any): DataType {\n    if (typeof value === \"number\")\n        return \"number\";\n    else if (typeof value === \"string\")\n        return \"string\";\n    else if (typeof value === \"boolean\")\n        return \"boolean\";\n    else if (Array.isArray(value))\n        return \"array\";\n    else if (value instanceof Timestamp)\n        return \"date\";\n    else if (value instanceof GeoPoint)\n        return \"geopoint\";\n    else if (value instanceof DocumentReference)\n        return \"reference\";\n    return \"map\";\n}\n","import { FirebaseApp } from \"firebase/app\";\nimport { getInferredEntityCollection } from \"./schema_inference\";\nimport { CollectionInference } from \"@firecms/collection_editor\";\nimport { getFirestore } from \"firebase/firestore\";\n\nexport const buildCollectionInference = (dataFirebaseApp?: FirebaseApp): CollectionInference | undefined => {\n    if (!dataFirebaseApp) return undefined;\n    return (path: string, collectionGroup: boolean, parentPathSegments: string[]) => {\n        const firestore = getFirestore(dataFirebaseApp);\n        return getInferredEntityCollection(firestore, path, collectionGroup, parentPathSegments)\n    };\n}\n"],"names":["useFirebaseAuthController","loading","firebaseApp","signInOptions","onSignOutProp","defineRolesFor","loggedUser","setLoggedUser","useState","authError","setAuthError","authProviderError","setAuthProviderError","initialLoading","setInitialLoading","authLoading","setAuthLoading","loginSkipped","setLoginSkipped","confirmationResult","setConfirmationResult","roles","setRoles","extra","setExtra","authRef","useRef","getAuth","updateUser","useCallback","user","initialize","updateRoles","userRoles","equal","useEffect","auth","onAuthStateChanged","error","e","getProviderOptions","providerId","option","googleLogin","provider","GoogleAuthProvider","options","scope","signInWithPopup","getAuthToken","emailPasswordLogin","email","password","signInWithEmailAndPassword","createUserWithEmailAndPassword","createUserWithEmailAndPasswordFirebase","fetchSignInMethodsForEmail","fetchSignInMethodsForEmailFirebase","res","onSignOut","signOut","_","doOauthLogin","anonymousLogin","signInAnonymously","phoneLogin","phone","applicationVerifier","signInWithPhoneNumber","appleLogin","OAuthProvider","facebookLogin","FacebookAuthProvider","githubLogin","GithubAuthProvider","microsoftLogin","twitterLogin","TwitterAuthProvider","skipLogin","useFirebaseStorageSource","bucketUrl","urlsCache","file","fileName","path","metadata","bucket","storage","getStorage","usedFilename","uploadBytes","ref","snapshot","fileRef","url","getDownloadURL","blob","storagePathOrUrl","getMetadata","result","hostingError","useInitialiseFirebase","firebaseConfig","fromUrl","onFirebaseInit","name","authDomain","setFirebaseApp","firebaseConfigLoading","setFirebaseConfigLoading","configError","setConfigError","initFirebase","config","targetName","existingApp","getApps","app","deleteApp","initialisedFirebaseApp","initializeApp","fetchFromUrl","response","useAppCheck","appCheckLoading","setAppCheckLoading","React","appCheckVerified","setAppCheckVerified","setError","verifyToken","appCheck","token","getToken","isTokenAutoRefreshEnabled","initializeAppCheck","buildCollectionId","idOrPath","parentCollectionIds","stripCollectionPath","COLLECTION_PATH_SEPARATOR","setUndefinedToDelete","data","v","key","value","a","b","deleteField","docsToCollectionTree","docs","collectionsMap","doc","id","collection","docToCollection","parentId","parentCollection","propertiesOrder","properties","makePropertiesEditable","sortedProperties","sortProperties","prepareCollectionForPersistence","propertyConfigs","inputProperties","rest","cleanedProperties","cleanPropertyConfigs","removeFunctions","newCollection","removeDuplicates","view","property","cleanProperty","removePropsIfExisting","array","getFirestoreDataInPath","parentPaths","limit","firestore","getFirestore","currentDocs","index","allPaths","parentPath","q","query","limitClause","getDocs","querySnapshot","performAlgoliaTextSearch","hits","hit","err","buildAlgoliaSearchController","isPathSupported","search","props","DEFAULT_SERVER","performPineconeTextSearch","host","firebaseToken","projectId","collectionPath","buildPineconeSearchController","MAX_SEARCH_RESULTS","localSearchControllerBuilder","currentPath","indexes","listeners","destroyListener","collectionProp","resolve","reject","buildIndex","col","onSnapshot","searchString","JsSearch","useFirestoreDelegate","textSearchControllerBuilder","firestoreIndexesBuilder","localTextSearchEnabled","searchControllerRef","buildTextSearchControllerWithLocalSearch","buildQuery","filter","orderBy","order","startAfter","collectionGroup","collectionReference","collectionGroupClause","collectionClause","queryParams","entry","filterParameter","op","whereClause","cmsToFirestoreModel","orderByClause","startAfterClause","getAndBuildEntity","entityId","getDoc","docSnapshot","createEntityFromDocument","listenEntity","onUpdate","onError","performTextSearch","textSearchController","subscriptions","currentUser","ids","entities","addedEntitiesSet","entity","p","setDateToMidnight","firestoreToCMSModel","values","currentTime","isCollectionGroup","status","documentReference","setDoc","deleteDoc","getCountFromServer","filterValues","sortBy","sortKey","sortDirection","filterKeys","filtersCount","compositeIndex","docSnap","getCMSPathFromFirestorePath","serverTimestamp","Timestamp","FirestoreGeoPoint","GeoPoint","DocumentReference","EntityReference","childValue","fsPath","to","input","date","firestoreModel","localSearchController","useFirebaseRTDBDelegate","fetchCollection","database","getDatabase","dbQuery","orderByKey","startAt","limitToFirst","get","listenCollection","dbRef","unsubscribe","onValue","fetchEntity","saveEntity","finalId","push","set","deleteEntity","remove","checkUniqueField","orderByChild","entityValue","generateEntityId","isFilterCombinationValid","cmsToRTDBModel","delegateToCMSModel","newDate","rtdbModel","RECAPTCHA_CONTAINER_ID","useRecaptcha","RecaptchaVerifier","googleIcon","mode","jsx","Fragment","jsxs","appleIcon","githubIcon","facebookIcon","microsoftIcon","twitterIcon","FirebaseLoginView","allowSkipLogin","logo","authController","noUserComponent","disableSignupScreen","disabled","additionalComponent","notAllowedError","modeState","useModeController","passwordLoginSelected","setPasswordLoginSelected","phoneLoginSelected","setPhoneLoginSelected","resolvedSignInOptions","o","sendMFASms","recaptchaVerifier","resolver","getMultiFactorResolver","PhoneMultiFactorGenerator","phoneInfoOptions","PhoneAuthProvider","verificationId","verificationCode","cred","multiFactorAssertion","buildErrorView","errorView","ignoredCodes","ErrorView","Button","logoComponent","FireCMSLogo","notAllowedMessage","buildOauthLoginButtons","LoginButton","EmailIcon","PhoneIcon","PersonOutlineIcon","LoginForm","PhoneLoginForm","icon","onClick","text","onClose","setPhone","code","setCode","isInvalidCode","setIsInvalidCode","event","IconButton","ArrowBackIcon","Typography","TextField","CircularProgress","passwordRef","loginState","setLoginState","setEmail","setPassword","previouslyUsedMethodsForUser","setPreviouslyUsedMethodsForUser","escFunction","handleEnterEmail","availableProviders","handleEnterPassword","handleRegistration","providers","DEFAULT_SIGN_IN_OPTIONS","FireCMSFirebaseApp","logoDark","toolbarExtraWidget","authenticator","collections","views","adminViews","appCheckOptions","dateTimeFormat","locale","basePath","baseCollectionPath","onAnalyticsEvent","propertyConfigsProp","plugins","autoOpenDrawer","components","useBrowserTitleAndIcon","pc","modeController","useBuildModeController","userConfigPersistence","useBuildLocalConfigurationPersistence","firestoreDelegate","storageSource","canAccessMainView","useValidateAuthenticator","navigationController","useBuildNavigationController","CircularProgressCenter","CenteredView","SnackbarProvider","ModeControllerProvider","FireCMS","context","component","usedLogo","Scaffold","NavigationRoutes","SideDialogs","LoginViewUsed","getDocuments","parentPathSegments","limitCount","thisSubPath","restSubpaths","childDocs","getInferredEntityCollection","cleanPath","removeInitialAndTrailingSlashes","getInferredEntityCollectionFromData","buildEntityPropertiesFromData","getType","buildPropertiesOrder","lastPathSegment","unslugify","getPropertiesFromData","buildCollectionInference","dataFirebaseApp"],"mappings":"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"}