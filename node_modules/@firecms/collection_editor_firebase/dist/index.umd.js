(function(C,s){typeof exports=="object"&&typeof module<"u"?s(exports,require("react"),require("firebase/firestore"),require("@firecms/collection_editor"),require("@firecms/core"),require("@firecms/firebase")):typeof define=="function"&&define.amd?define(["exports","react","firebase/firestore","@firecms/collection_editor","@firecms/core","@firecms/firebase"],s):(C=typeof globalThis<"u"?globalThis:C||self,s(C.FireCMS={},C.React,C.firestore,C.collection_editor,C.core,C.firebase))})(this,function(C,s,n,g,S,d){"use strict";function I({firebaseApp:i,configPath:r="__FIRECMS/config/collections",permissions:L,propertyConfigs:h}){const w=s.useMemo(()=>{const e={};return h?.forEach(o=>{e[o.key]=o}),e},[h]),[f,k]=s.useState(!0),[$,D]=s.useState(),[O,a]=s.useState();s.useEffect(()=>{if(!i||!r)return;const e=n.getFirestore(i);return n.onSnapshot(n.collection(e,r),{next:o=>{a(void 0);try{const t=d.docsToCollectionTree(o.docs);D(t)}catch(t){console.error(t),a(t)}k(!1)},error:o=>{k(!1),a(o)}})},[r,i]);const M=s.useCallback(({id:e,parentCollectionIds:o})=>{if(!i||!r)throw Error("useFirestoreConfigurationPersistence Firestore not initialised");const t=n.getFirestore(i),c=d.buildCollectionId(e,o);console.debug("!!Deleting collection",c);const l=n.doc(t,r,c);return n.deleteDoc(l)},[r,i]),q=s.useCallback(({id:e,collectionData:o,previousId:t,parentCollectionIds:c})=>{if(!i||!r)throw Error("useFirestoreConfigurationPersistence Firestore not initialised");const l=n.getFirestore(i);if(!e)throw Error("Trying to save a collection with no id");if(!o.path)throw Error("Trying to save a collection with no path");if(!o.name)throw Error("Trying to save a collection with no name");const F=d.prepareCollectionForPersistence(o,w),m=d.buildCollectionId(e,c),u=t?d.buildCollectionId(t,c):void 0,E=n.doc(l,r,m);return console.debug("Saving collection",{id:e,collectionData:o,previousId:t,parentCollectionIds:c,cleanedCollection:F}),n.runTransaction(l,async v=>{if(v.set(E,F,{merge:!0}),u&&u!==m){const T=n.doc(l,r,u);v.delete(T)}})},[r,i,w]),U=s.useCallback(({id:e,collectionData:o,previousId:t,parentCollectionIds:c})=>{if(!i||!r)throw Error("useFirestoreConfigurationPersistence Firestore not initialised");const l=n.getFirestore(i),F=d.prepareCollectionForPersistence(o,w),m=d.buildCollectionId(e,c),u=t?d.buildCollectionId(t,c):void 0,E=n.doc(l,r,m);return console.debug("Updating collection",{id:e,collectionData:o,previousId:t,parentCollectionIds:c,cleanedCollection:F}),n.runTransaction(l,async v=>{if(v.set(E,F,{merge:!0}),u&&u!==m){const T=n.doc(l,r,u);v.delete(T)}})},[r,i,w]),y=$!==void 0?S.applyPermissionsFunctionIfEmpty($,L):void 0,_=s.useCallback(e=>{if(!y)throw Error("Collections not initialised");const o=y.find(t=>t.id===e);if(!o)throw Error(`Collection with id ${e} not found`);return o},[y]),x=s.useCallback(({path:e,propertyKey:o,property:t,newPropertiesOrder:c,parentCollectionIds:l,namespace:F})=>{if(!i||!r)throw Error("useFirestoreConfigurationPersistence Firestore not initialised");const m=n.getFirestore(i),u=d.buildCollectionId(e,l),E=n.doc(m,r,u);return n.runTransaction(m,async v=>{const T={[g.namespaceToPropertiesPath(F)+"."+o]:d.setUndefinedToDelete(S.removeFunctions(S.removeUndefined(t)))};c&&(T.propertiesOrder=c),console.log("Saving property",{path:e,propertyKey:o,property:t,collectionPath:u,namespace:F,data:T}),v.update(E,T)})},[r,i]),j=s.useCallback(({path:e,propertyKey:o,newPropertiesOrder:t,parentCollectionIds:c,namespace:l})=>{if(!i||!r)throw Error("useFirestoreConfigurationPersistence Firestore not initialised");const F=n.getFirestore(i),m=d.buildCollectionId(e,c),u=n.doc(F,r,m);return n.runTransaction(F,async E=>{const v=d.setUndefinedToDelete({[g.namespaceToPropertiesPath(l)+"."+o]:void 0});t&&(v.propertiesOrder=t),console.log("Deleting property",{path:e,propertyKey:o,collectionPath:m,namespace:l,data:v}),E.update(u,v)})},[r,i]);return s.useMemo(()=>({loading:f,collections:y,getCollection:_,saveCollection:q,updateCollection:U,deleteCollection:M,saveProperty:x,deleteProperty:j}),[f,y,_,q,U,M,x,j])}C.useFirestoreCollectionsConfigController=I,Object.defineProperty(C,Symbol.toStringTag,{value:"Module"})});
//# sourceMappingURL=index.umd.js.map
