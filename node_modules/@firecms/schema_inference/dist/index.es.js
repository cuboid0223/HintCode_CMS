import { unslugify as O, resolveEnumValues as T, mergeDeep as j } from "@firecms/core";
import { DocumentReference as P } from "firebase/firestore";
function y(r) {
  if (!r)
    return;
  function e(i) {
    return typeof i == "string" ? i : i instanceof P ? i.path : void 0;
  }
  const s = r.values.map((i) => e(i)).filter((i) => !!i).find((i) => i.includes("/"));
  if (!s)
    return;
  const n = s.substr(0, s.lastIndexOf("/"));
  return r.values.filter((i) => {
    const a = e(i);
    return a ? a.startsWith(n) : !1;
  }).length > r.values.length / 3 * 2 ? n : void 0;
}
function b(r) {
  if (!Array.isArray(r))
    return [];
  const e = r.map((t) => typeof t == "string" ? { id: t, label: O(t) } : null).filter(Boolean);
  return e.sort((t, s) => t.label.localeCompare(s.label)), e;
}
const S = [".jpg", ".png", ".webp", ".gif"], I = [".mp3", ".ogg", ".opus", ".aac"], C = [".avi", ".mp4"], M = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
function z({
  totalDocsCount: r,
  valuesResult: e
}) {
  let t = {
    dataType: "string"
  };
  if (e) {
    const s = e.values.length, n = Array.from(e.valuesCount.keys()).length, o = {}, i = e.values.filter((f) => typeof f == "string" && f.toString().startsWith("http")).length > r / 3 * 2;
    i && (o.url = !0);
    const a = e.values.filter((f) => typeof f == "string" && M.test(f)).length > r / 3 * 2;
    a && (o.email = !0);
    const c = e.values.filter((f) => typeof f == "string" && f.length === 28 && !f.includes(" ")).length > r / 3 * 2;
    if (c && (o.readOnly = !0), !a && !i && !c && !i && n < s / 3) {
      const f = b(Array.from(e.valuesCount.keys()));
      Object.keys(f).length > 1 && (o.enumValues = f);
    }
    if (!a && !i && !c && !i && !o.enumValues) {
      const f = F(e, r);
      f && (o.storage = {
        acceptedFiles: [f],
        storagePath: y(e) ?? "/"
      });
    }
    Object.keys(o).length > 0 && (t = {
      ...t,
      ...o,
      editable: !0
    });
  }
  return t;
}
function F(r, e) {
  const t = r.values.filter((i) => typeof i == "string" && S.some((a) => i.toString().endsWith(a))).length > e / 3 * 2, s = r.values.filter((i) => typeof i == "string" && I.some((a) => i.toString().endsWith(a))).length > e / 3 * 2, n = r.values.filter((i) => typeof i == "string" && C.some((a) => i.toString().endsWith(a))).length > e / 3 * 2;
  return t ? "image/*" : s ? "audio/*" : n ? "video/*" : !1;
}
function V({
  totalDocsCount: r,
  valuesResult: e
}) {
  if (e) {
    const t = e.values.length;
    if (r === t)
      return {
        required: !0
      };
  }
}
function _({
  totalDocsCount: r,
  valuesResult: e
}) {
  return {
    dataType: "reference",
    path: y(e) ?? "!!!FIX_ME!!!",
    editable: !0
  };
}
async function k(r, e) {
  const t = {}, s = {};
  return r && r.forEach((n) => {
    n && Object.entries(n).forEach(([o, i]) => {
      d(t, o, i, e), p(s, o, i, e);
    });
  }), A(r.length, t, s);
}
function U(r, e, t) {
  const s = {}, n = {};
  r && r.forEach((a) => {
    l(e.dataType, s, a, t), p(n, "inferred_prop", a, t);
  });
  const o = "enumValues" in e ? T(e.enumValues) : void 0;
  if (o) {
    const a = b(Array.from(n.inferred_prop.valuesCount.keys()));
    return {
      ...e,
      enumValues: [...a, ...o]
    };
  }
  const i = h("inferred_prop", r.length, e.dataType, s, n.inferred_prop);
  return j(i, e);
}
function L(r) {
  function e(s) {
    const n = s.toLowerCase();
    return n === "title" || n === "name" ? 3 : n.includes("title") || n.includes("name") ? 2 : n.includes("image") || n.includes("picture") ? 1 : 0;
  }
  const t = Object.keys(r);
  return t.sort(), t.sort((s, n) => e(n) - e(s)), t;
}
function l(r, e, t, s) {
  if (r === "map") {
    if (t) {
      let n = e[r];
      n || (n = {}, e[r] = n), Object.entries(t).forEach(([o, i]) => {
        d(n, o, i, s);
      });
    }
  } else if (r === "array") {
    let n = e[r];
    if (n || (n = {}, e[r] = n), t && Array.isArray(t) && t.length > 0) {
      const o = x(t, s);
      n[o] ? n[o]++ : n[o] = 1;
    }
  } else
    e[r] ? e[r]++ : e[r] = 1;
}
function d(r, e, t, s) {
  let n = r[e];
  if (n || (n = {}, r[e] = n), t != null) {
    const o = s(t);
    l(o, n, t, s);
  }
}
function p(r, e, t, s) {
  const n = s(t);
  let o = r[e];
  if (o || (o = {
    values: [],
    valuesCount: /* @__PURE__ */ new Map()
  }, r[e] = o), n === "map") {
    let i = o.map;
    i || (i = {}, o.map = i), t && Object.entries(t).forEach(([a, c]) => p(i, a, c, s));
  } else
    n === "array" ? Array.isArray(t) && t.forEach((i) => {
      o.values.push(i), o.valuesCount.set(i, (o.valuesCount.get(i) ?? 0) + 1);
    }) : t && (o.values.push(t), o.valuesCount.set(t, (o.valuesCount.get(t) ?? 0) + 1));
}
function m(r) {
  let e = 0;
  return Object.entries(r).forEach(([t, s]) => {
    let n = 0;
    t === "map" ? n = E(s) : t === "array" ? n = m(s) : n = s, n > e && (e = n);
  }), e;
}
function E(r) {
  return Object.entries(r).map(([e, t]) => m(t)).reduce((e, t) => Math.max(e, t), 0);
}
function g(r) {
  let e = -1, t = "string";
  return Object.entries(r).forEach(([s, n]) => {
    let o;
    s === "map" ? o = E(n) : s === "array" ? o = m(n) : o = n, o > e && (e = o, t = s);
  }), t;
}
function h(r, e, t, s, n) {
  let o;
  r && (o = Z(r.toLowerCase()));
  let i;
  if (t === "map") {
    w(s) && (i = {
      dataType: "map",
      name: o,
      keyValue: !0,
      properties: {}
    });
    const c = A(e, s.map, n ? n.mapValues : void 0);
    i = {
      dataType: "map",
      name: o,
      properties: c
    };
  } else if (t === "array") {
    const a = s.array, c = g(a), f = h(r, e, c, a, n);
    i = {
      dataType: "array",
      name: o,
      of: f
    };
  }
  if (!i) {
    const a = {
      name: r,
      totalDocsCount: e,
      valuesResult: n
    };
    t === "string" ? i = z(a) : t === "reference" ? i = _(a) : i = {
      dataType: t
    }, o && (i.name = o);
    const c = V(a);
    c && (i.validation = c);
  }
  return {
    ...i,
    editable: !0
  };
}
function A(r, e, t) {
  const s = {};
  return Object.entries(e).forEach(([n, o]) => {
    const i = g(o);
    s[n] = h(n, r, i, o, t ? t[n] : void 0);
  }), s;
}
function u(r) {
  let e = 0;
  return Object.entries(r).forEach(([t, s]) => {
    typeof s == "object" ? e = Math.max(e, u(s)) : e = Math.max(e, s);
  }), e;
}
function x(r, e) {
  let t = {};
  return r.forEach((s) => {
    l(e(s), t, s, e);
  }), g(t);
}
function w(r) {
  const e = u(r);
  let t = 0;
  return Object.entries(r.map ?? {}).forEach(([s, n]) => {
    u(n) < e / 3 && t++;
  }), t / Object.entries(r.map ?? {}).length > 0.5;
}
function Z(r) {
  return r.replace(/[_\-]+/g, " ").replace(/([a-z])([A-Z])/g, "$1 $2").toLowerCase().split(" ").map((n) => n.charAt(0).toUpperCase() + n.slice(1)).join(" ");
}
function X(r) {
  return typeof r == "string" ? "string" : typeof r == "number" ? "number" : typeof r == "boolean" ? "boolean" : Array.isArray(r) ? "array" : typeof r == "object" ? "map" : "string";
}
export {
  k as buildEntityPropertiesFromData,
  L as buildPropertiesOrder,
  U as buildPropertyFromData,
  b as extractEnumFromValues,
  X as inferTypeFromValue
};
//# sourceMappingURL=index.es.js.map
