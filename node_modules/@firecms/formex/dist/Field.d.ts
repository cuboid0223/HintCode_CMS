import * as React from "react";
import { FormexController } from "./types";
export interface FieldInputProps<Value> {
    /** Value of the field */
    value: Value;
    /** Name of the field */
    name: string;
    /** Multiple select? */
    multiple?: boolean;
    /** Is the field checked? */
    checked?: boolean;
    /** Change event handler */
    onChange: (event: React.SyntheticEvent) => void;
    /** Blur event handler */
    onBlur: (event: React.FocusEvent) => void;
}
export interface FormexFieldProps<Value = any, FormValues extends object = any> {
    field: FieldInputProps<Value>;
    form: FormexController<FormValues>;
}
export type FieldValidator = (value: any) => string | void | Promise<string | void>;
export interface FieldConfig<Value, C extends React.ElementType | undefined = undefined> {
    /**
     * Component to render. Can either be a string e.g. 'select', 'input', or 'textarea', or a component.
     */
    as?: C | string | React.ForwardRefExoticComponent<any>;
    /**
     * Children render function <Field name>{props => ...}</Field>)
     */
    children?: ((props: FormexFieldProps<Value>) => React.ReactNode) | React.ReactNode;
    /**
     * Validate a single field value independently
     */
    /**
     * Used for 'select' and related input types.
     */
    multiple?: boolean;
    /**
     * Field name
     */
    name: string;
    /** HTML input type */
    type?: string;
    /** Field value */
    value?: any;
    /** Inner ref */
    innerRef?: (instance: any) => void;
}
export type FieldProps<T, C extends React.ElementType | undefined> = {
    as?: C;
} & (C extends React.ElementType ? (React.ComponentProps<C> & FieldConfig<T, C>) : FieldConfig<T, C>);
export declare function Field<T, C extends React.ElementType | undefined = undefined>({ validate, name, children, as: is, // `as` is reserved in typescript lol
className, ...props }: FieldProps<T, C>): any;
